"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/defineProperty-e24c82ea.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/defineProperty-e24c82ea.esm.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_\": function() { return /* binding */ _defineProperty; }\n/* harmony export */ });\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC9kZWZpbmVQcm9wZXJ0eS1lMjRjODJlYS5lc20uanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC9kZWZpbmVQcm9wZXJ0eS1lMjRjODJlYS5lc20uanM/MWUyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59XG5cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykge1xuICB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IHsgX2RlZmluZVByb3BlcnR5IGFzIF8gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/defineProperty-e24c82ea.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-aa7869f7.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-aa7869f7.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$\": function() { return /* binding */ FactoryDeploymentSchema; },\n/* harmony export */   \"A\": function() { return /* binding */ MintRequest1155; },\n/* harmony export */   \"B\": function() { return /* binding */ BaseSignaturePayloadInput; },\n/* harmony export */   \"C\": function() { return /* binding */ CommonContractSchema; },\n/* harmony export */   \"D\": function() { return /* binding */ MintRequest721withQuantity; },\n/* harmony export */   \"E\": function() { return /* binding */ EditionMetadataOutputSchema; },\n/* harmony export */   \"F\": function() { return /* binding */ MerkleSchema; },\n/* harmony export */   \"G\": function() { return /* binding */ GenericRequest; },\n/* harmony export */   \"H\": function() { return /* binding */ SnapshotEntryInput; },\n/* harmony export */   \"I\": function() { return /* binding */ SnapshotInputSchema; },\n/* harmony export */   \"J\": function() { return /* binding */ SnapshotEntryWithProofSchema; },\n/* harmony export */   \"K\": function() { return /* binding */ SnapshotSchema; },\n/* harmony export */   \"L\": function() { return /* binding */ SnapshotInfoSchema; },\n/* harmony export */   \"M\": function() { return /* binding */ MintRequest20; },\n/* harmony export */   \"N\": function() { return /* binding */ BYOCContractMetadataSchema; },\n/* harmony export */   \"O\": function() { return /* binding */ OptionalPropertiesInput; },\n/* harmony export */   \"P\": function() { return /* binding */ PartialClaimConditionInputSchema; },\n/* harmony export */   \"Q\": function() { return /* binding */ CustomContractInput; },\n/* harmony export */   \"R\": function() { return /* binding */ CustomContractOutput; },\n/* harmony export */   \"S\": function() { return /* binding */ SUPPORTED_CHAIN_IDS; },\n/* harmony export */   \"T\": function() { return /* binding */ TokenMintInputSchema; },\n/* harmony export */   \"U\": function() { return /* binding */ CustomContractDeploy; },\n/* harmony export */   \"V\": function() { return /* binding */ CustomContractSchema; },\n/* harmony export */   \"W\": function() { return /* binding */ AbiTypeSchema; },\n/* harmony export */   \"X\": function() { return /* binding */ AbiObjectSchema; },\n/* harmony export */   \"Y\": function() { return /* binding */ AbiSchema; },\n/* harmony export */   \"Z\": function() { return /* binding */ PreDeployMetadata; },\n/* harmony export */   \"_\": function() { return /* binding */ ChainIdToAddressSchema; },\n/* harmony export */   \"a\": function() { return /* binding */ ClaimConditionMetadataSchema; },\n/* harmony export */   \"a$\": function() { return /* binding */ ThirdwebSDK; },\n/* harmony export */   \"a0\": function() { return /* binding */ ExtraPublishMetadataSchemaInput; },\n/* harmony export */   \"a1\": function() { return /* binding */ ExtraPublishMetadataSchemaOutput; },\n/* harmony export */   \"a2\": function() { return /* binding */ FullPublishMetadataSchemaInput; },\n/* harmony export */   \"a3\": function() { return /* binding */ FullPublishMetadataSchemaOutput; },\n/* harmony export */   \"a4\": function() { return /* binding */ ProfileSchemaInput; },\n/* harmony export */   \"a5\": function() { return /* binding */ ProfileSchemaOutput; },\n/* harmony export */   \"a6\": function() { return /* binding */ PublishedContractSchema; },\n/* harmony export */   \"a7\": function() { return /* binding */ ContractInfoSchema; },\n/* harmony export */   \"a8\": function() { return /* binding */ CompilerMetadataFetchedSchema; },\n/* harmony export */   \"a9\": function() { return /* binding */ PreDeployMetadataFetchedSchema; },\n/* harmony export */   \"aA\": function() { return /* binding */ Erc721ClaimableWithConditions; },\n/* harmony export */   \"aB\": function() { return /* binding */ Erc721WithQuantitySignatureMintable; },\n/* harmony export */   \"aC\": function() { return /* binding */ Erc721Supply; },\n/* harmony export */   \"aD\": function() { return /* binding */ Erc721Enumerable; },\n/* harmony export */   \"aE\": function() { return /* binding */ Erc721Mintable; },\n/* harmony export */   \"aF\": function() { return /* binding */ Erc721BatchMintable; },\n/* harmony export */   \"aG\": function() { return /* binding */ Erc721Burnable; },\n/* harmony export */   \"aH\": function() { return /* binding */ StandardErc721; },\n/* harmony export */   \"aI\": function() { return /* binding */ Erc1155; },\n/* harmony export */   \"aJ\": function() { return /* binding */ Erc1155Enumerable; },\n/* harmony export */   \"aK\": function() { return /* binding */ Erc1155Mintable; },\n/* harmony export */   \"aL\": function() { return /* binding */ Erc1155BatchMintable; },\n/* harmony export */   \"aM\": function() { return /* binding */ Erc1155SignatureMintable; },\n/* harmony export */   \"aN\": function() { return /* binding */ Erc1155Burnable; },\n/* harmony export */   \"aO\": function() { return /* binding */ Erc1155LazyMintable; },\n/* harmony export */   \"aP\": function() { return /* binding */ StandardErc1155; },\n/* harmony export */   \"aQ\": function() { return /* binding */ MarketplaceDirect; },\n/* harmony export */   \"aR\": function() { return /* binding */ MarketplaceAuction; },\n/* harmony export */   \"aS\": function() { return /* binding */ ContractDeployer; },\n/* harmony export */   \"aT\": function() { return /* binding */ GasCostEstimator; },\n/* harmony export */   \"aU\": function() { return /* binding */ ContractEvents; },\n/* harmony export */   \"aV\": function() { return /* binding */ ContractInterceptor; },\n/* harmony export */   \"aW\": function() { return /* binding */ ContractPlatformFee; },\n/* harmony export */   \"aX\": function() { return /* binding */ ContractPublishedMetadata; },\n/* harmony export */   \"aY\": function() { return /* binding */ ContractOwner; },\n/* harmony export */   \"aZ\": function() { return /* binding */ TransactionTask; },\n/* harmony export */   \"a_\": function() { return /* binding */ UserWallet; },\n/* harmony export */   \"aa\": function() { return /* binding */ LoginOptionsSchema; },\n/* harmony export */   \"ab\": function() { return /* binding */ LoginPayloadDataSchema; },\n/* harmony export */   \"ac\": function() { return /* binding */ LoginPayloadSchema; },\n/* harmony export */   \"ad\": function() { return /* binding */ VerifyOptionsSchema; },\n/* harmony export */   \"ae\": function() { return /* binding */ AuthenticationOptionsSchema; },\n/* harmony export */   \"af\": function() { return /* binding */ AuthenticationPayloadDataSchema; },\n/* harmony export */   \"ag\": function() { return /* binding */ AuthenticationPayloadSchema; },\n/* harmony export */   \"ah\": function() { return /* binding */ WalletAuthenticator; },\n/* harmony export */   \"ai\": function() { return /* binding */ ContractEncoder; },\n/* harmony export */   \"aj\": function() { return /* binding */ ContractMetadata; },\n/* harmony export */   \"ak\": function() { return /* binding */ ContractRoles; },\n/* harmony export */   \"al\": function() { return /* binding */ ContractRoyalty; },\n/* harmony export */   \"am\": function() { return /* binding */ ContractPrimarySale; },\n/* harmony export */   \"an\": function() { return /* binding */ DelayedReveal; },\n/* harmony export */   \"ao\": function() { return /* binding */ DropClaimConditions; },\n/* harmony export */   \"ap\": function() { return /* binding */ DropErc1155ClaimConditions; },\n/* harmony export */   \"aq\": function() { return /* binding */ DropErc1155History; },\n/* harmony export */   \"ar\": function() { return /* binding */ Erc20; },\n/* harmony export */   \"as\": function() { return /* binding */ Erc20Mintable; },\n/* harmony export */   \"at\": function() { return /* binding */ Erc20BatchMintable; },\n/* harmony export */   \"au\": function() { return /* binding */ TokenERC20History; },\n/* harmony export */   \"av\": function() { return /* binding */ Erc20SignatureMintable; },\n/* harmony export */   \"aw\": function() { return /* binding */ Erc20Burnable; },\n/* harmony export */   \"ax\": function() { return /* binding */ StandardErc20; },\n/* harmony export */   \"ay\": function() { return /* binding */ Erc721; },\n/* harmony export */   \"az\": function() { return /* binding */ Erc721LazyMintable; },\n/* harmony export */   \"b\": function() { return /* binding */ ClaimConditionInputSchema; },\n/* harmony export */   \"b$\": function() { return /* binding */ APPROVED_IMPLEMENTATIONS; },\n/* harmony export */   \"b0\": function() { return /* binding */ ListingType; },\n/* harmony export */   \"b1\": function() { return /* binding */ ProposalState; },\n/* harmony export */   \"b2\": function() { return /* binding */ VoteType; },\n/* harmony export */   \"b3\": function() { return /* binding */ ClaimEligibility; },\n/* harmony export */   \"b4\": function() { return /* binding */ fetchCurrencyValue; },\n/* harmony export */   \"b5\": function() { return /* binding */ fetchCurrencyMetadata; },\n/* harmony export */   \"b6\": function() { return /* binding */ normalizePriceValue; },\n/* harmony export */   \"b7\": function() { return /* binding */ convertToReadableQuantity; },\n/* harmony export */   \"b8\": function() { return /* binding */ NotFoundError; },\n/* harmony export */   \"b9\": function() { return /* binding */ InvalidAddressError; },\n/* harmony export */   \"bA\": function() { return /* binding */ extractConstructorParams; },\n/* harmony export */   \"bB\": function() { return /* binding */ extractFunctions; },\n/* harmony export */   \"bC\": function() { return /* binding */ extractConstructorParamsFromAbi; },\n/* harmony export */   \"bD\": function() { return /* binding */ extractFunctionParamsFromAbi; },\n/* harmony export */   \"bE\": function() { return /* binding */ extractFunctionsFromAbi; },\n/* harmony export */   \"bF\": function() { return /* binding */ extractEventsFromAbi; },\n/* harmony export */   \"bG\": function() { return /* binding */ extractMinimalProxyImplementationAddress; },\n/* harmony export */   \"bH\": function() { return /* binding */ resolveContractUriFromAddress; },\n/* harmony export */   \"bI\": function() { return /* binding */ extractIPFSHashFromBytecode; },\n/* harmony export */   \"bJ\": function() { return /* binding */ fetchContractMetadataFromAddress; },\n/* harmony export */   \"bK\": function() { return /* binding */ fetchContractMetadata; },\n/* harmony export */   \"bL\": function() { return /* binding */ fetchSourceFilesFromMetadata; },\n/* harmony export */   \"bM\": function() { return /* binding */ fetchRawPredeployMetadata; },\n/* harmony export */   \"bN\": function() { return /* binding */ fetchPreDeployMetadata; },\n/* harmony export */   \"bO\": function() { return /* binding */ fetchExtendedReleaseMetadata; },\n/* harmony export */   \"bP\": function() { return /* binding */ detectFeatures; },\n/* harmony export */   \"bQ\": function() { return /* binding */ getAllDetectedFeatures; },\n/* harmony export */   \"bR\": function() { return /* binding */ getAllDetectedFeatureNames; },\n/* harmony export */   \"bS\": function() { return /* binding */ isFeatureEnabled; },\n/* harmony export */   \"bT\": function() { return /* binding */ assertEnabled; },\n/* harmony export */   \"bU\": function() { return /* binding */ detectContractFeature; },\n/* harmony export */   \"bV\": function() { return /* binding */ hasFunction; },\n/* harmony export */   \"bW\": function() { return /* binding */ toSemver; },\n/* harmony export */   \"bX\": function() { return /* binding */ isIncrementalVersion; },\n/* harmony export */   \"bY\": function() { return /* binding */ isDowngradeVersion; },\n/* harmony export */   \"bZ\": function() { return /* binding */ OZ_DEFENDER_FORWARDER_ADDRESS; },\n/* harmony export */   \"b_\": function() { return /* binding */ CONTRACT_ADDRESSES; },\n/* harmony export */   \"ba\": function() { return /* binding */ MissingRoleError; },\n/* harmony export */   \"bb\": function() { return /* binding */ AssetNotFoundError; },\n/* harmony export */   \"bc\": function() { return /* binding */ UploadError; },\n/* harmony export */   \"bd\": function() { return /* binding */ FileNameMissingError; },\n/* harmony export */   \"be\": function() { return /* binding */ DuplicateFileNameError; },\n/* harmony export */   \"bf\": function() { return /* binding */ NotEnoughTokensError; },\n/* harmony export */   \"bg\": function() { return /* binding */ MissingOwnerRoleError; },\n/* harmony export */   \"bh\": function() { return /* binding */ QuantityAboveLimitError; },\n/* harmony export */   \"bi\": function() { return /* binding */ FetchError; },\n/* harmony export */   \"bj\": function() { return /* binding */ DuplicateLeafsError; },\n/* harmony export */   \"bk\": function() { return /* binding */ AuctionAlreadyStartedError; },\n/* harmony export */   \"bl\": function() { return /* binding */ FunctionDeprecatedError; },\n/* harmony export */   \"bm\": function() { return /* binding */ ListingNotFoundError; },\n/* harmony export */   \"bn\": function() { return /* binding */ WrongListingTypeError; },\n/* harmony export */   \"bo\": function() { return /* binding */ RestrictedTransferError; },\n/* harmony export */   \"bp\": function() { return /* binding */ AdminRoleMissingError; },\n/* harmony export */   \"bq\": function() { return /* binding */ AuctionHasNotEndedError; },\n/* harmony export */   \"br\": function() { return /* binding */ ExtensionNotImplementedError; },\n/* harmony export */   \"bs\": function() { return /* binding */ TransactionError; },\n/* harmony export */   \"bt\": function() { return /* binding */ convertToTWError; },\n/* harmony export */   \"bu\": function() { return /* binding */ includesErrorMessage; },\n/* harmony export */   \"bv\": function() { return /* binding */ createSnapshot; },\n/* harmony export */   \"bw\": function() { return /* binding */ ALL_ROLES; },\n/* harmony export */   \"bx\": function() { return /* binding */ getRoleHash; },\n/* harmony export */   \"by\": function() { return /* binding */ matchesPrebuiltAbi; },\n/* harmony export */   \"bz\": function() { return /* binding */ hasMatchingAbi; },\n/* harmony export */   \"c\": function() { return /* binding */ ClaimConditionInputArray; },\n/* harmony export */   \"c0\": function() { return /* binding */ getApprovedImplementation; },\n/* harmony export */   \"c1\": function() { return /* binding */ getContractAddressByChainId; },\n/* harmony export */   \"c2\": function() { return /* binding */ getContractPublisherAddress; },\n/* harmony export */   \"c3\": function() { return /* binding */ getDefaultTrustedForwarders; },\n/* harmony export */   \"c4\": function() { return /* binding */ InterfaceId_IERC721; },\n/* harmony export */   \"c5\": function() { return /* binding */ InterfaceId_IERC1155; },\n/* harmony export */   \"c6\": function() { return /* binding */ NATIVE_TOKEN_ADDRESS; },\n/* harmony export */   \"c7\": function() { return /* binding */ NATIVE_TOKENS; },\n/* harmony export */   \"c8\": function() { return /* binding */ getNativeTokenByChainId; },\n/* harmony export */   \"c9\": function() { return /* binding */ EventType; },\n/* harmony export */   \"cA\": function() { return /* binding */ PaperCheckout; },\n/* harmony export */   \"cB\": function() { return /* binding */ ContractWrapper; },\n/* harmony export */   \"cC\": function() { return /* binding */ DropErc1155ContractSchema; },\n/* harmony export */   \"cD\": function() { return /* binding */ TokenErc1155ContractSchema; },\n/* harmony export */   \"cE\": function() { return /* binding */ MarketplaceContractSchema; },\n/* harmony export */   \"cF\": function() { return /* binding */ mapOffer; },\n/* harmony export */   \"cG\": function() { return /* binding */ isNativeToken; },\n/* harmony export */   \"cH\": function() { return /* binding */ MultiwrapContractSchema; },\n/* harmony export */   \"cI\": function() { return /* binding */ uploadOrExtractURI; },\n/* harmony export */   \"cJ\": function() { return /* binding */ hasERC20Allowance; },\n/* harmony export */   \"cK\": function() { return /* binding */ isTokenApprovedForTransfer; },\n/* harmony export */   \"cL\": function() { return /* binding */ TokenErc721ContractSchema; },\n/* harmony export */   \"cM\": function() { return /* binding */ DropErc721ContractSchema; },\n/* harmony export */   \"cN\": function() { return /* binding */ FEATURE_NFT_REVEALABLE; },\n/* harmony export */   \"cO\": function() { return /* binding */ AddressSchema; },\n/* harmony export */   \"cP\": function() { return /* binding */ BigNumberishSchema; },\n/* harmony export */   \"cQ\": function() { return /* binding */ RawDateSchema; },\n/* harmony export */   \"cR\": function() { return /* binding */ PackContractSchema; },\n/* harmony export */   \"cS\": function() { return /* binding */ SplitsContractSchema; },\n/* harmony export */   \"cT\": function() { return /* binding */ DropErc20ContractSchema; },\n/* harmony export */   \"cU\": function() { return /* binding */ TokenErc20ContractSchema; },\n/* harmony export */   \"cV\": function() { return /* binding */ VoteContractSchema; },\n/* harmony export */   \"ca\": function() { return /* binding */ DEFAULT_IPFS_GATEWAY; },\n/* harmony export */   \"cb\": function() { return /* binding */ CHAIN_NAME_TO_ID; },\n/* harmony export */   \"cc\": function() { return /* binding */ CHAIN_ID_TO_NAME; },\n/* harmony export */   \"cd\": function() { return /* binding */ DEFAULT_RPC_URLS; },\n/* harmony export */   \"ce\": function() { return /* binding */ getProviderForNetwork; },\n/* harmony export */   \"cf\": function() { return /* binding */ getReadOnlyProvider; },\n/* harmony export */   \"cg\": function() { return /* binding */ EditionDropInitializer; },\n/* harmony export */   \"ch\": function() { return /* binding */ EditionInitializer; },\n/* harmony export */   \"ci\": function() { return /* binding */ MarketplaceInitializer; },\n/* harmony export */   \"cj\": function() { return /* binding */ MultiwrapInitializer; },\n/* harmony export */   \"ck\": function() { return /* binding */ NFTCollectionInitializer; },\n/* harmony export */   \"cl\": function() { return /* binding */ NFTDropInitializer; },\n/* harmony export */   \"cm\": function() { return /* binding */ PackInitializer; },\n/* harmony export */   \"cn\": function() { return /* binding */ SignatureDropInitializer; },\n/* harmony export */   \"co\": function() { return /* binding */ SplitInitializer; },\n/* harmony export */   \"cp\": function() { return /* binding */ TokenDropInitializer; },\n/* harmony export */   \"cq\": function() { return /* binding */ TokenInitializer; },\n/* harmony export */   \"cr\": function() { return /* binding */ VoteInitializer; },\n/* harmony export */   \"cs\": function() { return /* binding */ PREBUILT_CONTRACTS_MAP; },\n/* harmony export */   \"ct\": function() { return /* binding */ CONTRACTS_MAP; },\n/* harmony export */   \"cu\": function() { return /* binding */ getContractTypeForRemoteName; },\n/* harmony export */   \"cv\": function() { return /* binding */ getContractName; },\n/* harmony export */   \"cw\": function() { return /* binding */ PAPER_API_URL; },\n/* harmony export */   \"cx\": function() { return /* binding */ parseChainIdToPaperChain; },\n/* harmony export */   \"cy\": function() { return /* binding */ fetchRegisteredCheckoutId; },\n/* harmony export */   \"cz\": function() { return /* binding */ createCheckoutLinkIntent; },\n/* harmony export */   \"d\": function() { return /* binding */ ClaimConditionOutputSchema; },\n/* harmony export */   \"e\": function() { return /* binding */ ChainId; },\n/* harmony export */   \"f\": function() { return /* binding */ EditionMetadataWithOwnerOutputSchema; },\n/* harmony export */   \"g\": function() { return /* binding */ EditionMetadataInputSchema; },\n/* harmony export */   \"h\": function() { return /* binding */ EditionMetadataInputOrUriSchema; },\n/* harmony export */   \"i\": function() { return /* binding */ CommonContractOutputSchema; },\n/* harmony export */   \"j\": function() { return /* binding */ CommonRoyaltySchema; },\n/* harmony export */   \"k\": function() { return /* binding */ CommonPrimarySaleSchema; },\n/* harmony export */   \"l\": function() { return /* binding */ CommonPlatformFeeSchema; },\n/* harmony export */   \"m\": function() { return /* binding */ CommonTrustedForwarderSchema; },\n/* harmony export */   \"n\": function() { return /* binding */ CommonSymbolSchema; },\n/* harmony export */   \"o\": function() { return /* binding */ CurrencySchema; },\n/* harmony export */   \"p\": function() { return /* binding */ CurrencyValueSchema; },\n/* harmony export */   \"q\": function() { return /* binding */ Signature20PayloadInput; },\n/* harmony export */   \"r\": function() { return /* binding */ Signature20PayloadOutput; },\n/* harmony export */   \"s\": function() { return /* binding */ Signature721PayloadInput; },\n/* harmony export */   \"t\": function() { return /* binding */ Signature721PayloadOutput; },\n/* harmony export */   \"u\": function() { return /* binding */ Signature1155PayloadInput; },\n/* harmony export */   \"v\": function() { return /* binding */ Signature1155PayloadInputWithTokenId; },\n/* harmony export */   \"w\": function() { return /* binding */ Signature1155PayloadOutput; },\n/* harmony export */   \"x\": function() { return /* binding */ Signature721WithQuantityInput; },\n/* harmony export */   \"y\": function() { return /* binding */ Signature721WithQuantityOutput; },\n/* harmony export */   \"z\": function() { return /* binding */ MintRequest721; }\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! zod */ \"./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./QueryParams-ac0149c6.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/QueryParams-ac0149c6.esm.js\");\n/* harmony import */ var _defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./defineProperty-e24c82ea.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/defineProperty-e24c82ea.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC165.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC165.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155.json\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IThirdwebContract_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_Forwarder_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/Forwarder.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Forwarder.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_DropERC20_V2_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IBurnableERC20_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDrop_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDrop.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDrop.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_V1_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMintableERC20_json__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMulticall_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMulticall.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMulticall.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC20_json__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_DropERC721_V3_json__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IBurnableERC721_json__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IClaimableERC721_json__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDelayedReveal_json__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721Enumerable_json__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721Supply_json__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ILazyMint.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMintableERC721_json__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC721_json__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC721_V1_json__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_LazyMintWithTier_json__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_DropERC1155_V2_json__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IBurnableERC1155_json__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IClaimableERC1155_json__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDrop1155_json__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDrop1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase1155_json__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase1155_V1_json__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC1155Enumerable_json__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMintableERC1155_json__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC1155_json__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! bs58 */ \"./node_modules/@thirdweb-dev/sdk/node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_37__);\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC20Metadata_json__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! merkletreejs */ \"./node_modules/merkletreejs/dist/index.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_39__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_40__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! uuid */ \"./node_modules/@thirdweb-dev/sdk/node_modules/uuid/dist/esm-browser/index.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721Metadata_json__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC1155Metadata_json__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDelayedRevealDeprecated_json__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_TWFactory_json__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/TWFactory.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/TWFactory.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_TWRegistry_json__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/TWRegistry.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ContractPublisher_json__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json\");\n/* harmony import */ var _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @thirdweb-dev/storage */ \"./node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.esm.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ERC2771Context_json__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IAppURI_json__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IAppURI.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IAppURI.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IContractMetadata_json__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPermissions_json__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPermissions.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPermissions.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPermissionsEnumerable_json__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPlatformFee_json__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPrimarySale_json__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IRoyalty_json__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IRoyalty.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_Ownable_json__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/Ownable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Ownable.json\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst BigNumberSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.union([zod__WEBPACK_IMPORTED_MODULE_57__.z.string(), zod__WEBPACK_IMPORTED_MODULE_57__.z.number(), zod__WEBPACK_IMPORTED_MODULE_57__.z.bigint(), zod__WEBPACK_IMPORTED_MODULE_57__.z.custom(data => {\n  return ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.isBigNumber(data);\n})]).transform(arg => ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(arg));\nconst BigNumberishSchema = BigNumberSchema.transform(arg => arg.toString());\nconst BigNumberTransformSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.union([zod__WEBPACK_IMPORTED_MODULE_57__.z.bigint(), zod__WEBPACK_IMPORTED_MODULE_57__.z.custom(data => {\n  return ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.isBigNumber(data);\n})]).transform(arg => {\n  return ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(arg).toString();\n});\nconst AddressSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.string().refine(arg => ethers__WEBPACK_IMPORTED_MODULE_58__.utils.isAddress(arg), out => {\n  return {\n    message: `${out} is not a valid address`\n  };\n});\nconst RawDateSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.date().transform(i => {\n  return ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(Math.floor(i.getTime() / 1000));\n});\n\n/**\n * Default to now\n */\nconst StartDateSchema = RawDateSchema.default(new Date(0));\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10));\nconst CallOverrideSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  gasLimit: BigNumberishSchema.optional(),\n  gasPrice: BigNumberishSchema.optional(),\n  maxFeePerGas: BigNumberishSchema.optional(),\n  maxPriorityFeePerGas: BigNumberishSchema.optional(),\n  nonce: BigNumberishSchema.optional(),\n  value: BigNumberishSchema.optional(),\n  blockTag: zod__WEBPACK_IMPORTED_MODULE_57__.z.union([zod__WEBPACK_IMPORTED_MODULE_57__.z.string(), zod__WEBPACK_IMPORTED_MODULE_57__.z.number()]).optional(),\n  from: AddressSchema.optional(),\n  type: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().optional()\n}).strict();\n\n/**\n * @public\n */\nlet ChainId;\n\n/**\n * @public\n */\n(function (ChainId) {\n  ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n  ChainId[ChainId[\"Goerli\"] = 5] = \"Goerli\";\n  ChainId[ChainId[\"Polygon\"] = 137] = \"Polygon\";\n  ChainId[ChainId[\"Mumbai\"] = 80001] = \"Mumbai\";\n  ChainId[ChainId[\"Localhost\"] = 1337] = \"Localhost\";\n  ChainId[ChainId[\"Hardhat\"] = 31337] = \"Hardhat\";\n  ChainId[ChainId[\"Fantom\"] = 250] = \"Fantom\";\n  ChainId[ChainId[\"FantomTestnet\"] = 4002] = \"FantomTestnet\";\n  ChainId[ChainId[\"Avalanche\"] = 43114] = \"Avalanche\";\n  ChainId[ChainId[\"AvalancheFujiTestnet\"] = 43113] = \"AvalancheFujiTestnet\";\n  ChainId[ChainId[\"Optimism\"] = 10] = \"Optimism\";\n  ChainId[ChainId[\"OptimismGoerli\"] = 420] = \"OptimismGoerli\";\n  ChainId[ChainId[\"Arbitrum\"] = 42161] = \"Arbitrum\";\n  ChainId[ChainId[\"ArbitrumGoerli\"] = 421613] = \"ArbitrumGoerli\";\n  ChainId[ChainId[\"BinanceSmartChainMainnet\"] = 56] = \"BinanceSmartChainMainnet\";\n  ChainId[ChainId[\"BinanceSmartChainTestnet\"] = 97] = \"BinanceSmartChainTestnet\";\n})(ChainId || (ChainId = {}));\n/**\n * @public\n */\nconst SUPPORTED_CHAIN_IDS = [ChainId.Mainnet, ChainId.Goerli, ChainId.Polygon, ChainId.Mumbai, ChainId.Fantom, ChainId.FantomTestnet, ChainId.Avalanche, ChainId.AvalancheFujiTestnet, ChainId.Optimism, ChainId.OptimismGoerli, ChainId.Arbitrum, ChainId.ArbitrumGoerli, ChainId.BinanceSmartChainMainnet, ChainId.BinanceSmartChainTestnet];\n\n/**\n * @public\n */\nconst NATIVE_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n/**\n * @public\n */\nconst NATIVE_TOKENS = {\n  [ChainId.Mainnet]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Goerli]: {\n    name: \"Görli Ether\",\n    symbol: \"GOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Polygon]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\"\n    }\n  },\n  [ChainId.Mumbai]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\"\n    }\n  },\n  [ChainId.Avalanche]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\"\n    }\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\"\n    }\n  },\n  [ChainId.Fantom]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\"\n    }\n  },\n  [ChainId.FantomTestnet]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\"\n    }\n  },\n  [ChainId.Arbitrum]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.ArbitrumGoerli]: {\n    name: \"Arbitrum Goerli Ether\",\n    symbol: \"AGOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Optimism]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.OptimismGoerli]: {\n    name: \"Goerli Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Hardhat]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    name: \"Binance Chain Native Token\",\n    symbol: \"BNB\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n      name: \"Wrapped Binance Chain Token\",\n      symbol: \"WBNB\"\n    }\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    name: \"Binance Chain Native Token\",\n    symbol: \"TBNB\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\",\n      name: \"Wrapped Binance Chain Testnet Token\",\n      symbol: \"WBNB\"\n    }\n  }\n};\n\n/**\n * Returns the native token for a given chain\n * @param chainId - the chain id\n * @public\n */\nfunction getNativeTokenByChainId(chainId) {\n  return NATIVE_TOKENS[chainId];\n}\n\n/**\n * @internal\n */\nconst CurrencySchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  symbol: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  decimals: zod__WEBPACK_IMPORTED_MODULE_57__.z.number()\n});\n\n/**\n * @internal\n */\nconst CurrencyValueSchema = CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n});\n\n/**\n * @internal\n */\nconst MerkleSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  merkle: zod__WEBPACK_IMPORTED_MODULE_57__.z.record(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()).default({})\n});\nconst SnapshotEntryInput = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  address: AddressSchema,\n  maxClaimable: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.Q[\"default\"](0),\n  // defaults to 0\n  price: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.Q.optional(),\n  // defaults to unlimited, but can be undefined in old snapshots\n  currencyAddress: AddressSchema.default(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero).optional() // defaults to AddressZero, but can be undefined for old snapshots\n});\n\n/**\n * @internal\n */\nconst SnapshotInputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.union([zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()).transform(strings => strings.map(address => SnapshotEntryInput.parse({\n  address\n}))), zod__WEBPACK_IMPORTED_MODULE_57__.z.array(SnapshotEntryInput)]);\nconst SnapshotEntryWithProofSchema = SnapshotEntryInput.extend({\n  proof: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string())\n});\n/**\n * @internal\n */\nconst SnapshotSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The merkle root\n   */\n  merkleRoot: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  claims: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(SnapshotEntryWithProofSchema)\n});\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst SnapshotInfoSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  merkleRoot: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  snapshotUri: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n});\n\n/**\n * @internal\n */\nconst ClaimConditionMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional()\n}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.unknown());\n\n/**\n * @internal\n */\nconst ClaimConditionInputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  startTime: StartDateSchema,\n  currencyAddress: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A[\"default\"](0),\n  maxClaimableSupply: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.Q,\n  maxClaimablePerWallet: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.Q,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.B[\"default\"](ethers__WEBPACK_IMPORTED_MODULE_58__.utils.hexZeroPad([0], 32)),\n  snapshot: zod__WEBPACK_IMPORTED_MODULE_57__.z.optional(SnapshotInputSchema).nullable(),\n  metadata: ClaimConditionMetadataSchema.optional()\n});\n\n/**\n * @internal\n */\nconst ClaimConditionInputArray = zod__WEBPACK_IMPORTED_MODULE_57__.z.array(ClaimConditionInputSchema);\n\n/**\n * @internal\n */\nconst PartialClaimConditionInputSchema = ClaimConditionInputSchema.partial();\n\n/**\n * @internal\n */\nconst ClaimConditionOutputSchema = ClaimConditionInputSchema.extend({\n  availableSupply: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.Q,\n  currentMintSupply: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.Q,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\"\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform(n => new Date(n.toNumber() * 1000)),\n  snapshot: SnapshotInputSchema.optional().nullable()\n});\n\nfunction resolveOrGenerateId(requestUId) {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    (0,uuid__WEBPACK_IMPORTED_MODULE_60__.v4)({}, buffer);\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.utils.hexlify(ethers__WEBPACK_IMPORTED_MODULE_58__.utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.utils.hexlify(requestUId);\n  }\n}\n\n/**\n * @internal\n */\nconst BaseSignaturePayloadInput = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  to: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().refine(address => address.toLowerCase() !== ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero, {\n    message: \"Cannot create payload to mint to zero address\"\n  }),\n  price: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A[\"default\"](0),\n  currencyAddress: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional().transform(arg => resolveOrGenerateId(arg)),\n  primarySaleRecipient: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero)\n});\n\n/**\n * @internal\n */\nconst Signature20PayloadInput = BaseSignaturePayloadInput.extend({\n  quantity: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A\n});\n\n/**\n * @internal\n */\nconst Signature20PayloadOutput = Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst Signature721PayloadInput = BaseSignaturePayloadInput.extend({\n  metadata: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.N,\n  royaltyRecipient: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero),\n  royaltyBps: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.a[\"default\"](0)\n});\n\n/**\n * @internal\n */\nconst Signature721PayloadOutput = Signature721PayloadInput.extend({\n  uri: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst Signature1155PayloadInput = Signature721PayloadInput.extend({\n  metadata: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.N[\"default\"](\"\"),\n  quantity: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst Signature1155PayloadInputWithTokenId = Signature1155PayloadInput.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst Signature1155PayloadOutput = Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst Signature721WithQuantityInput = Signature721PayloadInput.extend({\n  metadata: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.N[\"default\"](\"\"),\n  quantity: BigNumberSchema.default(1)\n});\n\n/**\n * @internal\n */\nconst Signature721WithQuantityOutput = Signature721PayloadOutput.extend({\n  quantity: BigNumberSchema.default(1)\n});\n\n/**\n * @public\n */\n\nconst MintRequest20 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest1155 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"tokenId\",\n  type: \"uint256\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721withQuantity = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst GenericRequest = [{\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n\n/**\n * @internal\n */\nconst CommonContractSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  description: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  image: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.F.optional(),\n  external_link: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().url().optional()\n});\n/**\n * @internal\n */\nconst CommonContractOutputSchema = CommonContractSchema.extend({\n  image: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional()\n}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.unknown());\n\n/**\n * @internal\n */\nconst CommonRoyaltySchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   *\n   *  @internalremarks used by OpenSea \"seller_fee_basis_points\"\n   */\n  seller_fee_basis_points: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.a[\"default\"](0),\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   * @internalremarks used by OpenSea \"fee_recipient\"\n   */\n  fee_recipient: AddressSchema.default(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero)\n});\n\n/**\n * @internal\n */\nconst CommonPrimarySaleSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * primary sale recipient address\n   */\n  primary_sale_recipient: AddressSchema\n});\n\n/**\n * @internal\n */\nconst CommonPlatformFeeSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * platform fee basis points\n   */\n  platform_fee_basis_points: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.a[\"default\"](0),\n  /**\n   * platform fee recipient address\n   */\n  platform_fee_recipient: AddressSchema.default(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero)\n});\n\n/**\n * @internal\n */\nconst CommonTrustedForwarderSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  trusted_forwarders: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(AddressSchema).default([])\n});\n\n/**\n * @internal\n */\nconst CommonSymbolSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  symbol: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional().default(\"\")\n});\n\nconst PropertiesInput = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.union([BigNumberTransformSchema, zod__WEBPACK_IMPORTED_MODULE_57__.z.unknown()]));\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = zod__WEBPACK_IMPORTED_MODULE_57__.z.union([zod__WEBPACK_IMPORTED_MODULE_57__.z.array(PropertiesInput), PropertiesInput]).optional();\n\n/**\n * @internal\n */\nconst TokenMintInputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  toAddress: AddressSchema,\n  amount: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A\n});\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nconst EditionMetadataOutputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  supply: BigNumberSchema,\n  metadata: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.C\n});\n\n/**\n * @internal\n */\nconst EditionMetadataWithOwnerOutputSchema = EditionMetadataOutputSchema.extend({\n  owner: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  quantityOwned: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst EditionMetadataInputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  supply: BigNumberishSchema,\n  metadata: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.b\n});\n\n/**\n * @internal\n */\nconst EditionMetadataInputOrUriSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  supply: BigNumberishSchema,\n  metadata: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.N\n});\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nconst OZ_DEFENDER_FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\nconst TWRegistry_address = \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\";\nconst TWFactory_address = \"0x5DBC7B840baa9daBcBe9D2492E45D7244B54A2A0\";\nconst ContractPublisher_address = \"0x664244560eBa21Bf82d7150C791bE1AbcD5B4cd7\"; // Polygon only\n\n/**\n * @internal\n */\nconst CONTRACT_ADDRESSES = {\n  [ChainId.Mainnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x76ce2CB1Ae48Fa067f4fb8c5f803111AE0B24BEA\",\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero\n  },\n  [ChainId.Goerli]: {\n    openzeppelinForwarder: \"0x5001A14CA6163143316a7C614e30e6041033Ac20\",\n    openzeppelinForwarderEOA: \"0xe73c50cB9c5B378627ff625BB6e6725A4A5D65d2\",\n    biconomyForwarder: \"0xE041608922d06a4F26C0d4c27d8bCD01daf1f792\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0xB1Bd9d7942A250BA2Dce27DD601F2ED4211A60C4\"\n  },\n  [ChainId.Polygon]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x4f247c69184ad61036EC2Bb3213b69F10FbEDe1F\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x308473Be900F4185A56587dE54bDFF5E8f7a6AE7\"\n  },\n  [ChainId.Mumbai]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3F17972CB27506eb4a6a3D59659e0B57a43fd16C\"\n  },\n  [ChainId.Avalanche]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xe73c50cB9c5B378627ff625BB6e6725A4A5D65d2\",\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\"\n  },\n  [ChainId.Fantom]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: \"0x97EA0Fcc552D5A8Fb5e9101316AAd0D62Ea0876B\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero\n  },\n  [ChainId.FantomTestnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x42D3048b595B6e1c28a588d70366CcC2AA4dB47b\",\n    biconomyForwarder: \"0x69FB8Dca8067A5D38703b9e8b39cf2D51473E4b4\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\"\n  },\n  [ChainId.Arbitrum]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x4f247c69184ad61036EC2Bb3213b69F10FbEDe1F\",\n    biconomyForwarder: \"0xfe0fa3C06d03bDC7fb49c892BbB39113B534fB57\",\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\",\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero\n  },\n  [ChainId.ArbitrumGoerli]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0x119704314Ef304EaAAE4b3c7C9ABd59272A28310\",\n    biconomyForwarder: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\",\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero\n  },\n  [ChainId.Optimism]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x7e80648EB2071E26937F9D42A513ccf4815fc702\",\n    biconomyForwarder: \"0xefba8a2a82ec1fb1273806174f5e28fbb917cf95\",\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\",\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero\n  },\n  [ChainId.OptimismGoerli]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0x119704314Ef304EaAAE4b3c7C9ABd59272A28310\",\n    biconomyForwarder: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\",\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0xE8dd2Ff0212F86d3197b4AfDC6dAC6ac47eb10aC\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\"\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0x7e80648EB2071E26937F9D42A513ccf4815fc702\",\n    biconomyForwarder: \"0x61456BF1715C1415730076BB79ae118E806E74d2\",\n    twBYOCRegistry: ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\"\n  }\n};\nconst APPROVED_IMPLEMENTATIONS = {\n  [ChainId.Mainnet]: {\n    \"nft-drop\": \"0x60fF9952e0084A6DEac44203838cDC91ABeC8736\",\n    \"edition-drop\": \"0x74af262d0671F378F97a1EDC3d0970Dbe8A1C550\",\n    \"token-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\",\n    \"signature-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\"\n  },\n  [ChainId.Polygon]: {\n    \"nft-drop\": \"0xB96508050Ba0925256184103560EBADA912Fcc69\",\n    \"edition-drop\": \"0x74af262d0671F378F97a1EDC3d0970Dbe8A1C550\",\n    \"token-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\",\n    \"signature-drop\": \"0xBE2fDc35410E268e41Bec62DBb01AEb43245c7d5\"\n  },\n  [ChainId.Fantom]: {\n    \"nft-drop\": \"0x2A396b2D90BAcEF19cDa973586B2633d22710fC2\",\n    \"edition-drop\": \"0x06395FCF9AC6ED827f9dD6e776809cEF1Be0d21B\",\n    \"token-drop\": \"0x0148b28a38efaaC31b6aa0a6D9FEb70FE7C91FFa\",\n    \"signature-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\"\n  },\n  [ChainId.Avalanche]: {\n    \"nft-drop\": \"0x9cF91118C8ee2913F0588e0F10e36B3d63F68bF6\",\n    \"edition-drop\": \"0x135fC9D26E5eC51260ece1DF4ED424E2f55c7766\",\n    \"token-drop\": \"0xca0B071899E575BA86495D46c5066971b6f3A901\",\n    \"signature-drop\": \"0x1d47526C3292B0130ef0afD5F02c1DA052A017B3\"\n  },\n  [ChainId.Optimism]: {\n    \"nft-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\",\n    \"edition-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\",\n    \"token-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\n    \"signature-drop\": \"0x8a4cd3549e548bbEEb38C16E041FFf040a5acabD\"\n  },\n  [ChainId.Arbitrum]: {\n    \"nft-drop\": \"0xC4903c1Ff5367b9ac2c349B63DC2409421AaEE2a\",\n    \"edition-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\n    \"token-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\",\n    \"signature-drop\": \"0x2dF9851af45dd41C8584ac55D983C604da985Bc7\"\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    \"nft-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\n    \"edition-drop\": \"0x2A396b2D90BAcEF19cDa973586B2633d22710fC2\",\n    \"token-drop\": \"0xe135Ef65C2B2213C3fD56d0Bd6500A2cA147aC10\",\n    \"signature-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\"\n  },\n  [ChainId.Goerli]: {\n    \"nft-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\n    \"edition-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\",\n    \"token-drop\": \"0x5680933221B752EB443654a014f88B101F868d50\",\n    \"signature-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\"\n  },\n  [ChainId.Mumbai]: {\n    \"nft-drop\": \"0xC4903c1Ff5367b9ac2c349B63DC2409421AaEE2a\",\n    \"edition-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\n    \"token-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\",\n    \"signature-drop\": \"0x2dF9851af45dd41C8584ac55D983C604da985Bc7\"\n  },\n  [ChainId.FantomTestnet]: {\n    \"nft-drop\": \"0x8a4cd3549e548bbEEb38C16E041FFf040a5acabD\",\n    \"edition-drop\": \"0x902Dd246e66d8C3CE652375a723F2a52b43b9AAE\",\n    \"token-drop\": \"0xFBd7D24d80ee005671E731a7287DEB6073264dD1\",\n    \"signature-drop\": \"0x5A8eA4Adad8289746D073947BA06D69A62499aaf\"\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    \"nft-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\n    \"edition-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\",\n    \"token-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\",\n    \"signature-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\"\n  },\n  [ChainId.OptimismGoerli]: {\n    \"nft-drop\": \"0xCcddcec1831646Beff2753249f1B9C580327E89F\",\n    \"edition-drop\": \"0x6fD690EB509BdE4C50028C5D9C0dE3750C2Fad6A\",\n    \"token-drop\": \"0xD11c97DD5F5546B5bBd630D7D1d7327481B0b92C\",\n    \"signature-drop\": \"0x1b5947e1a2d5a29D0df20931DeAB0B87818209B9\"\n  },\n  [ChainId.ArbitrumGoerli]: {\n    \"nft-drop\": \"0x9CfE807a5b124b962064Fa8F7FD823Cc701255b6\",\n    \"edition-drop\": \"0x9cF91118C8ee2913F0588e0F10e36B3d63F68bF6\",\n    \"token-drop\": \"0x1d47526C3292B0130ef0afD5F02c1DA052A017B3\",\n    \"signature-drop\": \"0xE1eE43D23f247b6A9aF81fcE2766E76709482728\"\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    \"nft-drop\": \"\",\n    \"edition-drop\": \"\",\n    \"token-drop\": \"\",\n    \"signature-drop\": \"\" // TODO\n  }\n};\n\n/**\n * @internal\n * @param chainId\n * @param contractType\n */\nfunction getApprovedImplementation(chainId,\n// TODO use SupportedChainId once we deploy to all chains\ncontractType) {\n  if (chainId in APPROVED_IMPLEMENTATIONS) {\n    const approvedImpls = APPROVED_IMPLEMENTATIONS[chainId];\n    if (contractType in approvedImpls) {\n      return approvedImpls[contractType];\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n */\nfunction getContractAddressByChainId(chainId, contractName) {\n  // for testing only\n  if (chainId === ChainId.Hardhat) {\n    if (contractName === \"twFactory\") {\n      // eslint-disable-next-line turbo/no-undeclared-env-vars\n      return process.env.factoryAddress;\n    } else if (contractName === \"twRegistry\") {\n      // eslint-disable-next-line turbo/no-undeclared-env-vars\n      return process.env.registryAddress;\n    } else {\n      return ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero;\n    }\n  }\n  // real output here\n  return CONTRACT_ADDRESSES[chainId][contractName];\n}\n\n/**\n * @internal\n */\nfunction getContractPublisherAddress() {\n  // eslint-disable-next-line turbo/no-undeclared-env-vars\n  if (process.env.contractPublisherAddress) {\n    // eslint-disable-next-line turbo/no-undeclared-env-vars\n    return process.env.contractPublisherAddress;\n  } else {\n    return ContractPublisher_address;\n  }\n}\n\n/**\n *\n * @param chainId - chain id\n * @returns the array of trusted forwarders for the given chain id\n * @internal\n */\nfunction getDefaultTrustedForwarders(chainId) {\n  const chainEnum = SUPPORTED_CHAIN_IDS.find(c => c === chainId);\n  const biconomyForwarder = chainEnum ? CONTRACT_ADDRESSES[chainEnum].biconomyForwarder : ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero;\n  const openzeppelinForwarder = chainEnum ? CONTRACT_ADDRESSES[chainEnum].openzeppelinForwarder : ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero;\n  return biconomyForwarder !== ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero ? [openzeppelinForwarder, biconomyForwarder] : [openzeppelinForwarder];\n}\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst InterfaceId_IERC721 = ethers__WEBPACK_IMPORTED_MODULE_58__.utils.arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nconst InterfaceId_IERC1155 = ethers__WEBPACK_IMPORTED_MODULE_58__.utils.arrayify(\"0xd9b67a26\");\n\n/**\n * @public\n */\nlet EventType;\n(function (EventType) {\n  EventType[\"Transaction\"] = \"transaction\";\n  EventType[\"Signature\"] = \"signature\";\n})(EventType || (EventType = {}));\n\nconst DEFAULT_BATCH_TIME_LIMIT_MS = 50;\nconst DEFAULT_BATCH_SIZE_LIMIT = 250;\nconst DEFAULT_BATCH_OPTIONS = {\n  timeLimitMs: DEFAULT_BATCH_TIME_LIMIT_MS,\n  sizeLimit: DEFAULT_BATCH_SIZE_LIMIT\n};\n// mostly copied from ethers.js directly but make it a StaticJsonRpcProvider\nclass StaticJsonRpcBatchProvider extends ethers__WEBPACK_IMPORTED_MODULE_58__.providers.StaticJsonRpcProvider {\n  constructor(url, network) {\n    let batchOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BATCH_OPTIONS;\n    super(url, network);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_timeLimitMs\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_sizeLimit\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_pendingBatchAggregator\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_pendingBatch\", void 0);\n    this._timeLimitMs = batchOptions.timeLimitMs || DEFAULT_BATCH_SIZE_LIMIT;\n    this._sizeLimit = batchOptions.sizeLimit || DEFAULT_BATCH_TIME_LIMIT_MS;\n    this._pendingBatchAggregator = null;\n    this._pendingBatch = null;\n  }\n  sendCurrentBatch(request) {\n    // if we still have a timeout clear that first\n    if (this._pendingBatchAggregator) {\n      clearTimeout(this._pendingBatchAggregator);\n    }\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this._pendingBatch || [];\n    this._pendingBatch = null;\n    this._pendingBatchAggregator = null;\n\n    // Get the request as an array of requests\n    const request_ = batch.map(inflight => inflight.request);\n    this.emit(\"debug\", {\n      action: \"requestBatch\",\n      request: ethers__WEBPACK_IMPORTED_MODULE_58__.utils.deepCopy(request),\n      provider: this\n    });\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.utils.fetchJson(this.connection, JSON.stringify(request_)).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request_,\n        response: result,\n        provider: this\n      });\n\n      // For each result, feed it to the correct Promise, depending\n      // on whether it was a success or error\n      batch.forEach((inflightRequest_, index) => {\n        const payload = result[index];\n        if (payload.error) {\n          const error = new Error(payload.error.message);\n          error.code = payload.error.code;\n          error.data = payload.error.data;\n          inflightRequest_.reject(error);\n        } else {\n          inflightRequest_.resolve(payload.result);\n        }\n      });\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request_,\n        provider: this\n      });\n\n      // If there was an error, reject all the requests\n      batch.forEach(inflightRequest_ => {\n        inflightRequest_.reject(error);\n      });\n    });\n  }\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    if (this._pendingBatch === null) {\n      this._pendingBatch = [];\n    }\n    const inflightRequest = {\n      request,\n      resolve: null,\n      reject: null\n    };\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    // if we would go *over* the size limit of the batch with this request, send the batch now\n    if (this._pendingBatch.length === this._sizeLimit) {\n      this.sendCurrentBatch(request);\n    }\n    this._pendingBatch.push(inflightRequest);\n    if (!this._pendingBatchAggregator) {\n      // Schedule batch for next event loop + short duration\n      this._pendingBatchAggregator = setTimeout(() => {\n        this.sendCurrentBatch(request);\n      }, this._timeLimitMs);\n    }\n    return promise;\n  }\n}\n\n/**\n * @internal\n */\nconst DEFAULT_IPFS_GATEWAY = \"https://gateway.ipfscdn.io/ipfs/\";\nconst CHAIN_NAME_TO_ID = {\n  \"avalanche-fuji\": ChainId.AvalancheFujiTestnet,\n  \"avalanche-testnet\": ChainId.AvalancheFujiTestnet,\n  \"fantom-testnet\": ChainId.FantomTestnet,\n  ethereum: ChainId.Mainnet,\n  matic: ChainId.Polygon,\n  mumbai: ChainId.Mumbai,\n  goerli: ChainId.Goerli,\n  polygon: ChainId.Polygon,\n  mainnet: ChainId.Mainnet,\n  optimism: ChainId.Optimism,\n  \"optimism-goerli\": ChainId.OptimismGoerli,\n  arbitrum: ChainId.Arbitrum,\n  \"arbitrum-goerli\": ChainId.ArbitrumGoerli,\n  fantom: ChainId.Fantom,\n  avalanche: ChainId.Avalanche,\n  binance: ChainId.BinanceSmartChainMainnet,\n  \"binance-testnet\": ChainId.BinanceSmartChainTestnet\n};\nconst CHAIN_ID_TO_NAME = Object.fromEntries(Object.entries(CHAIN_NAME_TO_ID).map(_ref => {\n  let [name, id] = _ref;\n  return [id, name];\n}));\nfunction buildDefaultMap() {\n  return SUPPORTED_CHAIN_IDS.reduce((previousValue, currentValue) => {\n    previousValue[currentValue] = getProviderForNetwork(CHAIN_ID_TO_NAME[currentValue]);\n    return previousValue;\n  }, {});\n}\nconst DEFAULT_RPC_URLS = buildDefaultMap();\n\n/**\n * @internal\n * @param network - the chain name or rpc url\n * @returns the rpc url for that chain\n */\nfunction getProviderForNetwork(network) {\n  if (typeof network !== \"string\") {\n    return network;\n  }\n  switch (network) {\n    case \"mainnet\":\n    case \"ethereum\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"ethereum\");\n    case \"goerli\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"goerli\");\n    case \"polygon\":\n    case \"matic\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"polygon\");\n    case \"mumbai\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"mumbai\");\n    case \"optimism\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"optimism\");\n    case \"optimism-goerli\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"optimism-goerli\");\n    case \"arbitrum\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"arbitrum\");\n    case \"arbitrum-goerli\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"arbitrum-goerli\");\n    case \"fantom\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"fantom\");\n    case \"fantom-testnet\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"fantom-testnet\");\n    case \"avalanche\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"avalanche\");\n    case \"avalanche-testnet\":\n    case \"avalanche-fuji\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"avalanche-fuji\");\n    case \"binance\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"binance\");\n    case \"binance-testnet\":\n      return (0,_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.g)(\"binance-testnet\");\n    default:\n      if (network.startsWith(\"http\") || network.startsWith(\"ws\")) {\n        return network;\n      } else {\n        throw new Error(`Unrecognized chain name or RPC url: ${network}`);\n      }\n  }\n}\nconst READONLY_PROVIDER_MAP = new Map();\n\n/**\n *\n * @param network - the chain name or rpc url\n * @param chainId - the optional chain id\n * @returns the provider\n */\nfunction getReadOnlyProvider(network, chainId) {\n  try {\n    const match = network.match(/^(ws|http)s?:/i);\n    // try the JSON batch provider if available\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          const seralizedOpts = `${network}-${chainId || -1}`;\n          const existingProvider = READONLY_PROVIDER_MAP.get(seralizedOpts);\n          if (existingProvider) {\n            return existingProvider;\n          }\n          const newProvider = chainId ?\n          // if we know the chainId we should use the StaticJsonRpcBatchProvider\n          new StaticJsonRpcBatchProvider(network, chainId) :\n          // otherwise fall back to the built in json rpc batch provider\n          new ethers__WEBPACK_IMPORTED_MODULE_58__.providers.JsonRpcBatchProvider(network, chainId);\n          READONLY_PROVIDER_MAP.set(seralizedOpts, newProvider);\n          return newProvider;\n        case \"ws\":\n          return new ethers__WEBPACK_IMPORTED_MODULE_58__.providers.WebSocketProvider(network, chainId);\n        default:\n          return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.getDefaultProvider(network);\n      }\n    } else {\n      return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.getDefaultProvider(network);\n    }\n  } catch (e) {\n    // fallback to the default provider\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.getDefaultProvider(network);\n  }\n}\n\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @internal\n */\nclass NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier) {\n    super(identifier ? `Object with id ${identifier} NOT FOUND` : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @internal\n */\nclass InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address) {\n    super(address ? `'${address}' is an invalid address` : \"Invalid address passed\");\n  }\n}\n\n/**\n * @internal\n */\nclass MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address, role) {\n    super(`MISSING ROLE: ${address} does not have the '${role}' role`);\n  }\n}\n\n/**\n * @internal\n */\nclass AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"The asset you're trying to use could not be found.\";\n    super(`message: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nclass UploadError extends Error {\n  /** @internal */\n  constructor(message) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nclass FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\n/**\n * @internal\n */\nclass DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName) {\n    super(`DUPLICATE_FILE_NAME_ERROR: File name ${fileName} was passed for more than one file.`);\n  }\n}\n\n/**\n * @internal\n */\nclass NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress, quantity, available) {\n    super(`BALANCE ERROR: you do not have enough balance on contract ${contractAddress} to use ${quantity} tokens. You have ${available} tokens available.`);\n  }\n}\n\n/**\n * @internal\n */\nclass MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(`LIST ERROR: you should be the owner of the token to list it.`);\n  }\n}\n\n/**\n * @internal\n */\nclass QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity) {\n    super(`BUY ERROR: You cannot buy more than ${quantity} tokens`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n * @internal\n */\nclass FetchError extends Error {\n  /** @internal */\n  constructor(message, innerError) {\n    super(`FETCH_FAILED: ${message}`);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"innerError\", void 0);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n * @internal\n */\nclass DuplicateLeafsError extends Error {\n  constructor(message) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n * @internal\n */\nclass AuctionAlreadyStartedError extends Error {\n  constructor(id) {\n    super(`Auction already started with existing bid${id ? `, id: ${id}` : \"\"}`);\n  }\n}\n\n/**\n * @internal\n */\nclass FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message) {\n    super(`FUNCTION DEPRECATED. ${message ? `Use ${message} instead` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n * @internal\n */\nclass ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress, listingId) {\n    super(`Could not find listing.${marketplaceContractAddress ? ` marketplace address: ${marketplaceContractAddress}` : \"\"}${listingId ? ` listing id: ${listingId}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n * @internal\n */\nclass WrongListingTypeError extends Error {\n  constructor(marketplaceContractAddress, listingId, actualType, expectedType) {\n    super(`Incorrect listing type. Are you sure you're using the right method?.${marketplaceContractAddress ? ` marketplace address: ${marketplaceContractAddress}` : \"\"}${listingId ? ` listing id: ${listingId}` : \"\"}${expectedType ? ` expected type: ${expectedType}` : \"\"}${actualType ? ` actual type: ${actualType}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n * @internal\n */\nclass RestrictedTransferError extends Error {\n  constructor(assetAddress) {\n    super(`Failed to transfer asset, transfer is restricted.${assetAddress ? ` Address : ${assetAddress}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n * @internal\n */\nclass AdminRoleMissingError extends Error {\n  constructor(address, contractAddress) {\n    let message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Failed to execute transaction\";\n    super(`${message}, admin role is missing${address ? ` on address: ${address}` : \"\"}${contractAddress ? ` on contract: ${contractAddress}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n * @internal\n */\nclass AuctionHasNotEndedError extends Error {\n  constructor(id, endTime) {\n    super(`Auction has not ended yet${id ? `, id: ${id}` : \"\"}${endTime ? `, end time: ${endTime.toString()}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to call a contract function that is not implemented\n * @internal\n */\nclass ExtensionNotImplementedError extends Error {\n  constructor(feature) {\n    super(`This functionality is not available because the contract does not implement the '${feature.docLinks.contracts}' Extension. Learn how to unlock this functionality at https://portal.thirdweb.com/extensions `);\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * @public\n */\nclass TransactionError extends Error {\n  constructor(reason, from, to, data, network, rpcUrl, raw, functionInfo) {\n    let builtErrorMsg = \"Contract transaction failed\\n\\n\";\n    builtErrorMsg += `Message: ${reason}`;\n    builtErrorMsg += \"\\n\\n| Transaction info |\\n\";\n    builtErrorMsg += withSpaces(\"from\", from);\n    builtErrorMsg += withSpaces(\"to\", to);\n    builtErrorMsg += withSpaces(`chain`, `${network.name} (${network.chainId})`);\n    if (functionInfo) {\n      builtErrorMsg += \"\\n\\n| Failed contract call info |\\n\";\n      builtErrorMsg += withSpaces(\"function\", functionInfo.signature);\n      builtErrorMsg += withSpaces(`arguments`, JSON.stringify(functionInfo.inputs, null, 2));\n      if (functionInfo.value.gt(0)) {\n        builtErrorMsg += withSpaces(\"value\", `${ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatEther(functionInfo.value)} ${NATIVE_TOKENS[network.chainId]?.symbol}`);\n      }\n    }\n    try {\n      const url = new URL(rpcUrl);\n      builtErrorMsg += withSpaces(`RPC`, url.hostname);\n    } catch (e2) {\n      // ignore if can't parse URL\n    }\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg += \"Need help with this error? Join our community: https://discord.gg/thirdweb\";\n    builtErrorMsg += \"\\n\\n\\n\\n\";\n    builtErrorMsg += \"| Raw error |\";\n    builtErrorMsg += \"\\n\\n\";\n    builtErrorMsg += raw;\n    super(builtErrorMsg);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"reason\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"from\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"to\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"data\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"chain\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"rpcUrl\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"functionInfo\", void 0);\n    this.reason = reason;\n    this.from = from;\n    this.to = to;\n    this.data = data;\n    this.chain = network;\n    this.rpcUrl = rpcUrl;\n    this.functionInfo = functionInfo;\n  }\n}\n\n/**\n * @internal\n * @param data\n * @param contractInterface\n */\nfunction parseFunctionInfo(data, contractInterface) {\n  try {\n    const fnFragment = contractInterface.parseTransaction({\n      data\n    });\n    const results = {};\n    const args = fnFragment.args;\n    fnFragment.functionFragment.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const obj = {};\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          for (let i = 0; i < components.length; i++) {\n            const name = components[i].name;\n            obj[name] = arr[i];\n          }\n          results[param.name] = obj;\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      signature: fnFragment.signature,\n      inputs: results,\n      value: fnFragment.value\n    };\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * @internal\n * @param error\n * @param network\n * @param signerAddress\n * @param contractAddress\n * @param contractInterface\n */\nasync function convertToTWError(error, network, signerAddress, contractAddress, contractInterface) {\n  let raw;\n  if (typeof error === \"object\") {\n    // metamask errors comes as objects, apply parsing on data object\n    raw = JSON.stringify(error);\n  } else {\n    // not sure what this is, just throw it back\n    raw = error.toString();\n  }\n  const reason = parseMessageParts(/.*?\"message[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw) || parseMessageParts(/.*?\"reason[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const data = parseMessageParts(/.*?\"data[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  const rpcUrl = parseMessageParts(/.*?\"url[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let from = parseMessageParts(/.*?\"from[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  let to = parseMessageParts(/.*?\"to[^a-zA-Z0-9]*([^\"\\\\]*).*?/, raw);\n  if (to === \"\") {\n    // fallback to contractAddress\n    to = contractAddress;\n  }\n  if (from === \"\") {\n    // fallback to signerAddress\n    from = signerAddress;\n  }\n  const functionInfo = data.length > 0 ? parseFunctionInfo(data, contractInterface) : undefined;\n  return new TransactionError(reason, from, to, data, network, rpcUrl, raw, functionInfo);\n}\nfunction withSpaces(label, content) {\n  if (content === \"\") {\n    return content;\n  }\n  const spaces = Array(10 - label.length).fill(\" \").join(\"\");\n  return `\\n${label}:${spaces}${content}`;\n}\nfunction parseMessageParts(regex, raw) {\n  const msgMatches = raw.match(regex) || [];\n  let extracted = \"\";\n  if (msgMatches?.length > 0) {\n    extracted += msgMatches[1];\n  }\n  return extracted;\n}\n\n/**\n * @internal\n * @param err\n * @param message\n */\nfunction includesErrorMessage(err, message) {\n  if (!err) {\n    return false;\n  }\n  return err && err.toString().includes(message) || err && err.message && err.message.toString().includes(message) || err && err.error && err.error.toString().includes(message);\n}\n\nconst DropErc721ContractInput = CommonContractSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc721ContractOutput = CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc721ContractDeploy = DropErc721ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc721ContractSchema = {\n  deploy: DropErc721ContractDeploy,\n  output: DropErc721ContractOutput,\n  input: DropErc721ContractInput\n};\n\nconst DropErc1155ContractInput = CommonContractSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc1155ContractOutput = CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc1155ContractDeploy = DropErc1155ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc1155ContractSchema = {\n  deploy: DropErc1155ContractDeploy,\n  output: DropErc1155ContractOutput,\n  input: DropErc1155ContractInput\n};\n\nconst MarketplaceContractInput = CommonContractSchema;\nconst MarketplaceContractOutput = CommonContractOutputSchema;\nconst MarketplaceContractDeploy = MarketplaceContractInput.merge(CommonPlatformFeeSchema).merge(CommonTrustedForwarderSchema);\nconst MarketplaceContractSchema = {\n  deploy: MarketplaceContractDeploy,\n  output: MarketplaceContractOutput,\n  input: MarketplaceContractInput\n};\n\nconst PackContractInput = CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst PackContractOutput = CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst PackContractDeploy = PackContractInput.merge(CommonPlatformFeeSchema).merge(CommonTrustedForwarderSchema);\nconst PackContractSchema = {\n  deploy: PackContractDeploy,\n  output: PackContractOutput,\n  input: PackContractInput\n};\n\nconst SplitRecipientInputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  address: AddressSchema,\n  sharesBps: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.a.gt(0, \"Shares must be greater than 0\")\n});\nconst SplitRecipientOuputSchema = SplitRecipientInputSchema.extend({\n  address: AddressSchema,\n  sharesBps: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.a\n});\nconst SplitsContractInput = CommonContractSchema.extend({\n  recipients: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(SplitRecipientInputSchema).default([]).superRefine((val, context) => {\n    const addressMap = {};\n    let totalShares = 0;\n    for (let index = 0; index < val.length; index++) {\n      const entry = val[index];\n      if (addressMap[entry.address]) {\n        context.addIssue({\n          code: zod__WEBPACK_IMPORTED_MODULE_57__.z.ZodIssueCode.custom,\n          message: `Duplicate address.`,\n          path: [index, `address`]\n        });\n      }\n      addressMap[entry.address] = true;\n      totalShares += entry.sharesBps;\n      if (totalShares > 10000) {\n        context.addIssue({\n          code: zod__WEBPACK_IMPORTED_MODULE_57__.z.ZodIssueCode.custom,\n          message: `Total shares cannot go over 100%.`,\n          path: [index, `sharesBps`]\n        });\n      }\n    }\n    if (totalShares !== 10000) {\n      context.addIssue({\n        code: zod__WEBPACK_IMPORTED_MODULE_57__.z.ZodIssueCode.custom,\n        message: `Total shares need to add up to 100%. Total shares are currently ${totalShares / 100}%`,\n        path: []\n      });\n    }\n  })\n});\nconst SplitsContractOutput = CommonContractOutputSchema.extend({\n  recipients: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(SplitRecipientOuputSchema)\n});\nconst SplitsContractDeploy = SplitsContractInput.merge(SplitsContractInput).merge(CommonTrustedForwarderSchema);\nconst SplitsContractSchema = {\n  deploy: SplitsContractDeploy,\n  output: SplitsContractOutput,\n  input: SplitsContractInput\n};\n\nconst TokenErc20ContractInput = CommonContractSchema.merge(CommonSymbolSchema);\nconst TokenErc20ContractOutput = CommonContractOutputSchema.merge(CommonSymbolSchema);\nconst TokenErc20ContractDeploy = TokenErc20ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc20ContractSchema = {\n  deploy: TokenErc20ContractDeploy,\n  output: TokenErc20ContractOutput,\n  input: TokenErc20ContractInput\n};\n\nconst TokenErc721ContractInput = CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc721ContractOutput = CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc721ContractDeploy = TokenErc721ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc721ContractSchema = {\n  deploy: TokenErc721ContractDeploy,\n  output: TokenErc721ContractOutput,\n  input: TokenErc721ContractInput\n};\n\nconst TokenErc1155ContractInput = CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc1155ContractOutput = CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc1155ContractDeploy = TokenErc1155ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc1155ContractSchema = {\n  deploy: TokenErc1155ContractDeploy,\n  output: TokenErc1155ContractOutput,\n  input: TokenErc1155ContractInput\n};\n\nconst VoteSettingsInputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  voting_delay_in_blocks: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().min(0).default(0),\n  voting_period_in_blocks: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().min(1).default(1),\n  voting_token_address: AddressSchema,\n  voting_quorum_fraction: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.P[\"default\"](0),\n  proposal_token_threshold: BigNumberishSchema.default(1)\n});\nconst VoteSettingsOuputSchema = VoteSettingsInputSchema.extend({\n  proposal_token_threshold: BigNumberSchema\n});\nconst VoteContractInput = CommonContractSchema.merge(VoteSettingsInputSchema);\nconst VoteContractOutput = CommonContractOutputSchema.merge(VoteSettingsOuputSchema);\nconst VoteContractDeploy = VoteContractInput.merge(CommonTrustedForwarderSchema);\nconst VoteContractSchema = {\n  deploy: VoteContractDeploy,\n  output: VoteContractOutput,\n  input: VoteContractInput\n};\nzod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  proposalId: BigNumberSchema,\n  proposer: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  targets: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()),\n  values: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(BigNumberSchema),\n  signatures: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()),\n  calldatas: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()),\n  startBlock: BigNumberSchema,\n  endBlock: BigNumberSchema,\n  description: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n});\n\n/**\n * @public\n */\nconst SDKOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  readonlySettings: zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n    rpcUrl: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().url(),\n    chainId: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().optional()\n  }).optional(),\n  gasSettings: zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n    maxPriceInGwei: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().min(1, \"gas price cannot be less than 1\").default(300),\n    speed: zod__WEBPACK_IMPORTED_MODULE_57__.z[\"enum\"]([\"standard\", \"fast\", \"fastest\"]).default(\"fastest\")\n  }).default({\n    maxPriceInGwei: 300,\n    speed: \"fastest\"\n  }),\n  gasless: zod__WEBPACK_IMPORTED_MODULE_57__.z.union([zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n    openzeppelin: zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n      relayerUrl: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().url(),\n      relayerForwarderAddress: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n      useEOAForwarder: zod__WEBPACK_IMPORTED_MODULE_57__.z.boolean().default(false)\n    }),\n    experimentalChainlessSupport: zod__WEBPACK_IMPORTED_MODULE_57__.z.boolean().default(false)\n  }), zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n    biconomy: zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n      apiId: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n      apiKey: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n      deadlineSeconds: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().min(1, \"deadlineSeconds cannot be les than 1\").default(3600)\n    })\n  })]).optional()\n}).default({\n  gasSettings: {\n    maxPriceInGwei: 300,\n    speed: \"fastest\"\n  }\n});\n\n/**\n * @public\n * All these configuration options are optional with sane defaults:\n * @example\n * ```javascript\n * {\n *   readonlySettings: {\n *     rpcUrl, // force read calls to go through your own RPC url\n *     chainId, // reduce RPC calls by sepcifying your chain ID\n *   },\n *   gasSettings: {\n *     maxPriceInGwei, // Maximum gas price for transactions (default 300 gwei)\n *     speed, // the tx speed setting: 'standard'|'fast|'fastest' (default: 'fastest')\n *   },\n *   gasless: {\n *     // By specifying a gasless configuration - all transactions will get forwarded to enable gasless transactions\n *     openzeppelin: {\n *       relayerUrl, // your OZ Defender relayer URL\n *       relayerForwarderAddress, // the OZ defender relayer address (defaults to the standard one)\n *     },\n *     biconomy: {\n *       apiId, // your Biconomy API Id\n *       apiKey, // your Biconomy API Key\n *       deadlineSeconds, // your Biconomy timeout preference\n *     },\n *   },\n * }\n * ```\n */\n\n/**\n * @internal\n */\nconst LoginOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The optional nonce of the login request used to prevent replay attacks\n   */\n  nonce: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  /**\n   * The optional time after which the login payload will be invalid\n   */\n  expirationTime: zod__WEBPACK_IMPORTED_MODULE_57__.z.date().optional(),\n  /**\n   * The optional chain ID that the login request was intended for\n   */\n  chainId: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().optional()\n}).optional();\n\n/**\n * @internal\n */\nconst LoginPayloadDataSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The domain that the user is attempting to login to\n   */\n  domain: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  /**\n   * The address of the account that is logging in\n   */\n  address: AddressSchema,\n  /**\n   * The nonce of the login request used to prevent replay attacks, defaults to a random UUID\n   */\n  nonce: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default((0,uuid__WEBPACK_IMPORTED_MODULE_60__.v4)()),\n  /**\n   * The time after which the login payload will be invalid, defaults to 5 minutes from now\n   */\n  expiration_time: zod__WEBPACK_IMPORTED_MODULE_57__.z.date().transform(d => d.toISOString()),\n  /**\n   * The chain ID that the login request was intended for, defaults to none\n   */\n  chain_id: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().optional()\n});\n\n/**\n * @internal\n */\nconst LoginPayloadSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The payload data used for login\n   */\n  payload: LoginPayloadDataSchema,\n  /**\n   * The signature of the login request used for verification\n   */\n  signature: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n});\n\n/**\n * @internal\n */\nconst VerifyOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The optional chain ID to expect the request to be for\n   */\n  chainId: zod__WEBPACK_IMPORTED_MODULE_57__.z.number().optional()\n}).optional();\n\n/**\n * @internal\n */\nconst AuthenticationOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The date before which the authentication payload is invalid\n   */\n  invalidBefore: zod__WEBPACK_IMPORTED_MODULE_57__.z.date().optional(),\n  /**\n   * The date after which the authentication payload is invalid\n   */\n  expirationTime: zod__WEBPACK_IMPORTED_MODULE_57__.z.date().optional()\n}).optional();\n\n/**\n * @internal\n */\nconst AuthenticationPayloadDataSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The address of the wallet issuing the payload\n   */\n  iss: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  /**\n   * The address of the wallet requesting to authenticate\n   */\n  sub: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  /**\n   * The domain intended to receive the authentication payload\n   */\n  aud: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  /**\n   * The date before which the authentication payload is invalid\n   */\n  exp: RawDateSchema.transform(b => b.toNumber()),\n  /**\n   * The date after which the authentication payload is invalid\n   */\n  nbf: RawDateSchema.transform(b => b.toNumber()),\n  /**\n   * The date on which the payload was issued\n   */\n  iat: RawDateSchema.transform(b => b.toNumber()),\n  /**\n   * The unique identifier of the payload\n   */\n  jti: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default((0,uuid__WEBPACK_IMPORTED_MODULE_60__.v4)())\n});\n\n/**\n * @internal\n */\nconst AuthenticationPayloadSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  /**\n   * The payload data used for authentication\n   */\n  payload: AuthenticationPayloadDataSchema,\n  /**\n   * The signature of the authentication payload used for authentication\n   */\n  signature: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n});\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nconst ForwardRequest = [{\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"value\",\n  type: \"uint256\"\n}, {\n  name: \"gas\",\n  type: \"uint256\"\n}, {\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\nconst ChainAwareForwardRequest = [{\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"value\",\n  type: \"uint256\"\n}, {\n  name: \"gas\",\n  type: \"uint256\"\n}, {\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}, {\n  name: \"chainid\",\n  type: \"uint256\"\n}];\n\n/**\n * @internal\n */\nconst BiconomyForwarderAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"batchId\",\n    type: \"uint256\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst _nonces = {};\nconst _noncesSyncTimestamp = {};\n\n/**\n * @internal\n */\nasync function getAndIncrementNonce(forwarder, forwarderFunction, forwarderArgs) {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](...forwarderArgs);\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n  const nonce = _nonces[address];\n  _nonces[address] = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId) {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return \"https://gasstation-mainnet.matic.network/v2\";\n    case ChainId.Mumbai:\n      return \"https://gasstation-mumbai.matic.today/v2\";\n  }\n}\nconst MIN_POLYGON_GAS_PRICE = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(\"31\", \"gwei\");\nconst MIN_MUMBAI_GAS_PRICE = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(\"1\", \"gwei\");\n\n/**\n * @internal\n */\nfunction getDefaultGasFee(chainId) {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return MIN_POLYGON_GAS_PRICE;\n    case ChainId.Mumbai:\n      return MIN_MUMBAI_GAS_PRICE;\n  }\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nasync function getPolygonGasPriorityFee(chainId) {\n  const gasStationUrl = getGasStationUrl(chainId);\n  try {\n    const data = await (await cross_fetch__WEBPACK_IMPORTED_MODULE_6___default()(gasStationUrl)).json();\n    // take the standard speed here, SDK options will define the extra tip\n    const priorityFee = data[\"standard\"][\"maxPriorityFee\"];\n    if (priorityFee > 0) {\n      const fixedFee = parseFloat(priorityFee).toFixed(9);\n      return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(fixedFee, \"gwei\");\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return getDefaultGasFee(chainId);\n}\n\n// couldn't find this in barbones ethers export, but \"type\" should mean it does not increase bundle size either way\n\n/**\n * @internal\n */\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nasync function signTypedDataInternal(signer, domain, types, message) {\n  const provider = signer?.provider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n  const payload = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils._TypedDataEncoder.getPayload(domain, types, message);\n  let signature = \"\";\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if (provider?.provider?.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [(await signer.getAddress()).toLowerCase(), JSON.stringify(payload)]);\n  } else {\n    try {\n      signature = await signer._signTypedData(domain, types, message);\n    } catch (err) {\n      if (err?.message?.includes(\"Method eth_signTypedData_v4 not supported\")) {\n        signature = await provider.send(\"eth_signTypedData\", [(await signer.getAddress()).toLowerCase(), JSON.stringify(payload)]);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.joinSignature(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.splitSignature(signature))\n  };\n}\n\nconst NAME_ABI = [{\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst DOMAIN_SEPARATOR_ABI = [{\n  constant: true,\n  inputs: [],\n  name: \"DOMAIN_SEPARATOR\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getDomainSeperator\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst NONCES_ABI = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }],\n  name: \"nonces\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"user\",\n    type: \"address\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"nonce\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nasync function getSignerNonce(signer, contractAddress) {\n  const contract = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\nasync function getDomainSeperator(signer, contractAddress) {\n  const contract = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    return await contract.getDomainSeperator();\n  }\n}\nasync function getTokenName(signer, contractAddress) {\n  return new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(signer, domain) {\n  const contractDomainSeparator = await getDomainSeperator(signer, domain.verifyingContract);\n  const polygonDomain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hexZeroPad(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(domain.chainId).toHexString(), 32)\n  };\n  if (ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils._TypedDataEncoder.hashDomain(polygonDomain) === contractDomainSeparator) {\n    return polygonDomain;\n  }\n  return domain;\n}\n\n/**\n * @internal\n */\nasync function signEIP2612Permit(signer, currencyAddress, owner, spender, value, deadline, nonce) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress\n  });\n  nonce = nonce || (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline || ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256;\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline\n  };\n  const types = {\n    Permit: [{\n      name: \"owner\",\n      type: \"address\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"value\",\n      type: \"uint256\"\n    }, {\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      name: \"deadline\",\n      type: \"uint256\"\n    }]\n  };\n  const {\n    signature\n  } = await signTypedDataInternal(signer, domain, types, message);\n  return {\n    message,\n    signature\n  };\n}\n\n/**\n * @internal\n */\n// @ts-expext-error window is not defined\nconst isBrowser = () => typeof window !== \"undefined\";\n\n/**\n * @internal\n */\nconst isNode = () => !isBrowser();\n\n/**\n * @internal\n */\nclass RPCConnectionHandler extends eventemitter3__WEBPACK_IMPORTED_MODULE_5__[\"default\"] {\n  constructor(network, options) {\n    super();\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"provider\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"signer\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"options\", void 0);\n    const [signer, provider] = getSignerAndProvider(network, options);\n    this.signer = signer;\n    this.provider = provider;\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\"invalid sdk options object passed, falling back to default options\", optionParseError);\n      this.options = SDKOptionsSchema.parse({});\n    }\n  }\n  /**\n   * The function to call whenever the network changes, such as when the users connects their wallet, disconnects their wallet, the connected chain changes, etc.\n   *\n   * @param network - a network, signer or provider that ethers js can interpret\n   */\n  updateSignerOrProvider(network) {\n    const [signer, provider] = getSignerAndProvider(network, this.options);\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   *\n   * @returns whether or not a signer is set, `true` if there is no signer so the class is in \"read only\" mode\n   */\n  isReadOnly() {\n    return !ethers__WEBPACK_IMPORTED_MODULE_58__.Signer.isSigner(this.signer);\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active signer, if there is one\n   */\n  getSigner() {\n    return this.signer;\n  }\n\n  /**\n   * Explicitly get the active provider.\n   * @returns the active provider\n   */\n  getProvider() {\n    return this.provider;\n  }\n\n  /**\n   *\n   * @returns the current signer if there is one, otherwise the active provider\n   */\n  getSignerOrProvider() {\n    return this.getSigner() || this.getProvider();\n  }\n}\n\n/**\n * @internal\n */\nfunction getSignerAndProvider(network, options) {\n  let signer;\n  let provider;\n  if (ethers__WEBPACK_IMPORTED_MODULE_58__.Signer.isSigner(network)) {\n    signer = network;\n    if (network.provider) {\n      provider = network.provider;\n    }\n  }\n  if (options?.readonlySettings) {\n    provider = getReadOnlyProvider(options.readonlySettings.rpcUrl, options.readonlySettings.chainId);\n  }\n  if (!provider) {\n    if (ethers__WEBPACK_IMPORTED_MODULE_58__.providers.Provider.isProvider(network)) {\n      provider = network;\n    } else if (!ethers__WEBPACK_IMPORTED_MODULE_58__.Signer.isSigner(network)) {\n      if (typeof network === \"string\") {\n        provider = getReadOnlyProvider(network, options?.readonlySettings?.chainId);\n      } else {\n        // no a signer, not a provider, not a string? try with default provider\n        provider = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.getDefaultProvider(network);\n      }\n    }\n  }\n  if (!provider) {\n    // we should really never hit this case!\n    provider = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.getDefaultProvider();\n    console.error(\"No provider found, using default provider on default chain!\");\n  }\n  return [signer, provider];\n}\n\n/**\n * @internal\n */\nclass ContractWrapper extends RPCConnectionHandler {\n  /**\n   * @internal\n   */\n\n  constructor(network, contractAddress, contractAbi, options) {\n    super(network, options);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"isValidContract\", false);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"customOverrides\", () => ({}));\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"writeContract\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"readContract\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"abi\", void 0);\n    this.abi = contractAbi;\n    // set up the contract\n    this.writeContract = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, contractAbi, this.getSignerOrProvider());\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n  }\n  updateSignerOrProvider(network) {\n    // update the underlying base class\n    super.updateSignerOrProvider(network);\n    // re-connect the contract with the new signer / provider\n    this.writeContract = this.writeContract.connect(this.getSignerOrProvider());\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n  }\n\n  /**\n   * @internal\n   */\n  async getChainID() {\n    const provider = this.getProvider();\n    const {\n      chainId\n    } = await provider.getNetwork();\n    return chainId;\n  }\n  /**\n   * @internal\n   */\n  async getSignerAddress() {\n    const signer = this.getSigner();\n    if (!signer) {\n      throw new Error(\"This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.\");\n    }\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  callStatic() {\n    return this.writeContract.callStatic;\n  }\n\n  /**\n   * @internal\n   */\n  async getCallOverrides() {\n    if (isBrowser()) {\n      // When running in the browser, let the wallet suggest gas estimates\n      // this means that the gas speed preferences set in the SDK options are ignored in a browser context\n      // but it also allows users to select their own gas speed prefs per tx from their wallet directly\n      return {};\n    }\n    const feeData = await this.getProvider().getFeeData();\n    const supports1559 = feeData.maxFeePerGas && feeData.maxPriorityFeePerGas;\n    if (supports1559) {\n      const chainId = await this.getChainID();\n      const block = await this.getProvider().getBlock(\"latest\");\n      const baseBlockFee = block && block.baseFeePerGas ? block.baseFeePerGas : ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(\"1\", \"gwei\");\n      let defaultPriorityFee;\n      if (chainId === ChainId.Mumbai || chainId === ChainId.Polygon) {\n        // for polygon, get fee data from gas station\n        defaultPriorityFee = await getPolygonGasPriorityFee(chainId);\n      } else {\n        // otherwise get it from ethers\n        defaultPriorityFee = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(feeData.maxPriorityFeePerGas);\n      }\n      // then add additional fee based on user preferences\n      const maxPriorityFeePerGas = this.getPreferredPriorityFee(defaultPriorityFee);\n      // See: https://eips.ethereum.org/EIPS/eip-1559 for formula\n      const baseMaxFeePerGas = baseBlockFee.mul(2);\n      const maxFeePerGas = baseMaxFeePerGas.add(maxPriorityFeePerGas);\n      return {\n        maxFeePerGas,\n        maxPriorityFeePerGas\n      };\n    } else {\n      return {\n        gasPrice: await this.getPreferredGasPrice()\n      };\n    }\n  }\n\n  /**\n   * Calculates the priority fee per gas according to user preferences\n   * @param defaultPriorityFeePerGas - the base priority fee\n   */\n  getPreferredPriorityFee(defaultPriorityFeePerGas) {\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0); // default is 2.5 gwei for ETH, 31 gwei for polygon\n        break;\n      case \"fast\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(5); // + 5% - 2.625 gwei / 32.5 gwei\n        break;\n      case \"fastest\":\n        extraTip = defaultPriorityFeePerGas.div(100).mul(10); // + 10% - 2.75 gwei / 34.1 gwei\n        break;\n    }\n    let txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n    const max = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\"); // no more than max gas setting\n    const min = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(\"2.5\", \"gwei\"); // no less than 2.5 gwei\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    if (txGasPrice.lt(min)) {\n      txGasPrice = min;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * Calculates the gas price for transactions according to user preferences\n   */\n  async getPreferredGasPrice() {\n    const gasPrice = await this.getProvider().getGasPrice();\n    const speed = this.options.gasSettings.speed;\n    const maxGasPrice = this.options.gasSettings.maxPriceInGwei;\n    let txGasPrice = gasPrice;\n    let extraTip;\n    switch (speed) {\n      case \"standard\":\n        extraTip = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(1); // min 1 wei\n        break;\n      case \"fast\":\n        extraTip = gasPrice.div(100).mul(5); // + 5%\n        break;\n      case \"fastest\":\n        extraTip = gasPrice.div(100).mul(10); // + 10%\n        break;\n    }\n    txGasPrice = txGasPrice.add(extraTip);\n    const max = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(maxGasPrice.toString(), \"gwei\");\n    if (txGasPrice.gt(max)) {\n      txGasPrice = max;\n    }\n    return txGasPrice;\n  }\n\n  /**\n   * @internal\n   */\n  emitTransactionEvent(status, transactionHash) {\n    this.emit(EventType.Transaction, {\n      status,\n      transactionHash\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async multiCall(encoded) {\n    return this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  async estimateGas(fn, args) {\n    return this.writeContract.estimateGas[fn](...args);\n  }\n\n  /**\n   * @internal\n   */\n  withTransactionOverride(hook) {\n    this.customOverrides = hook;\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // parse last arg as tx options if present\n    let txOptions;\n    try {\n      if (args.length > 0 && typeof args[args.length - 1] === \"object\") {\n        const last = args[args.length - 1];\n        txOptions = CallOverrideSchema.parse(last);\n        // if call overrides found, remove it from args array\n        args = args.slice(0, args.length - 1);\n      }\n    } catch (e) {\n      // no-op\n    }\n    const functions = extractFunctionsFromAbi(AbiSchema.parse(this.abi)).filter(f => f.name === functionName);\n    if (!functions.length) {\n      throw new Error(`Function \"${functionName}\" not found in contract. Check your dashboard for the list of functions available`);\n    }\n    const fn = functions.find(f => f.name === functionName && f.inputs.length === args.length);\n\n    // TODO extract this and re-use for deploy function to check constructor args\n    if (!fn) {\n      throw new Error(`Function \"${functionName}\" requires ${functions[0].inputs.length} arguments, but ${args.length} were provided.\\nExpected function signature: ${functions[0].signature}`);\n    }\n    const ethersFnName = `${functionName}(${fn.inputs.map(i => i.type).join()})`;\n\n    // check if the function exists on the contract, otherwise use the name passed in\n    const fnName = ethersFnName in this.readContract.functions ? ethersFnName : functionName;\n\n    // TODO validate each argument\n    if (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") {\n      // read function\n      return this.readContract[fnName](...args);\n    } else {\n      // write function\n      const receipt = await this.sendTransaction(fnName, args, txOptions);\n      return {\n        receipt\n      };\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async sendTransaction(fn, args, callOverrides) {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    // if a custom override is set, merge our override with the custom one\n    callOverrides = {\n      ...callOverrides,\n      ...this.customOverrides()\n    };\n    // clear up the override (single use)\n    this.customOverrides = () => ({});\n    if (this.options?.gasless && (\"openzeppelin\" in this.options.gasless || \"biconomy\" in this.options.gasless)) {\n      if (fn === \"multicall\" && Array.isArray(args[0]) && args[0].length > 0) {\n        const from = await this.getSignerAddress();\n        args[0] = args[0].map(tx => ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.solidityPack([\"bytes\", \"address\"], [tx, from]));\n      }\n      const provider = this.getProvider();\n      const txHash = await this.sendGaslessTransaction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      // one time verification that this is a valid contract (to avoid sending funds to wrong addresses)\n      if (!this.isValidContract) {\n        const code = await this.getProvider().getCode(this.readContract.address);\n        this.isValidContract = code !== \"0x\";\n        if (!this.isValidContract) {\n          throw new Error(\"The address you're trying to send a transaction to is not a smart contract. Make sure you are on the correct network and the contract address is correct\");\n        }\n      }\n      const tx = await this.sendTransactionByFunction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n      const receipt = tx.wait();\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async sendTransactionByFunction(fn, args, callOverrides) {\n    const func = this.writeContract.functions[fn];\n    if (!func) {\n      throw new Error(`invalid function: \"${fn.toString()}\"`);\n    }\n    try {\n      return await func(...args, callOverrides);\n    } catch (e) {\n      const network = await this.getProvider().getNetwork();\n      const signerAddress = await this.getSignerAddress();\n      const contractAddress = await this.readContract.address;\n      throw await convertToTWError(e, network, signerAddress, contractAddress, this.readContract.interface);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async sendGaslessTransaction(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let callOverrides = arguments.length > 2 ? arguments[2] : undefined;\n    const signer = this.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"Cannot execute gasless transaction without valid signer\");\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.writeContract.address;\n    const value = callOverrides?.value || 0;\n    if (ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(value).gt(0)) {\n      throw new Error(\"Cannot send native token value with gasless transaction\");\n    }\n    const data = this.writeContract.interface.encodeFunctionData(fn, args);\n    let gas = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0);\n    try {\n      const gasEstimate = await this.readContract.estimateGas[fn](...args);\n      gas = gasEstimate.mul(2);\n    } catch (e) {\n      // ignore\n    }\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gas.lt(100000)) {\n      gas = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(500000);\n    }\n\n    // check for gas override in callOverrides\n    if (callOverrides.gasLimit && ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(callOverrides.gasLimit).gt(gas)) {\n      gas = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(callOverrides.gasLimit);\n    }\n    const tx = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn.toString(),\n      functionArgs: args,\n      callOverrides\n    };\n    return await this.defaultGaslessSendFunction(tx);\n  }\n  async signTypedData(signer, domain, types, message) {\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\"\n    });\n    const {\n      signature: sig\n    } = await signTypedDataInternal(signer, domain, types, message);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature: sig\n    });\n    return sig;\n  }\n  parseLogs(eventName, logs) {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = this.writeContract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter(x => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(l => this.writeContract.interface.parseLog(l));\n  }\n  async defaultGaslessSendFunction(transaction) {\n    if (this.options.gasless && \"biconomy\" in this.options.gasless) {\n      return this.biconomySendFunction(transaction);\n    }\n    return this.defenderSendFunction(transaction);\n  }\n  async biconomySendFunction(transaction) {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.options.gasless && \"biconomy\" in this.options.gasless, \"calling biconomySendFunction without biconomy\");\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer && provider, \"signer and provider must be set\");\n    const forwarder = new ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.Contract(getContractAddressByChainId(transaction.chainId, \"biconomyForwarder\"), BiconomyForwarderAbi, provider);\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from, batchId]);\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(Date.now() / 1000 + (this.options?.gasless && \"biconomy\" in this.options.gasless && this.options.gasless.biconomy?.deadlineSeconds || 3600)),\n      data: transaction.data\n    };\n    const hashToSign = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.arrayify(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.solidityKeccak256([\"address\", \"address\", \"address\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"bytes32\"], [request.from, request.to, request.token, request.txGas, request.tokenGasPrice, request.batchId, request.batchNonce, request.deadline, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.keccak256(request.data)]));\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\"\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature\n    });\n    const response = await cross_fetch__WEBPACK_IMPORTED_MODULE_6___default()(\"https://api.biconomy.io/api/v2/meta-tx/native\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        from: transaction.from,\n        apiId: this.options.gasless.biconomy.apiId,\n        params: [request, signature],\n        to: transaction.to,\n        gasLimit: transaction.gasLimit.toHexString()\n      }),\n      headers: {\n        \"x-api-key\": this.options.gasless.biconomy.apiKey,\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      }\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(`relay transaction failed: ${resp.log}`);\n      }\n      return resp.txHash;\n    }\n    throw new Error(`relay transaction failed with status: ${response.status} (${response.statusText})`);\n  }\n  async defenderSendFunction(transaction) {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.options.gasless && \"openzeppelin\" in this.options.gasless, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"provider is not set\");\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(provider, \"provider is not set\");\n    const forwarderAddress = this.options.gasless.openzeppelin.relayerForwarderAddress || (this.options.gasless.openzeppelin.useEOAForwarder ? CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarderEOA : CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarder);\n    const forwarder = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(forwarderAddress, _thirdweb_dev_contracts_js_dist_abis_Forwarder_json__WEBPACK_IMPORTED_MODULE_7__, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from]);\n    let domain;\n    let types;\n    let message;\n    if (this.options.gasless.experimentalChainlessSupport) {\n      domain = {\n        name: \"GSNv2 Forwarder\",\n        version: \"0.0.1\",\n        verifyingContract: forwarderAddress\n      };\n      types = {\n        ForwardRequest: ChainAwareForwardRequest\n      };\n      message = {\n        from: transaction.from,\n        to: transaction.to,\n        value: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0).toString(),\n        gas: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(transaction.gasLimit).toString(),\n        nonce: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(nonce).toString(),\n        data: transaction.data,\n        chainid: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(transaction.chainId).toString()\n      };\n    } else {\n      domain = {\n        name: \"GSNv2 Forwarder\",\n        version: \"0.0.1\",\n        chainId: transaction.chainId,\n        verifyingContract: forwarderAddress\n      };\n      types = {\n        ForwardRequest\n      };\n      message = {\n        from: transaction.from,\n        to: transaction.to,\n        value: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0).toString(),\n        gas: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(transaction.gasLimit).toString(),\n        nonce: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(nonce).toString(),\n        data: transaction.data\n      };\n    }\n    let signature;\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\"\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (transaction.functionName === \"approve\" && transaction.functionArgs.length === 2) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n      // TODO: support DAI permit by signDAIPermit\n      const {\n        message: permit,\n        signature: sig\n      } = await signEIP2612Permit(signer, this.writeContract.address, transaction.from, spender, amount);\n      const {\n        r,\n        s,\n        v\n      } = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.splitSignature(sig);\n      message = {\n        to: this.readContract.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(permit.value).toString(),\n        nonce: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(permit.nonce).toString(),\n        deadline: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v\n      };\n      signature = sig;\n    } else {\n      const {\n        signature: sig\n      } = await signTypedDataInternal(signer, domain, types, message);\n      signature = sig;\n    }\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if (message?.owner) {\n      messageType = \"permit\";\n    }\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      forwarderAddress,\n      type: messageType\n    });\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature\n    });\n    const response = await cross_fetch__WEBPACK_IMPORTED_MODULE_6___default()(this.options.gasless.openzeppelin.relayerUrl, {\n      method: \"POST\",\n      body\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.result) {\n        throw new Error(`Relay transaction failed: ${resp.message}`);\n      }\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(`relay transaction failed with status: ${response.status} (${response.statusText})`);\n  }\n}\n\nfunction isNativeToken(tokenAddress) {\n  return tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS || tokenAddress.toLowerCase() === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero;\n}\nfunction cleanCurrencyAddress(currencyAddress) {\n  if (isNativeToken(currencyAddress)) {\n    return NATIVE_TOKEN_ADDRESS;\n  }\n  return currencyAddress;\n}\n\n/**\n *\n * @param provider\n * @param inputPrice\n * @param currencyAddress\n * @returns\n * @internal\n */\nasync function normalizePriceValue(provider, inputPrice, currencyAddress) {\n  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);\n  return ethers__WEBPACK_IMPORTED_MODULE_58__.utils.parseUnits(_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A.parse(inputPrice), metadata.decimals);\n}\n\n/**\n *\n * @param provider\n * @param asset\n * @returns\n * @internal\n */\nasync function fetchCurrencyMetadata(provider, asset) {\n  if (isNativeToken(asset)) {\n    const network = await provider.getNetwork();\n    const nativeToken = getNativeTokenByChainId(network.chainId);\n    return {\n      name: nativeToken.name,\n      symbol: nativeToken.symbol,\n      decimals: nativeToken.decimals\n    };\n  } else {\n    const erc20 = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(asset, _thirdweb_dev_contracts_js_dist_abis_IERC20Metadata_json__WEBPACK_IMPORTED_MODULE_38__, provider);\n    const [name, symbol, decimals] = await Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);\n    return {\n      name,\n      symbol,\n      decimals\n    };\n  }\n}\n\n/**\n *\n * @param providerOrSigner\n * @param asset\n * @param price\n * @returns\n * @internal\n */\nasync function fetchCurrencyValue(providerOrSigner, asset, price) {\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(price),\n    displayValue: ethers__WEBPACK_IMPORTED_MODULE_58__.utils.formatUnits(price, metadata.decimals)\n  };\n}\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, {});\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.readContract.address;\n    const allowance = await erc20.readContract.allowance(owner, spender);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\nasync function approveErc20Allowance(contractToApprove, currencyAddress, price, quantity, tokenDecimals) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper(signer || provider, currencyAddress, _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, {});\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.readContract.address;\n  const allowance = await erc20.readContract.allowance(owner, spender);\n  const totalPrice = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(price).mul(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(quantity)).div(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [spender, allowance.add(totalPrice)]);\n  }\n}\nasync function hasERC20Allowance(contractToApprove, currencyAddress, value) {\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper(provider, currencyAddress, _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, {});\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.readContract.address;\n  const allowance = await erc20.readContract.allowance(owner, spender);\n  return allowance.gte(value);\n}\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nasync function prepareClaim(addressToClaim, quantity, activeClaimCondition, merkleMetadataFetcher, tokenDecimals, contractWrapper, storage, checkERC20Allowance, snapshotFormatVersion) {\n  let maxClaimable = convertQuantityToBigNumber(activeClaimCondition.maxClaimablePerWallet, tokenDecimals);\n  let proofs = [ethers__WEBPACK_IMPORTED_MODULE_58__.utils.hexZeroPad([0], 32)];\n  let priceInProof = activeClaimCondition.price; // the price to send to the contract in claim proofs\n  let currencyAddressInProof = activeClaimCondition.currencyAddress;\n  try {\n    if (!activeClaimCondition.merkleRootHash.toString().startsWith(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero)) {\n      const snapshotEntry = await fetchSnapshotEntryForAddress(addressToClaim, activeClaimCondition.merkleRootHash.toString(), await merkleMetadataFetcher(), contractWrapper.getProvider(), storage, snapshotFormatVersion);\n      if (snapshotEntry) {\n        proofs = snapshotEntry.proof;\n        // override only if not default values (unlimited for quantity, zero addr for currency)\n        maxClaimable = snapshotEntry.maxClaimable === \"unlimited\" ? ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256 : ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(snapshotEntry.maxClaimable, tokenDecimals);\n        priceInProof = snapshotEntry.price === undefined || snapshotEntry.price === \"unlimited\" ? ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256 : await normalizePriceValue(contractWrapper.getProvider(), snapshotEntry.price, snapshotEntry.currencyAddress || ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero);\n        currencyAddressInProof = snapshotEntry.currencyAddress || ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero;\n      } else {\n        // if no snapshot entry, and it's a v1 format (exclusive allowlist) then address can't claim\n        if (snapshotFormatVersion === SnapshotFormatVersion.V1) {\n          throw new Error(\"No claim found for this address\");\n        }\n        // but if its snapshot v2 (override list behavior) then address can still claim with default settings\n      }\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if (e?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\"failed to check claim condition merkle root hash, continuing anyways\", e);\n  }\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  // the actual price to check allowance against\n  // if proof price is unlimited, then we use the price from the claim condition\n  // this mimics the contract behavior\n  const pricePerToken = priceInProof.toString() !== ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256.toString() ? priceInProof : activeClaimCondition.price;\n  // same for currency address\n  const currencyAddress = currencyAddressInProof !== ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero ? currencyAddressInProof : activeClaimCondition.currencyAddress;\n  if (pricePerToken.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(pricePerToken).mul(quantity).div(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(\"1\", tokenDecimals));\n    } else if (checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currencyAddress, pricePerToken, quantity, tokenDecimals);\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxClaimable,\n    price: pricePerToken,\n    currencyAddress: currencyAddress,\n    priceInProof,\n    currencyAddressInProof\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot\n * @param merkleMetadata\n * @param storage\n */\nasync function fetchSnapshot(merkleRoot, merkleMetadata, storage) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const smt = await ShardedMerkleTree.fromUri(snapshotUri, storage);\n      return smt?.getAllEntries() || null;\n    } else {\n      const snapshotData = SnapshotSchema.parse(raw);\n      if (merkleRoot === snapshotData.merkleRoot) {\n        return snapshotData.claims.map(claim => ({\n          address: claim.address,\n          maxClaimable: claim.maxClaimable,\n          price: claim.price,\n          currencyAddress: claim.currencyAddress\n        }));\n      }\n    }\n  }\n  return null;\n}\nasync function fetchSnapshotEntryForAddress(address, merkleRoot, merkleMetadata, provider, storage, snapshotFormatVersion) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const merkleTree = await ShardedMerkleTree.fromShardedMerkleTreeInfo(raw, storage);\n      return await merkleTree.getProof(address, provider, snapshotFormatVersion);\n    }\n    // legacy non-sharded, just fetch it all and filter out\n    const snapshotData = SnapshotSchema.parse(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      return snapshotData.claims.find(c => c.address.toLowerCase() === address.toLowerCase()) || null;\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n * @param index\n * @param claimConditionInput\n * @param existingConditions\n */\nasync function updateExistingClaimConditions(index, claimConditionInput, existingConditions) {\n  if (index >= existingConditions.length) {\n    throw Error(`Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`);\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = ClaimConditionInputSchema.parse({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = ClaimConditionOutputSchema.parse({\n    ...newConditionParsed,\n    price: priceInWei\n  });\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatUnits(newConditionAtIndex.price, priceDecimals);\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice // manually transform back to input price type\n    };\n  });\n}\n\n/**\n * @internal\n * Decorates claim conditions with merkle roots from snapshots if present\n * @param claimConditionInputs\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @param snapshotFormatVersion\n */\nasync function processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const snapshotInfos = [];\n  const inputsWithSnapshots = await Promise.all(claimConditionInputs.map(async conditionInput => {\n    // check snapshots and upload if provided\n    if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n      const snapshotInfo = await createSnapshot(conditionInput.snapshot, tokenDecimals, provider, storage, snapshotFormatVersion);\n      snapshotInfos.push(snapshotInfo);\n      conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n    } else {\n      // if no snapshot is passed or empty, reset the merkle root\n      conditionInput.merkleRootHash = ethers__WEBPACK_IMPORTED_MODULE_58__.utils.hexZeroPad([0], 32);\n    }\n    // fill condition with defaults values if not provided\n    return conditionInput;\n  }));\n  return {\n    inputsWithSnapshots,\n    snapshotInfos\n  };\n}\nfunction compare(a, b) {\n  const left = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(a);\n  const right = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(b);\n  if (left.eq(right)) {\n    return 0;\n  } else if (left.gt(right)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @param snapshotFormatVersion\n * @internal\n */\nasync function processClaimConditionInputs(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const {\n    inputsWithSnapshots,\n    snapshotInfos\n  } = await processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion);\n  const parsedInputs = ClaimConditionInputArray.parse(inputsWithSnapshots);\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions = (await Promise.all(parsedInputs.map(c => convertToContractModel(c, tokenDecimals, provider, storage)))).sort((a, b) => {\n    return compare(a.startTimestamp, b.startTimestamp);\n  });\n  return {\n    snapshotInfos,\n    sortedConditions\n  };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @internal\n */\nasync function convertToContractModel(c, tokenDecimals, provider, storage) {\n  const currency = c.currencyAddress === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero ? NATIVE_TOKEN_ADDRESS : c.currencyAddress;\n  const maxClaimableSupply = convertQuantityToBigNumber(c.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertQuantityToBigNumber(c.maxClaimablePerWallet, tokenDecimals);\n  let metadataOrUri;\n  if (c.metadata) {\n    if (typeof c.metadata === \"string\") {\n      metadataOrUri = c.metadata;\n    } else {\n      metadataOrUri = await storage.upload(c.metadata);\n    }\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    maxClaimablePerWallet,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash.toString(),\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds || 0,\n    metadata: metadataOrUri\n  };\n}\nfunction abstractContractModelToLegacy(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerTransaction: model.maxClaimablePerWallet,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims || 0\n  };\n}\nfunction abstractContractModelToNew(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerWallet: model.maxClaimablePerWallet,\n    metadata: model.metadata || \"\"\n  };\n}\nfunction legacyContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims\n  };\n}\nfunction newContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerWallet,\n    waitTimeInSecondsBetweenClaims: 0,\n    metadata: model.metadata\n  };\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm\n * @param tokenDecimals\n * @param provider\n * @param merkleMetadata\n * @param storage\n * @param shouldDownloadSnapshot\n * @internal\n */\nasync function transformResultToClaimCondition(pm, tokenDecimals, provider, merkleMetadata, storage, shouldDownloadSnapshot) {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const maxClaimableSupply = convertToReadableQuantity(pm.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertToReadableQuantity(pm.maxClaimablePerWallet, tokenDecimals);\n  const availableSupply = convertToReadableQuantity(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed), tokenDecimals);\n  const currentMintSupply = convertToReadableQuantity(pm.supplyClaimed, tokenDecimals);\n  let resolvedMetadata;\n  if (pm.metadata) {\n    resolvedMetadata = await storage.downloadJSON(pm.metadata);\n  }\n  return ClaimConditionOutputSchema.parse({\n    startTime: pm.startTimestamp,\n    maxClaimableSupply,\n    maxClaimablePerWallet,\n    currentMintSupply,\n    availableSupply,\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims?.toString(),\n    price: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: shouldDownloadSnapshot ? await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage) : undefined,\n    metadata: resolvedMetadata\n  });\n}\n\n/**\n * @internal\n * @param bn\n * @param tokenDecimals\n */\nfunction convertToReadableQuantity(bn, tokenDecimals) {\n  if (bn.toString() === ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatUnits(bn, tokenDecimals);\n  }\n}\n\n/**\n * @internal\n * @param quantity\n * @param tokenDecimals\n */\nfunction convertQuantityToBigNumber(quantity, tokenDecimals) {\n  if (quantity === \"unlimited\") {\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256;\n  } else {\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(quantity, tokenDecimals);\n  }\n}\nasync function calculateClaimCost(contractWrapper, pricePerToken, quantity, currencyAddress, checkERC20Allowance) {\n  let overrides = {};\n  const currency = currencyAddress || NATIVE_TOKEN_ADDRESS;\n  const normalizedPrice = await normalizePriceValue(contractWrapper.getProvider(), pricePerToken, currency);\n  const totalCost = normalizedPrice.mul(quantity);\n  if (totalCost.gt(0)) {\n    if (currency === NATIVE_TOKEN_ADDRESS) {\n      overrides = {\n        value: totalCost\n      };\n    } else if (currency !== NATIVE_TOKEN_ADDRESS && checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currency, totalCost, quantity, 0);\n    }\n  }\n  return overrides;\n}\n\n// shard using the first 2 hex character of the address\n// this splits the merkle tree into 256 shards\n// shard files will be 00.json, 01.json, 02.json, ..., ff.json\nconst SHARD_NYBBLES = 2;\nlet SnapshotFormatVersion; // address, maxClaimable, price, currencyAddress\n(function (SnapshotFormatVersion) {\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V1\"] = 1] = \"V1\";\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V2\"] = 2] = \"V2\";\n})(SnapshotFormatVersion || (SnapshotFormatVersion = {}));\nclass ShardedMerkleTree {\n  constructor(storage, baseUri, originalEntriesUri, shardNybbles, tokenDecimals) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"shardNybbles\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"shards\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"trees\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"baseUri\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"originalEntriesUri\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"tokenDecimals\", void 0);\n    this.storage = storage;\n    this.shardNybbles = shardNybbles;\n    this.baseUri = baseUri;\n    this.originalEntriesUri = originalEntriesUri;\n    this.tokenDecimals = tokenDecimals;\n    this.shards = {};\n    this.trees = {};\n  }\n  static async fromUri(uri, storage) {\n    try {\n      const shardedMerkleTreeInfo = await storage.downloadJSON(uri);\n      if (shardedMerkleTreeInfo.isShardedMerkleTree) {\n        return ShardedMerkleTree.fromShardedMerkleTreeInfo(shardedMerkleTreeInfo, storage);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  static async fromShardedMerkleTreeInfo(info, storage) {\n    return new ShardedMerkleTree(storage, info.baseUri, info.originalEntriesUri, info.shardNybbles, info.tokenDecimals);\n  }\n  static hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion) {\n    switch (snapshotFormatVersion) {\n      case SnapshotFormatVersion.V1:\n        return ethers__WEBPACK_IMPORTED_MODULE_58__.utils.solidityKeccak256([\"address\", \"uint256\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals)]);\n      case SnapshotFormatVersion.V2:\n        return ethers__WEBPACK_IMPORTED_MODULE_58__.utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\", \"address\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals), convertQuantityToBigNumber(entry.price || \"unlimited\", currencyDecimals), entry.currencyAddress || ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero]);\n    }\n  }\n  static async fetchAndCacheDecimals(cache, provider, currencyAddress) {\n    if (!currencyAddress) {\n      return 18;\n    }\n    // cache decimals for each currency to avoid refetching for every address\n    let currencyDecimals = cache[currencyAddress];\n    if (currencyDecimals === undefined) {\n      const currencyMetadata = await fetchCurrencyMetadata(provider, currencyAddress);\n      currencyDecimals = currencyMetadata.decimals;\n      cache[currencyAddress] = currencyDecimals;\n    }\n    return currencyDecimals;\n  }\n  static async buildAndUpload(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n    let shardNybbles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : SHARD_NYBBLES;\n    const inputs = SnapshotInputSchema.parse(snapshotInput);\n    // TODO Could also derive shardNybbles from input size\n    const shards = {};\n    for (const snapshotEntry of inputs) {\n      const shard = snapshotEntry.address.slice(2, 2 + shardNybbles).toLowerCase();\n      if (shards[shard] === undefined) {\n        shards[shard] = [];\n      }\n      shards[shard].push(snapshotEntry);\n    }\n    const currencyDecimalMap = {};\n    // create shard => subtree root map\n    const subTrees = await Promise.all(Object.entries(shards).map(async _ref => {\n      let [shard, entries] = _ref;\n      return [shard, new merkletreejs__WEBPACK_IMPORTED_MODULE_39__.MerkleTree(await Promise.all(entries.map(async entry => {\n        // cache decimals for each currency to avoid refetching for every address\n        const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n        return ShardedMerkleTree.hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion);\n      })), ethers__WEBPACK_IMPORTED_MODULE_58__.utils.keccak256, {\n        sort: true\n      }).getHexRoot()];\n    }));\n    const roots = Object.fromEntries(subTrees);\n    // create master tree from shard => subtree root map\n    const tree = new merkletreejs__WEBPACK_IMPORTED_MODULE_39__.MerkleTree(Object.values(roots), ethers__WEBPACK_IMPORTED_MODULE_58__.utils.keccak256, {\n      sort: true\n    });\n    const shardsToUpload = [];\n    for (const [shardId, entries] of Object.entries(shards)) {\n      const data = {\n        proofs: tree.getProof(roots[shardId]).map(value => \"0x\" + value.data.toString(\"hex\")),\n        entries\n      };\n      shardsToUpload.push({\n        data: JSON.stringify(data),\n        name: `${shardId}.json`\n      });\n    }\n    const uris = await storage.uploadBatch(shardsToUpload);\n    const baseUri = uris[0].slice(0, uris[0].lastIndexOf(\"/\"));\n    const originalEntriesUri = await storage.upload(inputs);\n    const shardedMerkleInfo = {\n      merkleRoot: tree.getHexRoot(),\n      baseUri,\n      originalEntriesUri,\n      shardNybbles,\n      tokenDecimals,\n      isShardedMerkleTree: true\n    };\n    const masterUri = await storage.upload(shardedMerkleInfo);\n    return {\n      shardedMerkleInfo,\n      uri: masterUri\n    };\n  }\n  async getProof(address, provider, snapshotFormatVersion) {\n    const shardId = address.slice(2, 2 + this.shardNybbles).toLowerCase();\n    let shard = this.shards[shardId];\n    const currencyDecimalMap = {};\n    if (shard === undefined) {\n      try {\n        shard = this.shards[shardId] = await this.storage.downloadJSON(`${this.baseUri}/${shardId}.json`);\n        const hashedEntries = await Promise.all(shard.entries.map(async entry => {\n          // cache decimals for each currency to avoid refetching for every address\n          const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n          return ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n        }));\n        this.trees[shardId] = new merkletreejs__WEBPACK_IMPORTED_MODULE_39__.MerkleTree(hashedEntries, ethers__WEBPACK_IMPORTED_MODULE_58__.utils.keccak256, {\n          sort: true\n        });\n      } catch (e) {\n        console.warn(\"No merkle entry found for address\", address);\n        return null;\n      }\n    }\n    const entry = shard.entries.find(i => i.address.toLowerCase() === address.toLowerCase());\n    if (!entry) {\n      return null;\n    }\n    const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n    const leaf = ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n    const proof = this.trees[shardId].getProof(leaf).map(i => \"0x\" + i.data.toString(\"hex\"));\n    return SnapshotEntryWithProofSchema.parse({\n      ...entry,\n      proof: proof.concat(shard.proofs)\n    });\n  }\n  async getAllEntries() {\n    try {\n      return await this.storage.downloadJSON(this.originalEntriesUri);\n    } catch (e) {\n      console.warn(\"Could not fetch original snapshot entries\", e);\n      return [];\n    }\n  }\n}\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param tokenDecimals - the token decimals\n * @param provider\n * @param storage - the storage to upload to\n * @param snapshotFormatVersion\n * @returns the generated snapshot and URI\n * @internal\n */\nasync function createSnapshot(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const input = SnapshotInputSchema.parse(snapshotInput);\n  const addresses = input.map(i => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n  const tree = await ShardedMerkleTree.buildAndUpload(input, tokenDecimals, provider, storage, snapshotFormatVersion);\n  return {\n    merkleRoot: tree.shardedMerkleInfo.merkleRoot,\n    snapshotUri: tree.uri\n  };\n}\n\n/**\n *\n * @internal\n */\nconst roleMap = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n  unwrap: \"UNWRAP_ROLE\",\n  factory: \"FACTORY_ROLE\"\n};\n\n/**\n * @public\n */\n\n/**\n * @public\n */\nconst ALL_ROLES = Object.keys(roleMap);\n\n/**\n * @internal\n */\nfunction getRoleHash(role) {\n  if (role === \"admin\") {\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.id(roleMap[role]);\n}\n\nconst FEATURE_TOKEN_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC20ClaimConditionsV1\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"DropSinglePhase_V1\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_V1_json__WEBPACK_IMPORTED_MODULE_12__],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC20ClaimConditionsV2\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"DropSinglePhase\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_json__WEBPACK_IMPORTED_MODULE_11__],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_PHASES_V2 = {\n  name: \"ERC20ClaimPhasesV2\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"Drop\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, _thirdweb_dev_contracts_js_dist_abis_IDrop_json__WEBPACK_IMPORTED_MODULE_10__],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_PHASES_V1 = {\n  name: \"ERC20ClaimPhasesV1\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"Drop\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_DropERC20_V2_json__WEBPACK_IMPORTED_MODULE_8__],\n  features: {}\n};\nconst FEATURE_TOKEN_BURNABLE = {\n  name: \"ERC20Burnable\",\n  namespace: \"token.burn\",\n  docLinks: {\n    sdk: \"sdk.erc20burnable\",\n    contracts: \"IBurnableERC20\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, _thirdweb_dev_contracts_js_dist_abis_IBurnableERC20_json__WEBPACK_IMPORTED_MODULE_9__],\n  features: {}\n};\nconst FEATURE_TOKEN_SIGNATURE_MINTABLE = {\n  name: \"ERC20SignatureMintable\",\n  namespace: \"token.signature\",\n  docLinks: {\n    sdk: \"sdk.erc20signaturemintable\",\n    contracts: \"ISignatureMintERC20\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC20_json__WEBPACK_IMPORTED_MODULE_16__],\n  features: {}\n};\nconst FEATURE_TOKEN_BATCH_MINTABLE = {\n  name: \"ERC20BatchMintable\",\n  namespace: \"token.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc20batchmintable\",\n    contracts: \"IMulticall\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, _thirdweb_dev_contracts_js_dist_abis_IMintableERC20_json__WEBPACK_IMPORTED_MODULE_14__, _thirdweb_dev_contracts_js_dist_abis_IMulticall_json__WEBPACK_IMPORTED_MODULE_15__],\n  features: {}\n};\nconst FEATURE_TOKEN_MINTABLE = {\n  name: \"ERC20Mintable\",\n  namespace: \"token.mint\",\n  docLinks: {\n    sdk: \"sdk.erc20mintable\",\n    contracts: \"IMintableERC20\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, _thirdweb_dev_contracts_js_dist_abis_IMintableERC20_json__WEBPACK_IMPORTED_MODULE_14__],\n  features: {\n    [FEATURE_TOKEN_BATCH_MINTABLE.name]: FEATURE_TOKEN_BATCH_MINTABLE\n  }\n};\nconst FEATURE_TOKEN = {\n  name: \"ERC20\",\n  namespace: \"token\",\n  docLinks: {\n    sdk: \"sdk.erc20\",\n    contracts: \"IERC20\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__],\n  features: {\n    [FEATURE_TOKEN_BURNABLE.name]: FEATURE_TOKEN_BURNABLE,\n    [FEATURE_TOKEN_MINTABLE.name]: FEATURE_TOKEN_MINTABLE,\n    [FEATURE_TOKEN_CLAIM_CONDITIONS_V1.name]: FEATURE_TOKEN_CLAIM_CONDITIONS_V1,\n    [FEATURE_TOKEN_CLAIM_CONDITIONS_V2.name]: FEATURE_TOKEN_CLAIM_CONDITIONS_V2,\n    [FEATURE_TOKEN_CLAIM_PHASES_V1.name]: FEATURE_TOKEN_CLAIM_PHASES_V1,\n    [FEATURE_TOKEN_CLAIM_PHASES_V2.name]: FEATURE_TOKEN_CLAIM_PHASES_V2,\n    [FEATURE_TOKEN_SIGNATURE_MINTABLE.name]: FEATURE_TOKEN_SIGNATURE_MINTABLE\n  }\n};\n\nconst FEATURE_NFT_BURNABLE = {\n  name: \"ERC721Burnable\",\n  namespace: \"nft.burn\",\n  docLinks: {\n    sdk: \"sdk.erc721burnable\",\n    contracts: \"IBurnableERC721\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_IBurnableERC721_json__WEBPACK_IMPORTED_MODULE_18__],\n  features: {}\n};\nconst FEATURE_NFT_REVEALABLE = {\n  name: \"ERC721Revealable\",\n  namespace: \"nft.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.delayedreveal\",\n    contracts: \"DelayedReveal\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDelayedReveal_json__WEBPACK_IMPORTED_MODULE_20__],\n  features: {}\n};\nconst FEATURE_NFT_TIERED_DROP = {\n  name: \"ERC721TieredDrop\",\n  namespace: \"nft.tieredDrop\",\n  docLinks: {\n    sdk: \"sdk.erc721tiereddrop\",\n    contracts: \"TieredDrop\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_LazyMintWithTier_json__WEBPACK_IMPORTED_MODULE_27__],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC721ClaimConditionsV1\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"DropSinglePhase_V1\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_V1_json__WEBPACK_IMPORTED_MODULE_12__],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC721ClaimConditionsV2\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"DropSinglePhase\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_json__WEBPACK_IMPORTED_MODULE_11__],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_PHASES_V1 = {\n  name: \"ERC721ClaimPhasesV1\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"Drop\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_DropERC721_V3_json__WEBPACK_IMPORTED_MODULE_17__],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_PHASES_V2 = {\n  name: \"ERC721ClaimPhasesV2\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"Drop\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDrop_json__WEBPACK_IMPORTED_MODULE_10__],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CUSTOM = {\n  name: \"ERC721ClaimCustom\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"IClaimableERC721\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IClaimableERC721_json__WEBPACK_IMPORTED_MODULE_19__],\n  features: {}\n};\nconst FEATURE_NFT_LAZY_MINTABLE = {\n  name: \"ERC721LazyMintable\",\n  namespace: \"nft.drop\",\n  docLinks: {\n    sdk: \"sdk.erc721lazymintable\",\n    contracts: \"LazyMint\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__],\n  features: {\n    [FEATURE_NFT_REVEALABLE.name]: FEATURE_NFT_REVEALABLE,\n    [FEATURE_NFT_CLAIM_CUSTOM.name]: FEATURE_NFT_CLAIM_CUSTOM,\n    [FEATURE_NFT_CLAIM_CONDITIONS_V1.name]: FEATURE_NFT_CLAIM_CONDITIONS_V1,\n    [FEATURE_NFT_CLAIM_CONDITIONS_V2.name]: FEATURE_NFT_CLAIM_CONDITIONS_V2,\n    [FEATURE_NFT_CLAIM_PHASES_V1.name]: FEATURE_NFT_CLAIM_PHASES_V1,\n    [FEATURE_NFT_CLAIM_PHASES_V2.name]: FEATURE_NFT_CLAIM_PHASES_V2\n  }\n};\nconst FEATURE_NFT_BATCH_MINTABLE = {\n  name: \"ERC721BatchMintable\",\n  namespace: \"nft.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc721batchmintable\",\n    contracts: \"IMulticall\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_IMintableERC721_json__WEBPACK_IMPORTED_MODULE_24__, _thirdweb_dev_contracts_js_dist_abis_IMulticall_json__WEBPACK_IMPORTED_MODULE_15__],\n  features: {}\n};\nconst FEATURE_NFT_MINTABLE = {\n  name: \"ERC721Mintable\",\n  namespace: \"nft.mint\",\n  docLinks: {\n    sdk: \"sdk.erc721mintable\",\n    contracts: \"IMintableERC721\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_IMintableERC721_json__WEBPACK_IMPORTED_MODULE_24__],\n  features: {\n    [FEATURE_NFT_BATCH_MINTABLE.name]: FEATURE_NFT_BATCH_MINTABLE\n  }\n};\nconst FEATURE_NFT_SIGNATURE_MINTABLE_V2 = {\n  name: \"ERC721SignatureMintV2\",\n  namespace: \"nft.signature\",\n  docLinks: {\n    sdk: \"sdk.erc721signaturemint\",\n    contracts: \"ISignatureMintERC721\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC721_json__WEBPACK_IMPORTED_MODULE_25__],\n  features: {}\n};\nconst FEATURE_NFT_SIGNATURE_MINTABLE_V1 = {\n  name: \"ERC721SignatureMintV1\",\n  namespace: \"nft.signature\",\n  docLinks: {\n    sdk: \"sdk.erc721signaturemint\",\n    contracts: \"ISignatureMintERC721\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC721_V1_json__WEBPACK_IMPORTED_MODULE_26__],\n  features: {}\n};\nconst FEATURE_NFT_ENUMERABLE = {\n  name: \"ERC721Enumerable\",\n  namespace: \"nft.query.owned\",\n  docLinks: {\n    sdk: \"sdk.erc721enumerable\",\n    contracts: \"IERC721Enumerable\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_IERC721Enumerable_json__WEBPACK_IMPORTED_MODULE_21__],\n  features: {}\n};\nconst FEATURE_NFT_SUPPLY = {\n  name: \"ERC721Supply\",\n  namespace: \"nft.query\",\n  docLinks: {\n    sdk: \"sdk.erc721supply\",\n    contracts: \"IERC721Supply\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, _thirdweb_dev_contracts_js_dist_abis_IERC721Supply_json__WEBPACK_IMPORTED_MODULE_22__],\n  features: {\n    [FEATURE_NFT_ENUMERABLE.name]: FEATURE_NFT_ENUMERABLE\n  }\n};\nconst FEATURE_NFT = {\n  name: \"ERC721\",\n  namespace: \"nft\",\n  docLinks: {\n    sdk: \"sdk.erc721\",\n    contracts: \"IERC721\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__],\n  features: {\n    [FEATURE_NFT_BURNABLE.name]: FEATURE_NFT_BURNABLE,\n    [FEATURE_NFT_SUPPLY.name]: FEATURE_NFT_SUPPLY,\n    [FEATURE_NFT_MINTABLE.name]: FEATURE_NFT_MINTABLE,\n    [FEATURE_NFT_LAZY_MINTABLE.name]: FEATURE_NFT_LAZY_MINTABLE,\n    [FEATURE_NFT_SIGNATURE_MINTABLE_V1.name]: FEATURE_NFT_SIGNATURE_MINTABLE_V1,\n    [FEATURE_NFT_SIGNATURE_MINTABLE_V2.name]: FEATURE_NFT_SIGNATURE_MINTABLE_V2,\n    [FEATURE_NFT_TIERED_DROP.name]: FEATURE_NFT_TIERED_DROP\n  }\n};\n\nconst FEATURE_EDITION_BURNABLE = {\n  name: \"ERC1155Burnable\",\n  namespace: \"edition.burn\",\n  docLinks: {\n    sdk: \"sdk.erc1155burnable\",\n    contracts: \"IBurnableERC1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_IBurnableERC1155_json__WEBPACK_IMPORTED_MODULE_29__],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC1155ClaimConditionsV1\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"DropSinglePhase1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase1155_V1_json__WEBPACK_IMPORTED_MODULE_33__],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC1155ClaimConditionsV2\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"DropSinglePhase1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase1155_json__WEBPACK_IMPORTED_MODULE_32__],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_PHASES_V2 = {\n  name: \"ERC1155ClaimPhasesV2\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"Drop1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDrop1155_json__WEBPACK_IMPORTED_MODULE_31__],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_PHASES_V1 = {\n  name: \"ERC1155ClaimPhasesV1\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"Drop1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_DropERC1155_V2_json__WEBPACK_IMPORTED_MODULE_28__],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CUSTOM = {\n  name: \"ERC1155ClaimCustom\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"IClaimableERC1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IClaimableERC1155_json__WEBPACK_IMPORTED_MODULE_30__],\n  features: {}\n};\nconst FEATURE_EDITION_REVEALABLE = {\n  name: \"ERC1155Revealable\",\n  namespace: \"edition.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.drop.delayedreveal\",\n    contracts: \"DelayedReveal\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__, _thirdweb_dev_contracts_js_dist_abis_IDelayedReveal_json__WEBPACK_IMPORTED_MODULE_20__],\n  features: {}\n};\nconst FEATURE_EDITION_LAZY_MINTABLE_V2 = {\n  name: \"ERC1155LazyMintableV2\",\n  namespace: \"edition.drop\",\n  docLinks: {\n    sdk: \"sdk.erc1155droppable\",\n    contracts: \"LazyMint\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_23__],\n  features: {\n    [FEATURE_EDITION_REVEALABLE.name]: FEATURE_EDITION_REVEALABLE,\n    [FEATURE_EDITION_CLAIM_CUSTOM.name]: FEATURE_EDITION_CLAIM_CUSTOM,\n    [FEATURE_EDITION_CLAIM_CONDITIONS_V1.name]: FEATURE_EDITION_CLAIM_CONDITIONS_V1,\n    [FEATURE_EDITION_CLAIM_CONDITIONS_V2.name]: FEATURE_EDITION_CLAIM_CONDITIONS_V2,\n    [FEATURE_EDITION_CLAIM_PHASES_V2.name]: FEATURE_EDITION_CLAIM_PHASES_V2\n  }\n};\nconst FEATURE_EDITION_LAZY_MINTABLE_V1 = {\n  name: \"ERC1155LazyMintableV1\",\n  namespace: \"edition.drop\",\n  docLinks: {\n    sdk: \"sdk.erc1155droppable\",\n    contracts: \"LazyMint\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_DropERC1155_V2_json__WEBPACK_IMPORTED_MODULE_28__],\n  features: {\n    [FEATURE_EDITION_CLAIM_PHASES_V1.name]: FEATURE_EDITION_CLAIM_PHASES_V1\n  }\n};\nconst FEATURE_EDITION_SIGNATURE_MINTABLE = {\n  name: \"ERC1155SignatureMintable\",\n  namespace: \"edition.signature\",\n  docLinks: {\n    sdk: \"sdk.erc1155signaturemintable\",\n    contracts: \"ISignatureMintERC1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC1155_json__WEBPACK_IMPORTED_MODULE_36__],\n  features: {}\n};\nconst FEATURE_EDITION_BATCH_MINTABLE = {\n  name: \"ERC1155BatchMintable\",\n  namespace: \"edition.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc1155batchmintable\",\n    contracts: \"IMulticall\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_IMintableERC1155_json__WEBPACK_IMPORTED_MODULE_35__, _thirdweb_dev_contracts_js_dist_abis_IMulticall_json__WEBPACK_IMPORTED_MODULE_15__],\n  features: {}\n};\nconst FEATURE_EDITION_MINTABLE = {\n  name: \"ERC1155Mintable\",\n  namespace: \"edition.mint\",\n  docLinks: {\n    sdk: \"sdk.erc1155mintable\",\n    contracts: \"IMintableERC1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_IMintableERC1155_json__WEBPACK_IMPORTED_MODULE_35__],\n  features: {\n    [FEATURE_EDITION_BATCH_MINTABLE.name]: FEATURE_EDITION_BATCH_MINTABLE\n  }\n};\nconst FEATURE_EDITION_ENUMERABLE = {\n  name: \"ERC1155Enumerable\",\n  namespace: \"edition.query\",\n  docLinks: {\n    sdk: \"sdk.erc1155\",\n    contracts: \"IERC1155\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, _thirdweb_dev_contracts_js_dist_abis_IERC1155Enumerable_json__WEBPACK_IMPORTED_MODULE_34__],\n  features: {}\n};\nconst FEATURE_EDITION = {\n  name: \"ERC1155\",\n  namespace: \"edition\",\n  docLinks: {\n    sdk: \"sdk.erc1155enumerable\",\n    contracts: \"IERC1155Enumerable\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__],\n  features: {\n    [FEATURE_EDITION_BURNABLE.name]: FEATURE_EDITION_BURNABLE,\n    [FEATURE_EDITION_ENUMERABLE.name]: FEATURE_EDITION_ENUMERABLE,\n    [FEATURE_EDITION_MINTABLE.name]: FEATURE_EDITION_MINTABLE,\n    [FEATURE_EDITION_LAZY_MINTABLE_V1.name]: FEATURE_EDITION_LAZY_MINTABLE_V1,\n    [FEATURE_EDITION_LAZY_MINTABLE_V2.name]: FEATURE_EDITION_LAZY_MINTABLE_V2,\n    [FEATURE_EDITION_REVEALABLE.name]: FEATURE_EDITION_REVEALABLE,\n    [FEATURE_EDITION_SIGNATURE_MINTABLE.name]: FEATURE_EDITION_SIGNATURE_MINTABLE\n  }\n};\n\nconst FEATURE_ROYALTY = {\n  name: \"Royalty\",\n  namespace: \"royalty\",\n  docLinks: {\n    sdk: \"sdk.contractroyalty\",\n    contracts: \"Royalty\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IRoyalty_json__WEBPACK_IMPORTED_MODULE_55__],\n  features: {}\n};\nconst FEATURE_PRIMARY_SALE = {\n  name: \"PrimarySale\",\n  namespace: \"sales\",\n  docLinks: {\n    sdk: \"sdk.contractprimarysale\",\n    contracts: \"PrimarySale\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IPrimarySale_json__WEBPACK_IMPORTED_MODULE_54__],\n  features: {}\n};\nconst FEATURE_PLATFORM_FEE = {\n  name: \"PlatformFee\",\n  namespace: \"platformFee\",\n  docLinks: {\n    sdk: \"sdk.platformfee\",\n    contracts: \"PlatformFee\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IPlatformFee_json__WEBPACK_IMPORTED_MODULE_53__],\n  features: {}\n};\nconst FEATURE_PERMISSIONS_ENUMERABLE = {\n  name: \"PermissionsEnumerable\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"PermissionsEnumerable\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IPermissionsEnumerable_json__WEBPACK_IMPORTED_MODULE_52__],\n  features: {}\n};\nconst FEATURE_PERMISSIONS = {\n  name: \"Permissions\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"Permissions\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IPermissions_json__WEBPACK_IMPORTED_MODULE_51__],\n  features: {\n    [FEATURE_PERMISSIONS_ENUMERABLE.name]: FEATURE_PERMISSIONS_ENUMERABLE\n  }\n};\nconst FEATURE_METADATA = {\n  name: \"ContractMetadata\",\n  namespace: \"metadata\",\n  docLinks: {\n    sdk: \"sdk.contractmetadata\",\n    contracts: \"ContractMetadata\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IContractMetadata_json__WEBPACK_IMPORTED_MODULE_50__],\n  features: {}\n};\nconst FEATURE_APPURI = {\n  name: \"AppURI\",\n  namespace: \"appURI\",\n  docLinks: {\n    sdk: \"sdk.appURI\",\n    contracts: \"AppURI\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_IAppURI_json__WEBPACK_IMPORTED_MODULE_49__],\n  features: {}\n};\nconst FEATURE_OWNER = {\n  name: \"Ownable\",\n  namespace: \"owner\",\n  docLinks: {\n    sdk: \"sdk.owner\",\n    contracts: \"Ownable\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_Ownable_json__WEBPACK_IMPORTED_MODULE_56__],\n  features: {}\n};\nconst FEATURE_GASLESS = {\n  name: \"Gasless\",\n  namespace: \"gasless\",\n  docLinks: {\n    sdk: \"sdk.gaslesstransaction\",\n    // TODO add the correct name for this once it's added to portal\n    contracts: \"\"\n  },\n  abis: [_thirdweb_dev_contracts_js_dist_abis_ERC2771Context_json__WEBPACK_IMPORTED_MODULE_48__],\n  features: {}\n};\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst SUPPORTED_FEATURES = {\n  [FEATURE_TOKEN.name]: FEATURE_TOKEN,\n  [FEATURE_NFT.name]: FEATURE_NFT,\n  [FEATURE_EDITION.name]: FEATURE_EDITION,\n  [FEATURE_ROYALTY.name]: FEATURE_ROYALTY,\n  [FEATURE_PLATFORM_FEE.name]: FEATURE_PLATFORM_FEE,\n  [FEATURE_PRIMARY_SALE.name]: FEATURE_PRIMARY_SALE,\n  [FEATURE_PERMISSIONS.name]: FEATURE_PERMISSIONS,\n  [FEATURE_METADATA.name]: FEATURE_METADATA,\n  [FEATURE_APPURI.name]: FEATURE_APPURI,\n  [FEATURE_OWNER.name]: FEATURE_OWNER,\n  [FEATURE_GASLESS.name]: FEATURE_GASLESS\n};\n\n/* eslint-disable eqeqeq */\nlet decoder;\ntry {\n  decoder = new TextDecoder();\n} catch (error) {}\nlet src;\nlet srcEnd;\nlet position = 0;\nconst LEGACY_RECORD_INLINE_ID = 105;\nconst RECORD_DEFINITIONS_ID = 0xdffe;\nconst RECORD_INLINE_ID = 0xdfff; // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'\nconst BUNDLED_STRINGS_ID = 0xdff9;\nconst PACKED_REFERENCE_TAG_ID = 6;\nconst STOP_CODE = {};\nlet currentDecoder = {};\nlet currentStructures;\nlet srcString;\nlet srcStringStart = 0;\nlet srcStringEnd = 0;\nlet bundledStrings;\nlet referenceMap;\nlet currentExtensions = [];\nlet currentExtensionRanges = [];\nlet packedValues;\nlet dataView;\nlet restoreMapsAsObject;\nlet defaultOptions = {\n  useRecords: false,\n  mapsAsObjects: true\n};\nlet sequentialMode = false;\nclass Decoder {\n  constructor(options) {\n    if (options) {\n      if ((options.keyMap || options._keyMap) && !options.useRecords) {\n        options.useRecords = false;\n        options.mapsAsObjects = true;\n      }\n      if (options.useRecords === false && options.mapsAsObjects === undefined) {\n        options.mapsAsObjects = true;\n      }\n      if (options.getStructures) {\n        options.getShared = options.getStructures;\n      }\n      if (options.getShared && !options.structures) {\n        (options.structures = []).uninitialized = true;\n      } // this is what we use to denote an uninitialized structures\n      if (options.keyMap) {\n        this.mapKey = new Map();\n        for (let [k, v] of Object.entries(options.keyMap)) {\n          this.mapKey.set(v, k);\n        }\n      }\n    }\n    Object.assign(this, options);\n  }\n  decodeKey(key) {\n    return this.keyMap ? this.mapKey.get(key) || key : key;\n  }\n  decode(source, end) {\n    if (src) {\n      // re-entrant execution, save the state and restore it after we do this decode\n      return saveState(() => {\n        clearSource();\n        return this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end);\n      });\n    }\n    srcEnd = end > -1 ? end : source.length;\n    position = 0;\n    srcStringEnd = 0;\n    srcString = null;\n    bundledStrings = null;\n    src = source;\n    // this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n    // technique for getting data from a database where it can be copied into an existing buffer instead of creating\n    // new ones\n    try {\n      dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));\n    } catch (error) {\n      // if it doesn't have a buffer, maybe it is the wrong type of object\n      src = null;\n      if (source instanceof Uint8Array) {\n        throw error;\n      }\n      throw new Error(\"Source must be a Uint8Array or Buffer but was a \" + (source && typeof source === \"object\" ? source.constructor.name : typeof source));\n    }\n    if (this instanceof Decoder) {\n      currentDecoder = this;\n      packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);\n      if (this.structures) {\n        currentStructures = this.structures;\n        return checkedRead();\n      } else if (!currentStructures || currentStructures.length > 0) {\n        currentStructures = [];\n      }\n    } else {\n      currentDecoder = defaultOptions;\n      if (!currentStructures || currentStructures.length > 0) {\n        currentStructures = [];\n      }\n      packedValues = null;\n    }\n    return checkedRead();\n  }\n}\nfunction checkedRead() {\n  try {\n    let result = read();\n    if (bundledStrings) {\n      if (position >= bundledStrings.postBundlePosition) {\n        let error = new Error(\"Unexpected bundle position\");\n        error.incomplete = true;\n        throw error;\n      }\n      // bundled strings to skip past\n      position = bundledStrings.postBundlePosition;\n      bundledStrings = null;\n    }\n    if (position == srcEnd) {\n      // finished reading this source, cleanup references\n      currentStructures = null;\n      src = null;\n      if (referenceMap) {\n        referenceMap = null;\n      }\n    } else if (position > srcEnd) {\n      // over read\n      let error = new Error(\"Unexpected end of CBOR data\");\n      error.incomplete = true;\n      throw error;\n    } else if (!sequentialMode) {\n      throw new Error(\"Data read, but end of buffer not reached\");\n    }\n    // else more to read, but we are reading sequentially, so don't clear source yet\n    return result;\n  } catch (error) {\n    clearSource();\n    if (error instanceof RangeError || error.message.startsWith(\"Unexpected end of buffer\")) {\n      error.incomplete = true;\n    }\n    throw error;\n  }\n}\nfunction read() {\n  let token = src[position++];\n  let majorType = token >> 5;\n  token = token & 0x1f;\n  if (token > 0x17) {\n    switch (token) {\n      case 0x18:\n        token = src[position++];\n        break;\n      case 0x19:\n        if (majorType == 7) {\n          return getFloat16();\n        }\n        token = dataView.getUint16(position);\n        position += 2;\n        break;\n      case 0x1a:\n        if (majorType == 7) {\n          let value = dataView.getFloat32(position);\n          if (currentDecoder.useFloat32 > 2) {\n            // this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n            let multiplier = mult10[(src[position] & 0x7f) << 1 | src[position + 1] >> 7];\n            position += 4;\n            return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;\n          }\n          position += 4;\n          return value;\n        }\n        token = dataView.getUint32(position);\n        position += 4;\n        break;\n      case 0x1b:\n        if (majorType == 7) {\n          let value = dataView.getFloat64(position);\n          position += 8;\n          return value;\n        }\n        if (majorType > 1) {\n          if (dataView.getUint32(position) > 0) {\n            throw new Error(\"JavaScript does not support arrays, maps, or strings with length over 4294967295\");\n          }\n          token = dataView.getUint32(position + 4);\n        } else if (currentDecoder.int64AsNumber) {\n          token = dataView.getUint32(position) * 0x100000000;\n          token += dataView.getUint32(position + 4);\n        } else {\n          token = dataView.getBigUint64(position);\n        }\n        position += 8;\n        break;\n      case 0x1f:\n        // indefinite length\n        switch (majorType) {\n          case 2: // byte string\n          case 3:\n            // text string\n            throw new Error(\"Indefinite length not supported for byte or text strings\");\n          case 4:\n            // array\n            let array = [];\n            let value,\n              i = 0;\n            while ((value = read()) != STOP_CODE) {\n              array[i++] = value;\n            }\n            return majorType == 4 ? array : majorType == 3 ? array.join(\"\") : Buffer.concat(array);\n          case 5:\n            // map\n            let key;\n            if (currentDecoder.mapsAsObjects) {\n              let object = {};\n              if (currentDecoder.keyMap) {\n                while ((key = read()) != STOP_CODE) {\n                  object[safeKey(currentDecoder.decodeKey(key))] = read();\n                }\n              } else {\n                while ((key = read()) != STOP_CODE) {\n                  object[safeKey(key)] = read();\n                }\n              }\n              return object;\n            } else {\n              if (restoreMapsAsObject) {\n                currentDecoder.mapsAsObjects = true;\n                restoreMapsAsObject = false;\n              }\n              let map = new Map();\n              if (currentDecoder.keyMap) {\n                while ((key = read()) != STOP_CODE) {\n                  map.set(currentDecoder.decodeKey(key), read());\n                }\n              } else {\n                while ((key = read()) != STOP_CODE) {\n                  map.set(key, read());\n                }\n              }\n              return map;\n            }\n          case 7:\n            return STOP_CODE;\n          default:\n            throw new Error(\"Invalid major type for indefinite length \" + majorType);\n        }\n      default:\n        throw new Error(\"Unknown token \" + token);\n    }\n  }\n  switch (majorType) {\n    case 0:\n      // positive int\n      return token;\n    case 1:\n      // negative int\n      return ~token;\n    case 2:\n      // buffer\n      return readBin(token);\n    case 3:\n      // string\n      if (srcStringEnd >= position) {\n        return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);\n      }\n      if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {\n        // for small blocks, avoiding the overhead of the extract call is helpful\n        let string = token < 16 ? shortStringInJS(token) : longStringInJS(token);\n        if (string != null) {\n          return string;\n        }\n      }\n      return readFixedString(token);\n    case 4:\n      // array\n      let array = new Array(token);\n      //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())\n      //else\n      for (let i = 0; i < token; i++) {\n        array[i] = read();\n      }\n      return array;\n    case 5:\n      // map\n      if (currentDecoder.mapsAsObjects) {\n        let object = {};\n        if (currentDecoder.keyMap) {\n          for (let i = 0; i < token; i++) {\n            object[safeKey(currentDecoder.decodeKey(read()))] = read();\n          }\n        } else {\n          for (let i = 0; i < token; i++) {\n            object[safeKey(read())] = read();\n          }\n        }\n        return object;\n      } else {\n        if (restoreMapsAsObject) {\n          currentDecoder.mapsAsObjects = true;\n          restoreMapsAsObject = false;\n        }\n        let map = new Map();\n        if (currentDecoder.keyMap) {\n          for (let i = 0; i < token; i++) {\n            map.set(currentDecoder.decodeKey(read()), read());\n          }\n        } else {\n          for (let i = 0; i < token; i++) {\n            map.set(read(), read());\n          }\n        }\n        return map;\n      }\n    case 6:\n      // extension\n      if (token >= BUNDLED_STRINGS_ID) {\n        let structure = currentStructures[token & 0x1fff]; // check record structures first\n        // At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))\n        if (structure) {\n          if (!structure.read) {\n            structure.read = createStructureReader(structure);\n          }\n          return structure.read();\n        }\n        if (token < 0x10000) {\n          if (token == RECORD_INLINE_ID) {\n            // we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n            return recordDefinition(read());\n          } else if (token == RECORD_DEFINITIONS_ID) {\n            let length = readJustLength();\n            let id = read();\n            for (let i = 2; i < length; i++) {\n              recordDefinition([id++, read()]);\n            }\n            return read();\n          } else if (token == BUNDLED_STRINGS_ID) {\n            return readBundleExt();\n          }\n          if (currentDecoder.getShared) {\n            loadShared();\n            structure = currentStructures[token & 0x1fff];\n            if (structure) {\n              if (!structure.read) {\n                structure.read = createStructureReader(structure);\n              }\n              return structure.read();\n            }\n          }\n        }\n      }\n      let extension = currentExtensions[token];\n      if (extension) {\n        if (extension.handlesRead) {\n          return extension(read);\n        } else {\n          return extension(read());\n        }\n      } else {\n        let input = read();\n        for (let i = 0; i < currentExtensionRanges.length; i++) {\n          let value = currentExtensionRanges[i](token, input);\n          if (value !== undefined) {\n            return value;\n          }\n        }\n        return new Tag(input, token);\n      }\n    case 7:\n      // fixed value\n      switch (token) {\n        case 0x14:\n          return false;\n        case 0x15:\n          return true;\n        case 0x16:\n          return null;\n        case 0x17:\n          return;\n        // undefined\n        case 0x1f:\n        default:\n          let packedValue = (packedValues || getPackedValues())[token];\n          if (packedValue !== undefined) {\n            return packedValue;\n          }\n          throw new Error(\"Unknown token \" + token);\n      }\n    default:\n      // negative int\n      if (isNaN(token)) {\n        let error = new Error(\"Unexpected end of CBOR data\");\n        error.incomplete = true;\n        throw error;\n      }\n      throw new Error(\"Unknown CBOR token \" + token);\n  }\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/;\nfunction createStructureReader(structure) {\n  function readObject() {\n    // get the array size from the header\n    let length = src[position++];\n    //let majorType = token >> 5\n    length = length & 0x1f;\n    if (length > 0x17) {\n      switch (length) {\n        case 0x18:\n          length = src[position++];\n          break;\n        case 0x19:\n          length = dataView.getUint16(position);\n          position += 2;\n          break;\n        case 0x1a:\n          length = dataView.getUint32(position);\n          position += 4;\n          break;\n        default:\n          throw new Error(\"Expected array header, but got \" + src[position - 1]);\n      }\n    }\n    // This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n    let compiledReader = this.compiledReader; // first look to see if we have the fast compiled function\n    while (compiledReader) {\n      // we have a fast compiled object literal reader\n      if (compiledReader.propertyCount === length) {\n        return compiledReader(read);\n      } // with the right length, so we use it\n      compiledReader = compiledReader.next; // see if there is another reader with the right length\n    }\n\n    if (this.slowReads++ >= 3) {\n      // create a fast compiled reader\n      let array = this.length == length ? this : this.slice(0, length);\n      compiledReader = currentDecoder.keyMap ? new Function(\"r\", \"return {\" + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + \":r()\" : \"[\" + JSON.stringify(k) + \"]:r()\").join(\",\") + \"}\") : new Function(\"r\", \"return {\" + array.map(key => validName.test(key) ? safeKey(key) + \":r()\" : \"[\" + JSON.stringify(key) + \"]:r()\").join(\",\") + \"}\");\n      if (this.compiledReader) {\n        compiledReader.next = this.compiledReader;\n      } // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure\n      compiledReader.propertyCount = length;\n      this.compiledReader = compiledReader;\n      return compiledReader(read);\n    }\n    let object = {};\n    if (currentDecoder.keyMap) {\n      for (let i = 0; i < length; i++) {\n        object[safeKey(currentDecoder.decodeKey(this[i]))] = read();\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        object[safeKey(this[i])] = read();\n      }\n    }\n    return object;\n  }\n  structure.slowReads = 0;\n  return readObject;\n}\nfunction safeKey(key) {\n  return key === \"__proto__\" ? \"__proto_\" : key;\n}\nlet readFixedString = readStringJS;\nfunction readStringJS(length) {\n  let result;\n  if (length < 16) {\n    if (result = shortStringInJS(length)) {\n      return result;\n    }\n  }\n  if (length > 64 && decoder) {\n    return decoder.decode(src.subarray(position, position += length));\n  }\n  const end = position + length;\n  const units = [];\n  result = \"\";\n  while (position < end) {\n    const byte1 = src[position++];\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = src[position++] & 0x3f;\n      units.push((byte1 & 0x1f) << 6 | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = src[position++] & 0x3f;\n      const byte3 = src[position++] & 0x3f;\n      units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = src[position++] & 0x3f;\n      const byte3 = src[position++] & 0x3f;\n      const byte4 = src[position++] & 0x3f;\n      let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(unit >>> 10 & 0x3ff | 0xd800);\n        unit = 0xdc00 | unit & 0x3ff;\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n    if (units.length >= 0x1000) {\n      result += fromCharCode.apply(String, units);\n      units.length = 0;\n    }\n  }\n  if (units.length > 0) {\n    result += fromCharCode.apply(String, units);\n  }\n  return result;\n}\nlet fromCharCode = String.fromCharCode;\nfunction longStringInJS(length) {\n  let start = position;\n  let bytes = new Array(length);\n  for (let i = 0; i < length; i++) {\n    const byte = src[position++];\n    if ((byte & 0x80) > 0) {\n      position = start;\n      return;\n    }\n    bytes[i] = byte;\n  }\n  return fromCharCode.apply(String, bytes);\n}\nfunction shortStringInJS(length) {\n  if (length < 4) {\n    if (length < 2) {\n      if (length === 0) {\n        return \"\";\n      } else {\n        let a = src[position++];\n        if ((a & 0x80) > 1) {\n          position -= 1;\n          return;\n        }\n        return fromCharCode(a);\n      }\n    } else {\n      let a = src[position++];\n      let b = src[position++];\n      if ((a & 0x80) > 0 || (b & 0x80) > 0) {\n        position -= 2;\n        return;\n      }\n      if (length < 3) {\n        return fromCharCode(a, b);\n      }\n      let c = src[position++];\n      if ((c & 0x80) > 0) {\n        position -= 3;\n        return;\n      }\n      return fromCharCode(a, b, c);\n    }\n  } else {\n    let a = src[position++];\n    let b = src[position++];\n    let c = src[position++];\n    let d = src[position++];\n    if ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n      position -= 4;\n      return;\n    }\n    if (length < 6) {\n      if (length === 4) {\n        return fromCharCode(a, b, c, d);\n      } else {\n        let e = src[position++];\n        if ((e & 0x80) > 0) {\n          position -= 5;\n          return;\n        }\n        return fromCharCode(a, b, c, d, e);\n      }\n    } else if (length < 8) {\n      let e = src[position++];\n      let f = src[position++];\n      if ((e & 0x80) > 0 || (f & 0x80) > 0) {\n        position -= 6;\n        return;\n      }\n      if (length < 7) {\n        return fromCharCode(a, b, c, d, e, f);\n      }\n      let g = src[position++];\n      if ((g & 0x80) > 0) {\n        position -= 7;\n        return;\n      }\n      return fromCharCode(a, b, c, d, e, f, g);\n    } else {\n      let e = src[position++];\n      let f = src[position++];\n      let g = src[position++];\n      let h = src[position++];\n      if ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n        position -= 8;\n        return;\n      }\n      if (length < 10) {\n        if (length === 8) {\n          return fromCharCode(a, b, c, d, e, f, g, h);\n        } else {\n          let i = src[position++];\n          if ((i & 0x80) > 0) {\n            position -= 9;\n            return;\n          }\n          return fromCharCode(a, b, c, d, e, f, g, h, i);\n        }\n      } else if (length < 12) {\n        let i = src[position++];\n        let j = src[position++];\n        if ((i & 0x80) > 0 || (j & 0x80) > 0) {\n          position -= 10;\n          return;\n        }\n        if (length < 11) {\n          return fromCharCode(a, b, c, d, e, f, g, h, i, j);\n        }\n        let k = src[position++];\n        if ((k & 0x80) > 0) {\n          position -= 11;\n          return;\n        }\n        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);\n      } else {\n        let i = src[position++];\n        let j = src[position++];\n        let k = src[position++];\n        let l = src[position++];\n        if ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n          position -= 12;\n          return;\n        }\n        if (length < 14) {\n          if (length === 12) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);\n          } else {\n            let m = src[position++];\n            if ((m & 0x80) > 0) {\n              position -= 13;\n              return;\n            }\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);\n          }\n        } else {\n          let m = src[position++];\n          let n = src[position++];\n          if ((m & 0x80) > 0 || (n & 0x80) > 0) {\n            position -= 14;\n            return;\n          }\n          if (length < 15) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n          }\n          let o = src[position++];\n          if ((o & 0x80) > 0) {\n            position -= 15;\n            return;\n          }\n          return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n        }\n      }\n    }\n  }\n}\nfunction readBin(length) {\n  return currentDecoder.copyBuffers ?\n  // specifically use the copying slice (not the node one)\n  Uint8Array.prototype.slice.call(src, position, position += length) : src.subarray(position, position += length);\n}\nlet f32Array = new Float32Array(1);\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4);\nfunction getFloat16() {\n  let byte0 = src[position++];\n  let byte1 = src[position++];\n  let exponent = (byte0 & 0x7f) >> 2;\n  if (exponent === 0x1f) {\n    // specials\n    if (byte1 || byte0 & 3) {\n      return NaN;\n    }\n    return byte0 & 0x80 ? -Infinity : Infinity;\n  }\n  if (exponent === 0) {\n    // sub-normals\n    // significand with 10 fractional bits and divided by 2^14\n    let abs = ((byte0 & 3) << 8 | byte1) / (1 << 24);\n    return byte0 & 0x80 ? -abs : abs;\n  }\n  u8Array[3] = byte0 & 0x80 |\n  // sign bit\n  (exponent >> 1) + 56; // 4 of 5 of the exponent bits, re-offset-ed\n  u8Array[2] = (byte0 & 7) << 5 |\n  // last exponent bit and first two mantissa bits\n  byte1 >> 3; // next 5 bits of mantissa\n  u8Array[1] = byte1 << 5; // last three bits of mantissa\n  u8Array[0] = 0;\n  return f32Array[0];\n}\nclass Tag {\n  constructor(value, tag) {\n    this.value = value;\n    this.tag = tag;\n  }\n}\ncurrentExtensions[0] = dateString => {\n  // string date extension\n  return new Date(dateString);\n};\ncurrentExtensions[1] = epochSec => {\n  // numeric date extension\n  return new Date(Math.round(epochSec * 1000));\n};\ncurrentExtensions[2] = buffer => {\n  // bigint extension\n  let value = BigInt(0);\n  for (let i = 0, l = buffer.byteLength; i < l; i++) {\n    value = BigInt(buffer[i]) + value << BigInt(8);\n  }\n  return value;\n};\ncurrentExtensions[3] = buffer => {\n  // negative bigint extension\n  return BigInt(-1) - currentExtensions[2](buffer);\n};\ncurrentExtensions[4] = fraction => {\n  // best to reparse to maintain accuracy\n  return Number(fraction[1] + \"e\" + fraction[0]);\n};\ncurrentExtensions[5] = fraction => {\n  // probably not sufficiently accurate\n  return fraction[1] * Math.exp(fraction[0] * Math.log(2));\n};\n\n// the registration of the record definition extension\nconst recordDefinition = definition => {\n  let id = definition[0] - 0xe000;\n  let structure = definition[1];\n  let existingStructure = currentStructures[id];\n  if (existingStructure && existingStructure.isShared) {\n    (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;\n  }\n  currentStructures[id] = structure;\n  structure.read = createStructureReader(structure);\n  let object = {};\n  if (currentDecoder.keyMap) {\n    for (let i = 2, l = definition.length; i < l; i++) {\n      let key = currentDecoder.decodeKey(structure[i - 2]);\n      object[safeKey(key)] = definition[i];\n    }\n  } else {\n    for (let i = 2, l = definition.length; i < l; i++) {\n      let key = structure[i - 2];\n      object[safeKey(key)] = definition[i];\n    }\n  }\n  return object;\n};\ncurrentExtensions[LEGACY_RECORD_INLINE_ID] = recordDefinition;\ncurrentExtensions[14] = value => {\n  if (bundledStrings) {\n    return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);\n  }\n  return new Tag(value, 14);\n};\ncurrentExtensions[15] = value => {\n  if (bundledStrings) {\n    return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);\n  }\n  return new Tag(value, 15);\n};\nlet glbl = {\n  Error,\n  RegExp\n};\ncurrentExtensions[27] = data => {\n  // http://cbor.schmorp.de/generic-object\n  return (glbl[data[0]] || Error)(data[1], data[2]);\n};\nconst packedTable = _read => {\n  if (src[position++] != 0x84) {\n    throw new Error(\"Packed values structure must be followed by a 4 element array\");\n  }\n  let newPackedValues = _read(); // packed values\n  packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;\n  packedValues.prefixes = _read();\n  packedValues.suffixes = _read();\n  return _read(); // read the rump\n};\n\npackedTable.handlesRead = true;\ncurrentExtensions[51] = packedTable;\ncurrentExtensions[PACKED_REFERENCE_TAG_ID] = data => {\n  // packed reference\n  if (!packedValues) {\n    if (currentDecoder.getShared) {\n      loadShared();\n    } else {\n      return new Tag(data, PACKED_REFERENCE_TAG_ID);\n    }\n  }\n  if (typeof data === \"number\") {\n    return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];\n  }\n  throw new Error(\"No support for non-integer packed references yet\");\n};\ncurrentExtensions[25] = id => {\n  return stringRefs[id];\n};\ncurrentExtensions[256] = _read => {\n  stringRefs = [];\n  try {\n    return _read();\n  } finally {\n    stringRefs = null;\n  }\n};\ncurrentExtensions[256].handlesRead = true;\ncurrentExtensions[28] = _read => {\n  // shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n  if (!referenceMap) {\n    referenceMap = new Map();\n    referenceMap.id = 0;\n  }\n  let id = referenceMap.id++;\n  let token = src[position];\n  let target;\n  // TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n  // ahead past references to record structure definitions\n  if (token >> 5 == 4) {\n    target = [];\n  } else {\n    target = {};\n  }\n  let refEntry = {\n    target\n  }; // a placeholder object\n  referenceMap.set(id, refEntry);\n  let targetProperties = _read(); // read the next value as the target object to id\n  if (refEntry.used) {\n    // there is a cycle, so we have to assign properties to original target\n    return Object.assign(target, targetProperties);\n  }\n  refEntry.target = targetProperties; // the placeholder wasn't used, replace with the deserialized one\n  return targetProperties; // no cycle, can just use the returned read object\n};\n\ncurrentExtensions[28].handlesRead = true;\ncurrentExtensions[29] = id => {\n  // sharedref http://cbor.schmorp.de/value-sharing (for structured clones)\n  let refEntry = referenceMap.get(id);\n  refEntry.used = true;\n  return refEntry.target;\n};\ncurrentExtensions[258] = array => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n(currentExtensions[259] = _read => {\n  // https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec\n  // for decoding as a standard Map\n  if (currentDecoder.mapsAsObjects) {\n    currentDecoder.mapsAsObjects = false;\n    restoreMapsAsObject = true;\n  }\n  return _read();\n}).handlesRead = true;\nfunction combine(a, b) {\n  if (typeof a === \"string\") {\n    return a + b;\n  }\n  if (a instanceof Array) {\n    return a.concat(b);\n  }\n  return Object.assign({}, a, b);\n}\nfunction getPackedValues() {\n  if (!packedValues) {\n    if (currentDecoder.getShared) {\n      loadShared();\n    } else {\n      throw new Error(\"No packed values available\");\n    }\n  }\n  return packedValues;\n}\nconst SHARED_DATA_TAG_ID = 0x53687264; // ascii 'Shrd'\ncurrentExtensionRanges.push((tag, input) => {\n  if (tag >= 225 && tag <= 255) {\n    return combine(getPackedValues().prefixes[tag - 224], input);\n  }\n  if (tag >= 28704 && tag <= 32767) {\n    return combine(getPackedValues().prefixes[tag - 28672], input);\n  }\n  if (tag >= 1879052288 && tag <= 2147483647) {\n    return combine(getPackedValues().prefixes[tag - 1879048192], input);\n  }\n  if (tag >= 216 && tag <= 223) {\n    return combine(input, getPackedValues().suffixes[tag - 216]);\n  }\n  if (tag >= 27647 && tag <= 28671) {\n    return combine(input, getPackedValues().suffixes[tag - 27639]);\n  }\n  if (tag >= 1811940352 && tag <= 1879048191) {\n    return combine(input, getPackedValues().suffixes[tag - 1811939328]);\n  }\n  if (tag == SHARED_DATA_TAG_ID) {\n    // we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n    return {\n      packedValues: packedValues,\n      structures: currentStructures.slice(0),\n      version: input\n    };\n  }\n  if (tag == 55799) {\n    // self-descriptive CBOR tag, just return input value\n    return input;\n  }\n});\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;\nconst typedArrays = [Uint8Array];\nconst typedArrayTags = [64];\nfor (let i = 0; i < typedArrays.length; i++) {\n  registerTypedArray(typedArrays[i], typedArrayTags[i]);\n}\nfunction registerTypedArray(TypedArray, tag) {\n  let dvMethod = \"get\" + TypedArray.name.slice(0, -5);\n  if (typeof TypedArray !== \"function\") {\n    TypedArray = null;\n  }\n  let bytesPerElement = TypedArray.BYTES_PER_ELEMENT;\n  for (let littleEndian = 0; littleEndian < 2; littleEndian++) {\n    if (!littleEndian && bytesPerElement == 1) {\n      continue;\n    }\n    let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3;\n    currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? buffer => {\n      if (!TypedArray) {\n        throw new Error(\"Could not find typed array for code \" + tag);\n      }\n      // we have to always slice/copy here to get a new ArrayBuffer that is word/byte aligned\n      return new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer);\n    } : buffer => {\n      if (!TypedArray) {\n        throw new Error(\"Could not find typed array for code \" + tag);\n      }\n      let dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n      let elements = buffer.length >> sizeShift;\n      let ta = new TypedArray(elements);\n      let method = dv[dvMethod];\n      for (let i = 0; i < elements; i++) {\n        ta[i] = method.call(dv, i << sizeShift, littleEndian);\n      }\n      return ta;\n    };\n  }\n}\nfunction readBundleExt() {\n  let length = readJustLength();\n  let bundlePosition = position + read();\n  for (let i = 2; i < length; i++) {\n    // skip past bundles that were already read\n    let bundleLength = readJustLength(); // this will increment position, so must add to position afterwards\n    position += bundleLength;\n  }\n  let dataPosition = position;\n  position = bundlePosition;\n  bundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())];\n  bundledStrings.position0 = 0;\n  bundledStrings.position1 = 0;\n  bundledStrings.postBundlePosition = position;\n  position = dataPosition;\n  return read();\n}\nfunction readJustLength() {\n  let token = src[position++] & 0x1f;\n  if (token > 0x17) {\n    switch (token) {\n      case 0x18:\n        token = src[position++];\n        break;\n      case 0x19:\n        token = dataView.getUint16(position);\n        position += 2;\n        break;\n      case 0x1a:\n        token = dataView.getUint32(position);\n        position += 4;\n        break;\n    }\n  }\n  return token;\n}\nfunction loadShared() {\n  if (currentDecoder.getShared) {\n    let sharedData = saveState(() => {\n      // save the state in case getShared modifies our buffer\n      src = null;\n      return currentDecoder.getShared();\n    }) || {};\n    let updatedStructures = sharedData.structures || [];\n    currentDecoder.sharedVersion = sharedData.version;\n    packedValues = currentDecoder.sharedValues = sharedData.packedValues;\n    if (currentStructures === true) {\n      currentDecoder.structures = currentStructures = updatedStructures;\n    } else {\n      currentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures));\n    }\n  }\n}\nfunction saveState(callback) {\n  let savedSrcEnd = srcEnd;\n  let savedPosition = position;\n  let savedSrcStringStart = srcStringStart;\n  let savedSrcStringEnd = srcStringEnd;\n  let savedSrcString = srcString;\n  let savedReferenceMap = referenceMap;\n  let savedBundledStrings = bundledStrings;\n\n  // TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n  let savedSrc = new Uint8Array(src.slice(0, srcEnd)); // we copy the data in case it changes while external data is processed\n  let savedStructures = currentStructures;\n  let savedDecoder = currentDecoder;\n  let savedSequentialMode = sequentialMode;\n  let value = callback();\n  srcEnd = savedSrcEnd;\n  position = savedPosition;\n  srcStringStart = savedSrcStringStart;\n  srcStringEnd = savedSrcStringEnd;\n  srcString = savedSrcString;\n  referenceMap = savedReferenceMap;\n  bundledStrings = savedBundledStrings;\n  src = savedSrc;\n  sequentialMode = savedSequentialMode;\n  currentStructures = savedStructures;\n  currentDecoder = savedDecoder;\n  dataView = new DataView(src.buffer, src.byteOffset, src.byteLength);\n  return value;\n}\nfunction clearSource() {\n  src = null;\n  referenceMap = null;\n  currentStructures = null;\n}\nconst mult10 = new Array(147); // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor (let i = 0; i < 256; i++) {\n  mult10[i] = Number(\"1e\" + Math.floor(45.15 - i * 0.30103));\n}\nconst defaultDecoder = new Decoder({\n  useRecords: false\n});\nconst decode = defaultDecoder.decode;\n\n/**\n * @internal\n * @param abi\n * @param feature\n */\nfunction matchesAbiInterface(abi, feature) {\n  // returns true if all the functions in `interfaceToMatch` are found in `contract` (removing any duplicates)\n  return hasMatchingAbi(abi, feature.abis);\n}\n\n/**\n * @internal\n * @param contractWrapper\n * @param abi\n * @returns\n */\nfunction matchesPrebuiltAbi(contractWrapper, abi) {\n  return hasMatchingAbi(contractWrapper.abi, [abi]);\n}\n\n/**\n * @internal\n * @param contractAbi\n * @param featureAbis\n * @returns\n */\nfunction hasMatchingAbi(contractAbi, featureAbis) {\n  const contractFn = extractFunctionsFromAbi(contractAbi);\n  const interfaceFn = featureAbis.flatMap(i => extractFunctionsFromAbi(i));\n  // match every function and their arguments\n  const intersection = contractFn.filter(fn => {\n    const match = interfaceFn.find(iFn => iFn.name === fn.name && iFn.inputs.length === fn.inputs.length && iFn.inputs.every((i, index) => {\n      if (i.type === \"tuple\" || i.type === \"tuple[]\") {\n        // check that all properties in the tuple are the same type\n        return i.type === fn.inputs[index].type && i.components?.every((c, cIndex) => {\n          return c.type === fn.inputs[index].components?.[cIndex]?.type;\n        });\n      }\n      return i.type === fn.inputs[index].type;\n    }));\n    return match !== undefined;\n  });\n  return intersection.length === interfaceFn.length;\n}\n\n/**\n * @internal\n */\nasync function extractConstructorParams(predeployMetadataUri, storage) {\n  const meta = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractConstructorParamsFromAbi(meta.abi);\n}\n\n/**\n * @internal\n * @param predeployMetadataUri\n * @param storage\n */\nasync function extractFunctions(predeployMetadataUri, storage) {\n  const metadata = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractFunctionsFromAbi(metadata.abi, metadata.metadata);\n}\n\n/**\n * @internal\n * @param name\n * @param metadata\n * @param type\n */\nfunction extractCommentFromMetadata(name, metadata, type) {\n  return metadata?.output?.userdoc?.[type]?.[Object.keys(metadata?.output?.userdoc[type] || {}).find(fn => fn.includes(name || \"unknown\")) || \"\"]?.notice || metadata?.output?.devdoc?.[type]?.[Object.keys(metadata?.output?.devdoc[type] || {}).find(fn => fn.includes(name || \"unknown\")) || \"\"]?.details;\n}\n\n/**\n *\n * @param abi\n * @returns\n * @internal\n */\nfunction extractConstructorParamsFromAbi(abi) {\n  for (const input of abi) {\n    if (input.type === \"constructor\") {\n      return input.inputs || [];\n    }\n  }\n  return [];\n}\n\n/**\n *\n * @param abi\n * @param functionName\n * @returns\n * @internal\n */\nfunction extractFunctionParamsFromAbi(abi, functionName) {\n  for (const input of abi) {\n    if (input.type === \"function\" && input.name === functionName) {\n      return input.inputs || [];\n    }\n  }\n  return [];\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nfunction extractFunctionsFromAbi(abi, metadata) {\n  const functions = (abi || []).filter(el => el.type === \"function\");\n  const parsed = [];\n  for (const f of functions) {\n    const doc = extractCommentFromMetadata(f.name, metadata, \"methods\");\n    const args = f.inputs?.map(i => `${i.name || \"key\"}: ${toJSType(i)}`)?.join(\", \") || \"\";\n    const fargs = args ? `, ${args}` : \"\";\n    const out = f.outputs?.map(o => toJSType(o, true))?.join(\", \");\n    const promise = out ? `: Promise<${out}>` : `: Promise<TransactionResult>`;\n    const signature = `contract.call(\"${f.name}\"${fargs})${promise}`;\n    parsed.push({\n      inputs: f.inputs || [],\n      outputs: f.outputs || [],\n      name: f.name || \"unknown\",\n      signature,\n      stateMutability: f.stateMutability || \"\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nfunction extractEventsFromAbi(abi, metadata) {\n  const events = (abi || []).filter(el => el.type === \"event\");\n  const parsed = [];\n  for (const e of events) {\n    const doc = extractCommentFromMetadata(e.name, metadata, \"events\");\n    parsed.push({\n      inputs: e.inputs || [],\n      outputs: e.outputs || [],\n      name: e.name || \"unknown\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\nfunction toJSType(contractType) {\n  let isReturnType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let withName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let jsType = contractType.type;\n  let isArray = false;\n  if (jsType.endsWith(\"[]\")) {\n    isArray = true;\n    jsType = jsType.slice(0, -2);\n  }\n  if (jsType.startsWith(\"bytes\")) {\n    jsType = \"BytesLike\";\n  }\n  if (jsType.startsWith(\"uint\") || jsType.startsWith(\"int\")) {\n    jsType = isReturnType ? \"BigNumber\" : \"BigNumberish\";\n  }\n  if (jsType.startsWith(\"bool\")) {\n    jsType = \"boolean\";\n  }\n  if (jsType === \"address\") {\n    jsType = \"string\";\n  }\n  if (jsType === \"tuple\") {\n    if (contractType.components) {\n      jsType = `{ ${contractType.components.map(a => toJSType(a, false, true)).join(\", \")} }`;\n    }\n  }\n  if (isArray) {\n    jsType += \"[]\";\n  }\n  if (withName) {\n    jsType = `${contractType.name}: ${jsType}`;\n  }\n  return jsType;\n}\n\n/**\n * @internal\n * @param bytecode\n */\nfunction extractMinimalProxyImplementationAddress(bytecode) {\n  // EIP-1167 clone minimal proxy - https://eips.ethereum.org/EIPS/eip-1167\n  if (bytecode.startsWith(\"0x363d3d373d3d3d363d73\")) {\n    const implementationAddress = bytecode.slice(22, 62);\n    return `0x${implementationAddress}`;\n  }\n\n  // Minimal Proxy with receive() from 0xSplits - https://github.com/0xSplits/splits-contracts/blob/c7b741926ec9746182d0d1e2c4c2046102e5d337/contracts/libraries/Clones.sol\n  if (bytecode.startsWith(\"0x36603057343d5230\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(122, 122 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // 0age's minimal proxy - https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\n  if (bytecode.startsWith(\"0x3d3d3d3d363d3d37363d73\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(24, 24 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // vyper's minimal proxy (uniswap v1) - https://etherscan.io/address/0x09cabec1ead1c0ba254b09efb3ee13841712be14#code\n  if (bytecode.startsWith(\"0x366000600037611000600036600073\")) {\n    const implementationAddress = bytecode.slice(32, 32 + 40);\n    return `0x${implementationAddress}`;\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n */\nasync function resolveContractUriFromAddress(address, provider) {\n  const bytecode = await provider.getCode(address);\n  if (bytecode === \"0x\") {\n    const chain = await provider.getNetwork();\n    throw new Error(`Contract at ${address} does not exist on chain '${chain.name}' (chainId: ${chain.chainId})`);\n  }\n  try {\n    const implementationAddress = extractMinimalProxyImplementationAddress(bytecode);\n    if (implementationAddress) {\n      return await resolveContractUriFromAddress(implementationAddress, provider);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // EIP-1967 proxy storage slots - https://eips.ethereum.org/EIPS/eip-1967\n  try {\n    const proxyStorage = await provider.getStorageAt(address, ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(\"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\"));\n    const implementationAddress = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hexStripZeros(proxyStorage);\n    if (implementationAddress !== \"0x\") {\n      return await resolveContractUriFromAddress(implementationAddress, provider);\n    }\n  } catch (e) {\n    // ignore\n  }\n  // TODO support other types of proxies\n  return await extractIPFSHashFromBytecode(bytecode);\n}\n\n/**\n * @internal\n * @param bytecode\n */\nfunction extractIPFSHashFromBytecode(bytecode) {\n  const numericBytecode = hexToBytes(bytecode);\n  const cborLength = numericBytecode[numericBytecode.length - 2] * 0x100 + numericBytecode[numericBytecode.length - 1];\n  const bytecodeBuffer = Uint8Array.from(numericBytecode.slice(numericBytecode.length - 2 - cborLength, -2));\n  const cborData = decode(bytecodeBuffer);\n  if (\"ipfs\" in cborData && cborData[\"ipfs\"]) {\n    try {\n      return `ipfs://${bs58__WEBPACK_IMPORTED_MODULE_37___default().encode(cborData[\"ipfs\"])}`;\n    } catch (e) {\n      console.warn(\"feature-detection ipfs cbor failed\", e);\n    }\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * @param hex\n */\nfunction hexToBytes(hex) {\n  hex = hex.toString(16);\n  if (!hex.startsWith(\"0x\")) {\n    hex = `0x${hex}`;\n  }\n  if (!isHexStrict(hex)) {\n    throw new Error(`Given value \"${hex}\" is not a valid hex string.`);\n  }\n  hex = hex.replace(/^0x/i, \"\");\n  const bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.slice(c, c + 2), 16));\n  }\n  return bytes;\n}\n\n/**\n * @internal\n * @param hex\n */\nfunction isHexStrict(hex) {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex.toString());\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n * @param storage\n */\nasync function fetchContractMetadataFromAddress(address, provider, storage) {\n  const compilerMetadataUri = await resolveContractUriFromAddress(address, provider);\n  if (!compilerMetadataUri) {\n    throw new Error(`Could not resolve metadata for contract at ${address}`);\n  }\n  return await fetchContractMetadata(compilerMetadataUri, storage);\n}\n\n/**\n * @internal\n * @param compilerMetadataUri\n * @param storage\n */\nasync function fetchContractMetadata(compilerMetadataUri, storage) {\n  const metadata = await storage.downloadJSON(compilerMetadataUri);\n  const abi = AbiSchema.parse(metadata.output.abi);\n  const compilationTarget = metadata.settings.compilationTarget;\n  const targets = Object.keys(compilationTarget);\n  const name = compilationTarget[targets[0]];\n  const info = ContractInfoSchema.parse({\n    title: metadata.output.devdoc.title,\n    author: metadata.output.devdoc.author,\n    details: metadata.output.devdoc.detail,\n    notice: metadata.output.userdoc.notice\n  });\n  const licenses = [...new Set(Object.entries(metadata.sources).map(_ref => {\n    let [, src] = _ref;\n    return src.license;\n  }))];\n  return {\n    name,\n    abi,\n    metadata,\n    info,\n    licenses\n  };\n}\n\n/**\n * @internal\n * @param publishedMetadata\n * @param storage\n */\nasync function fetchSourceFilesFromMetadata(publishedMetadata, storage) {\n  return await Promise.all(Object.entries(publishedMetadata.metadata.sources).map(async _ref2 => {\n    let [path, info] = _ref2;\n    const urls = info.urls;\n    const ipfsLink = urls ? urls.find(url => url.includes(\"ipfs\")) : undefined;\n    if (ipfsLink) {\n      const ipfsHash = ipfsLink.split(\"ipfs/\")[1];\n      // 5 sec timeout for sources that haven't been uploaded to ipfs\n      const timeout = new Promise((_r, rej) => setTimeout(() => rej(\"timeout\"), 5000));\n      const source = await Promise.race([(await storage.download(`ipfs://${ipfsHash}`)).text(), timeout]);\n      return {\n        filename: path,\n        source\n      };\n    } else {\n      return {\n        filename: path,\n        source: info.content || \"Could not find source for this contract\"\n      };\n    }\n  }));\n}\n\n/**\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchRawPredeployMetadata(publishMetadataUri, storage) {\n  return PreDeployMetadata.parse(JSON.parse(await (await storage.download(publishMetadataUri)).text()));\n}\n\n/**\n * Fetch the metadata coming from CLI, this is before deploying or releasing the contract.\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchPreDeployMetadata(publishMetadataUri, storage) {\n  const rawMeta = await fetchRawPredeployMetadata(publishMetadataUri, storage);\n  const deployBytecode = await (await storage.download(rawMeta.bytecodeUri)).text();\n  const parsedMeta = await fetchContractMetadata(rawMeta.metadataUri, storage);\n  return PreDeployMetadataFetchedSchema.parse({\n    ...rawMeta,\n    ...parsedMeta,\n    bytecode: deployBytecode\n  });\n}\n\n/**\n * Fetch and parse the full metadata AFTER creating a release, with all the extra information (version, readme, etc)\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchExtendedReleaseMetadata(publishMetadataUri, storage) {\n  const meta = await (await storage.download(publishMetadataUri)).text();\n  return FullPublishMetadataSchemaOutput.parse(JSON.parse(meta));\n}\n\n/**\n * Processes ALL supported features and sets whether the passed in abi supports each individual feature\n * @internal\n * @param abi\n * @param features\n * @returns the nested struct of all features and whether they're detected in the abi\n */\nfunction detectFeatures(abi) {\n  let features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUPPORTED_FEATURES;\n  const results = {};\n  for (const featureKey in features) {\n    const feature = features[featureKey];\n    const enabled = matchesAbiInterface(abi, feature);\n    const childResults = detectFeatures(abi, feature.features);\n    results[featureKey] = {\n      ...feature,\n      features: childResults,\n      enabled\n    };\n  }\n  return results;\n}\nfunction extractFeatures(input, enabledExtensions) {\n  if (!input) {\n    return;\n  }\n  for (const extensionKey in input) {\n    const extension = input[extensionKey];\n    // if extension is enabled, then add it to enabledFeatures\n    if (extension.enabled) {\n      enabledExtensions.push(extension);\n    }\n    // recurse\n    extractFeatures(extension.features, enabledExtensions);\n  }\n}\n\n/**\n * Return all the detected features in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected extensions with full information on each feature\n * @public\n */\nfunction getAllDetectedFeatures(abi) {\n  const features = [];\n  extractFeatures(detectFeatures(abi), features);\n  return features;\n}\n\n/**\n * Return all the detected features names in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected features names\n * @public\n */\nfunction getAllDetectedFeatureNames(abi) {\n  const features = [];\n  extractFeatures(detectFeatures(abi), features);\n  return features.map(f => f.name);\n}\n\n/**\n * Checks whether the given ABI supports a given feature\n * @internal\n * @param abi\n * @param featureName\n */\nfunction isFeatureEnabled(abi, featureName) {\n  const features = detectFeatures(abi);\n  return _featureEnabled(features, featureName);\n}\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace The namespace to check\n * @param feature The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper\n * @param featureName\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  return isFeatureEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * Searches the feature map for featureName and returns whether its enabled\n * @internal\n * @param features\n * @param featureName\n */\nfunction _featureEnabled(features, featureName) {\n  const keys = Object.keys(features);\n  if (!keys.includes(featureName)) {\n    let found = false;\n    for (const key of keys) {\n      const f = features[key];\n      found = _featureEnabled(f.features, featureName);\n      if (found) {\n        break;\n      }\n    }\n    return found;\n  }\n  const feature = features[featureName];\n  return feature.enabled;\n}\n\n/**\n * @internal\n * @param contractWrapper\n * @param functionName\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\nconst MAX_LENGTH = 256;\nconst NUMERIC_IDENTIFIER = \"0|[1-9]\\\\d*\";\nconst MAIN_VERSION_IDENTIFIER = `(${NUMERIC_IDENTIFIER})\\\\.(${NUMERIC_IDENTIFIER})\\\\.(${NUMERIC_IDENTIFIER})`;\nconst REGEX_MAIN_VERSION = new RegExp(MAIN_VERSION_IDENTIFIER);\n\n/**\n * @internal\n */\n\n/**\n * @internal\n * @param version\n */\nfunction toSemver(version) {\n  if (version.length > MAX_LENGTH) {\n    throw new Error(`version is longer than ${MAX_LENGTH} characters`);\n  }\n  const matches = version.trim().match(REGEX_MAIN_VERSION);\n  if (!matches || matches?.length !== 4) {\n    throw new Error(`${version} is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1`);\n  }\n  const major = Number(matches[1]);\n  const minor = Number(matches[2]);\n  const patch = Number(matches[3]);\n  const versionString = [major, minor, patch].join(\".\");\n  return {\n    major,\n    minor,\n    patch,\n    versionString\n  };\n}\n\n/**\n * @internal\n * @param current\n * @param next\n */\nfunction isIncrementalVersion(current, next) {\n  const currentSemver = toSemver(current);\n  const nextSemver = toSemver(next);\n  if (nextSemver.major > currentSemver.major) {\n    return true;\n  }\n  const eqMajor = nextSemver.major === currentSemver.major;\n  if (eqMajor && nextSemver.minor > currentSemver.minor) {\n    return true;\n  }\n  const eqMinor = nextSemver.minor === currentSemver.minor;\n  return eqMajor && eqMinor && nextSemver.patch > currentSemver.patch;\n}\nfunction isDowngradeVersion(current, next) {\n  const currentSemver = toSemver(current);\n  const nextSemver = toSemver(next);\n  if (nextSemver.major < currentSemver.major) {\n    return true;\n  }\n  const eqMajor = nextSemver.major === currentSemver.major;\n  if (eqMajor && nextSemver.minor < currentSemver.minor) {\n    return true;\n  }\n  const eqMinor = nextSemver.minor === currentSemver.minor;\n  return eqMajor && eqMinor && nextSemver.patch < currentSemver.patch;\n}\n\n/**\n * @internal\n */\nconst BYOCContractMetadataSchema = CommonContractSchema.catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.union([BigNumberTransformSchema, zod__WEBPACK_IMPORTED_MODULE_57__.z.unknown()]));\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst CustomContractInput = BYOCContractMetadataSchema.merge(CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial());\n\n/**\n * @internal\n */\nconst CustomContractOutput = CommonContractOutputSchema.merge(CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial());\n\n/**\n * @internal\n */\nconst CustomContractDeploy = CustomContractInput.merge(CommonPlatformFeeSchema.merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema).partial());\n\n/**\n * @internal\n */\nconst CustomContractSchema = {\n  deploy: CustomContractDeploy,\n  output: CustomContractOutput,\n  input: CustomContractInput\n};\n\n/**\n * @internal\n */\nconst AbiTypeBaseSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.any());\n\n/**\n * @internal\n */\nconst AbiTypeSchema = AbiTypeBaseSchema.extend({\n  stateMutability: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  components: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(AbiTypeBaseSchema).optional()\n}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.any());\n\n/**\n * @internal\n */\nconst AbiObjectSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default(\"\"),\n  inputs: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(AbiTypeSchema).default([]),\n  outputs: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(AbiTypeSchema).default([])\n}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.any());\n\n/**\n * @internal\n */\nconst AbiSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.array(AbiObjectSchema);\n/**\n * @internal\n */\nconst PreDeployMetadata = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  metadataUri: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  bytecodeUri: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  analytics: zod__WEBPACK_IMPORTED_MODULE_57__.z.any().optional()\n}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.any());\n\n/**\n * @internal\n */\nconst ChainIdToAddressSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.record(zod__WEBPACK_IMPORTED_MODULE_57__.z.string(), zod__WEBPACK_IMPORTED_MODULE_57__.z.string());\n\n/**\n * @internal\n */\nconst FactoryDeploymentSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  implementationAddresses: ChainIdToAddressSchema,\n  implementationInitializerFunction: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default(\"initialize\"),\n  factoryAddresses: ChainIdToAddressSchema.optional()\n});\n\n/**\n * @internal\n */\nconst ExtraPublishMetadataSchemaInput = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  version: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().refine(v => {\n    try {\n      toSemver(v);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }, out => {\n    return {\n      message: `'${out}' is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1`\n    };\n  }),\n  displayName: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  description: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  readme: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  license: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  changelog: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  tags: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()).optional(),\n  audit: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.F.nullable().optional(),\n  logo: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.F.nullable().optional(),\n  isDeployableViaFactory: zod__WEBPACK_IMPORTED_MODULE_57__.z.boolean().optional(),\n  isDeployableViaProxy: zod__WEBPACK_IMPORTED_MODULE_57__.z.boolean().optional(),\n  factoryDeploymentData: FactoryDeploymentSchema.optional(),\n  constructorParams: zod__WEBPACK_IMPORTED_MODULE_57__.z.record(zod__WEBPACK_IMPORTED_MODULE_57__.z.string(), zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n    displayName: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n    description: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n    defaultValue: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional()\n  }).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.any())).optional()\n}).catchall(zod__WEBPACK_IMPORTED_MODULE_57__.z.any());\n\n/**\n * @internal\n */\nconst ExtraPublishMetadataSchemaOutput = ExtraPublishMetadataSchemaInput.extend({\n  audit: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().nullable().optional(),\n  logo: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().nullable().optional()\n});\n/**\n * @internal\n */\nconst FullPublishMetadataSchemaInput = PreDeployMetadata.merge(ExtraPublishMetadataSchemaInput).extend({\n  publisher: AddressSchema.optional()\n});\n/**\n * @internal\n */\nconst FullPublishMetadataSchemaOutput = PreDeployMetadata.merge(ExtraPublishMetadataSchemaOutput).extend({\n  publisher: AddressSchema.optional()\n});\n/**\n * @internal\n */\nconst ProfileSchemaInput = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  bio: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  avatar: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.F.nullable().optional(),\n  website: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  twitter: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  telegram: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  facebook: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  github: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  medium: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  linkedin: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  reddit: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  discord: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional()\n});\nconst ProfileSchemaOutput = ProfileSchemaInput.extend({\n  avatar: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().nullable().optional()\n});\n/**\n * @internal\n */\nconst PublishedContractSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  timestamp: BigNumberishSchema,\n  metadataUri: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n});\n\n/**\n * @internal\n * Follows https://docs.soliditylang.org/en/v0.8.15/natspec-format.html\n */\nconst ContractInfoSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  title: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  author: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  details: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional(),\n  notice: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional()\n});\n\n/**\n * @internal\n */\nconst CompilerMetadataFetchedSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_57__.z.string(),\n  abi: AbiSchema,\n  metadata: zod__WEBPACK_IMPORTED_MODULE_57__.z.record(zod__WEBPACK_IMPORTED_MODULE_57__.z.string(), zod__WEBPACK_IMPORTED_MODULE_57__.z.any()),\n  info: ContractInfoSchema,\n  licenses: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string().optional()).default([]).transform(v => {\n    return v.filter(license => license !== undefined);\n  })\n});\n\n/**\n * @internal\n */\nconst PreDeployMetadataFetchedSchema = PreDeployMetadata.merge(CompilerMetadataFetchedSchema).extend({\n  bytecode: zod__WEBPACK_IMPORTED_MODULE_57__.z.string()\n});\n\n/**\n * Wallet Authenticator\n * @remarks The wallet authenticator enables server-side applications to securely identify the\n * connected wallet address of users on the client-side, and also enables users to authenticate\n * to any backend using just their wallet. It implements the JSON Web Token (JWT) authentication\n * standard.\n *\n * @example\n * ```javascript\n * // We specify the domain of the application to authenticate to\n * const domain = \"example.com\"\n *\n * // On the client side, we can generate a payload for the connected wallet to login\n * const loginPayload = await sdk.auth.login(domain);\n *\n * // Then on the server side, we can securely verify the connected client-side address\n * const address = sdk.auth.verify(domain, loginPayload);\n *\n * // And we can also generate an authentication token to send to the client\n * const token = sdk.auth.generate(domain, loginPayload);\n *\n * // Finally, the token can be send from the client to the server to make authenticated requests\n * // And the server can use the following function to authenticate a token and verify the associated address\n * const address = sdk.auth.authenticate(domain, token);\n * ```\n * @public\n */\nclass WalletAuthenticator extends RPCConnectionHandler {\n  constructor(network, wallet, options) {\n    super(network, options);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"wallet\", void 0);\n    this.wallet = wallet;\n  }\n\n  /**\n   * Login With Connected Wallet\n   * @remarks Client-side function that allows the connected wallet to login to a server-side application.\n   * Generates a login payload that can be sent to the server-side for verification or authentication.\n   *\n   * @param domain - The domain of the server-side application to login to\n   * @param options - Optional configuration options for the login request\n   * @returns Login payload that can be used on the server-side to verify the login request or authenticate\n   *\n   * @example\n   * ```javascript\n   * // Add the domain of the application users will login to, this will be used throughout the login process\n   * const domain = \"example.com\";\n   * // Generate a signed login payload for the connected wallet to authenticate with\n   * const loginPayload = await sdk.auth.login(domain);\n   * ```\n   */\n  async login(domain, options) {\n    const parsedOptions = LoginOptionsSchema.parse(options);\n    const signerAddress = await this.wallet.getAddress();\n    const expirationTime = parsedOptions?.expirationTime || new Date(Date.now() + 1000 * 60 * 5);\n    const payloadData = LoginPayloadDataSchema.parse({\n      domain,\n      address: signerAddress,\n      nonce: parsedOptions?.nonce,\n      expiration_time: expirationTime,\n      chain_id: parsedOptions?.chainId\n    });\n    const message = this.generateMessage(payloadData);\n    const signature = await this.wallet.sign(message);\n    return {\n      payload: payloadData,\n      signature\n    };\n  }\n\n  /**\n   * Verify Logged In Address\n   * @remarks Server-side function to securely verify the address of the logged in client-side wallet\n   * by validating the provided client-side login request.\n   *\n   * @param domain - The domain of the server-side application to verify the login request for\n   * @param payload - The login payload to verify\n   * @returns Address of the logged in wallet\n   *\n   * @example\n   * ```javascript\n   * const domain = \"example.com\";\n   * const loginPayload = await sdk.auth.login(domain);\n   *\n   * // Verify the login request\n   * const address = sdk.auth.verify(domain, loginPayload);\n   * ```\n   */\n  verify(domain, payload, options) {\n    const parsedOptions = VerifyOptionsSchema.parse(options);\n\n    // Check that the intended domain matches the domain of the payload\n    if (payload.payload.domain !== domain) {\n      throw new Error(`Expected domain '${domain}' does not match domain on payload '${payload.payload.domain}'`);\n    }\n\n    // Check that the payload hasn't expired\n    const currentTime = new Date();\n    if (currentTime > new Date(payload.payload.expiration_time)) {\n      throw new Error(`Login request has expired`);\n    }\n\n    // If chain ID is specified, check that it matches the chain ID of the signature\n    if (parsedOptions?.chainId !== undefined && parsedOptions.chainId !== payload.payload.chain_id) {\n      throw new Error(`Chain ID '${parsedOptions.chainId}' does not match payload chain ID '${payload.payload.chain_id}'`);\n    }\n\n    // Check that the signing address is the claimed wallet address\n    const message = this.generateMessage(payload.payload);\n    const userAddress = this.wallet.recoverAddress(message, payload.signature);\n    if (userAddress.toLowerCase() !== payload.payload.address.toLowerCase()) {\n      throw new Error(`Signer address '${userAddress.toLowerCase()}' does not match payload address '${payload.payload.address.toLowerCase()}'`);\n    }\n    return userAddress;\n  }\n\n  /**\n   * Generate Authentication Token\n   * @remarks Server-side function that generates a JWT token from the provided login request that the\n   * client-side wallet can use to authenticate to the server-side application.\n   *\n   * @param domain - The domain of the server-side application to authenticate to\n   * @param payload - The login payload to authenticate with\n   * @param options - Optional configuration options for the authentication request\n   * @returns A authentication token that can be used by the client to make authenticated requests\n   *\n   * @example\n   * ```javascript\n   * const domain = \"example.com\";\n   * const loginPayload = await sdk.auth.login(domain);\n   *\n   * // Generate a JWT token that can be sent to the client-side wallet and used for authentication\n   * const token = await sdk.auth.generateAuthToken(domain, loginPayload);\n   * ```\n   */\n  async generateAuthToken(domain, payload, options) {\n    if (isBrowser()) {\n      throw new Error(\"Authentication tokens should not be generated in the browser, as they must be signed by a server-side admin wallet.\");\n    }\n    const parsedOptions = AuthenticationOptionsSchema.parse(options);\n    const userAddress = this.verify(domain, payload);\n    const adminAddress = await this.wallet.getAddress();\n    const payloadData = AuthenticationPayloadDataSchema.parse({\n      iss: adminAddress,\n      sub: userAddress,\n      aud: domain,\n      nbf: parsedOptions?.invalidBefore || new Date(),\n      exp: parsedOptions?.expirationTime || new Date(Date.now() + 1000 * 60 * 60 * 5),\n      iat: new Date()\n    });\n    const message = JSON.stringify(payloadData);\n    const signature = await this.wallet.sign(message);\n\n    // Header used for JWT token specifying hash algorithm\n    const header = {\n      // Specify ECDSA with SHA-256 for hashing algorithm\n      alg: \"ES256\",\n      typ: \"JWT\"\n    };\n    const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\"base64\");\n    const encodedData = Buffer.from(JSON.stringify(payloadData)).toString(\"base64\").replace(/=/g, \"\");\n    const encodedSignature = Buffer.from(signature).toString(\"base64\");\n\n    // Generate a JWT token with base64 encoded header, payload, and signature\n    const token = `${encodedHeader}.${encodedData}.${encodedSignature}`;\n    return token;\n  }\n\n  /**\n   * Authenticate With Token\n   * @remarks Server-side function that authenticates the provided JWT token. This function verifies that\n   * the provided authentication token is valid and returns the address of the authenticated wallet.\n   *\n   * @param domain - The domain of the server-side application doing authentication\n   * @param token - The authentication token being used\n   * @returns The address of the authenticated wallet\n   *\n   * @example\n   * ```javascript\n   * const domain = \"example.com\";\n   * const loginPayload = await sdk.auth.login(domain);\n   * const token = await sdk.auth.generateAuthToken(domain, loginPayload);\n   *\n   * // Authenticate the token and get the address of authenticating users wallet\n   * const address = sdk.auth.authenticate(domain, token);\n   * ```\n   */\n  async authenticate(domain, token) {\n    if (isBrowser()) {\n      throw new Error(\"Should not authenticate tokens in the browser, as they must be verified by the server-side admin wallet.\");\n    }\n    const encodedPayload = token.split(\".\")[1];\n    const encodedSignature = token.split(\".\")[2];\n    const payload = JSON.parse(Buffer.from(encodedPayload, \"base64\").toString());\n    const signature = Buffer.from(encodedSignature, \"base64\").toString();\n\n    // Check that the token audience matches the domain\n    if (payload.aud !== domain) {\n      throw new Error(`Expected token to be for the domain '${domain}', but found token with domain '${payload.aud}'`);\n    }\n\n    // Check that the token is past the invalid before time\n    const currentTime = Math.floor(new Date().getTime() / 1000);\n    if (currentTime < payload.nbf) {\n      throw new Error(`This token is invalid before epoch time '${payload.nbf}', current epoch time is '${currentTime}'`);\n    }\n\n    // Check that the token hasn't expired\n    if (currentTime > payload.exp) {\n      throw new Error(`This token expired at epoch time '${payload.exp}', current epoch time is '${currentTime}'`);\n    }\n\n    // Check that the connected wallet matches the token issuer\n    const connectedAddress = await this.wallet.getAddress();\n    if (connectedAddress.toLowerCase() !== payload.iss.toLowerCase()) {\n      throw new Error(`Expected the connected wallet address '${connectedAddress}' to match the token issuer address '${payload.iss}'`);\n    }\n\n    // Check that the connected wallet signed the token\n    const adminAddress = this.wallet.recoverAddress(JSON.stringify(payload), signature);\n    if (connectedAddress.toLowerCase() !== adminAddress.toLowerCase()) {\n      throw new Error(`The connected wallet address '${connectedAddress}' did not sign the token`);\n    }\n    return payload.sub;\n  }\n\n  /**\n   * Generates a EIP-4361 compliant message to sign based on the login payload\n   */\n  generateMessage(payload) {\n    let message = ``;\n\n    // Add the domain and login address for transparency\n    message += `${payload.domain} wants you to sign in with your account:\\n${payload.address}\\n\\n`;\n\n    // Prompt user to make sure domain is correct to prevent phishing attacks\n    message += `Make sure that the requesting domain above matches the URL of the current website.\\n\\n`;\n\n    // Add data fields in compliance with the EIP-4361 standard\n    if (payload.chain_id) {\n      message += `Chain ID: ${payload.chain_id}\\n`;\n    }\n    message += `Nonce: ${payload.nonce}\\n`;\n    message += `Expiration Time: ${payload.expiration_time}\\n`;\n    return message;\n  }\n}\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\nclass ContractEncoder {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Encodes the given contract function with argument\n   * @returns the encoded data\n   */\n  encode(fn, args) {\n    return this.contractWrapper.readContract.interface.encodeFunctionData(fn, args);\n  }\n\n  /**\n   * Decode encoded call data for a given function\n   * @param fn - the function to decode\n   * @param encodedArgs - the encoded arguments\n   */\n  decode(fn, encodedArgs) {\n    return this.contractWrapper.readContract.interface.decodeFunctionData(fn, encodedArgs);\n  }\n}\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nclass ContractMetadata {\n  constructor(contractWrapper, schema, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_METADATA.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"schema\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parse(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parse(metadata);\n  }\n  /**\n   * Get the metadata of a contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.readContract.contractURI();\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.readContract.name();\n          }\n        } catch (err) {\n          // no-op\n        }\n        const publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.readContract.address, this.contractWrapper.getProvider(), this.storage);\n        data = {\n          name: contractName || publishedMetadata.name,\n          description: publishedMetadata.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n  /**\n   * Set the metadata of a contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *  name: \"My Contract\",\n   *  description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  async set(metadata) {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      const receipt = await wrapper.sendTransaction(\"setContractURI\", [uri]);\n      return {\n        receipt,\n        data: this.get\n      };\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  }\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  async update(metadata) {\n    return await this.set({\n      ...(await this.get()),\n      ...metadata\n    });\n  }\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\nclass ContractRoles {\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_PERMISSIONS.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"roles\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the contract.\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async getAll() {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    for (const role of this.roles) {\n      roles[role] = await this.get(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.readContract.getRoleMemberCount(roleHash)).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.readContract.getRoleMember(roleHash, i)));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\n   *\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requestiong a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  async setAll(rolesWithAddresses) {\n    const roles = Object.keys(rolesWithAddresses);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(roles.length, \"you must provide at least one role to set\");\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const addresses = rolesWithAddresses[role] || [];\n      const currentAddresses = currentRoles[role] || [];\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        for (let j = 0; j < toRemove.length; j++) {\n          const address = toRemove[j];\n          const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n          encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(revokeFunctionName, [getRoleHash(role), address]));\n        }\n      }\n    }\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded)\n    };\n  }\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const members = await this.get(role);\n      if (!members.map(a => a.toLowerCase()).includes(address.toLowerCase())) {\n        throw new MissingRoleError(address, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"0x1234567890123456789012345678901234567890\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async grant(role, address) {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"grantRole\", [getRoleHash(role), address])\n    };\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"0x1234567890123456789012345678901234567890\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async revoke(role, address) {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(revokeFunctionName, [getRoleHash(role), address])\n    };\n  }\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\n/**\n * Handle contract royalties\n * @remarks Configure royalties for an entire contract or a particular token.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n *   seller_fee_basis_points: 100, // 1% royalty fee\n *   fee_recipient: \"0x...\", // the fee recipient\n * });\n * ```\n * @public\n */\nclass ContractRoyalty {\n  constructor(contractWrapper, metadata) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_ROYALTY.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"metadata\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of the contract\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getDefaultRoyaltyInfo() {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.readContract.getDefaultRoyaltyInfo();\n    // parse it on the way out to make sure we default things if they are not set\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of a particular token\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getTokenRoyaltyInfo(tokenId) {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.readContract.getRoyaltyInfoForToken(tokenId);\n    return CommonRoyaltySchema.parse({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n\n  /**\n   * Set the royalty recipient and fee for a contract\n   * @param royaltyData - the royalty recipient and fee\n   *  @example\n   * ```javascript\n   * await contract.roles.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1% royalty fee\n   *   fee_recipient: \"0x...\", // the fee recipient\n   * });\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async setDefaultRoyaltyInfo(royaltyData) {\n    // read the metadata from the contract\n    const oldMetadata = await this.metadata.get();\n\n    // update the metadata with the new royalty data\n    // if one of the keys is \"undefined\" it will be ignored (which is the desired behavior)\n    const mergedMetadata = this.metadata.parseInputMetadata({\n      ...oldMetadata,\n      ...royaltyData\n    });\n\n    // why not use this.metadata.set()? - because that would end up sending it's own separate transaction to `setContractURI`\n    // but we want to send both the `setRoyaltyInfo` and `setContractURI` in one transaction!\n    const contractURI = await this.metadata._parseAndUploadMetadata(mergedMetadata);\n    if (hasFunction(\"setContractURI\", this.contractWrapper)) {\n      // encode both the functions we want to send\n      const encoded = [this.contractWrapper.readContract.interface.encodeFunctionData(\"setDefaultRoyaltyInfo\", [mergedMetadata.fee_recipient, mergedMetadata.seller_fee_basis_points]), this.contractWrapper.readContract.interface.encodeFunctionData(\"setContractURI\", [contractURI])];\n      // actually send the transaction and return the receipt + a way to get the new royalty info\n      return {\n        receipt: await this.contractWrapper.multiCall(encoded),\n        data: () => this.getDefaultRoyaltyInfo()\n      };\n    } else {\n      throw new Error(\"Updating royalties requires implementing ContractMetadata in your contract to support marketplaces like OpenSea.\");\n    }\n  }\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param tokenId - the token id\n   * @param royaltyData - the royalty recipient and fee\n   * @example\n   * ```javascript\n   * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 100, // 1% royalty fee\n   *   fee_recipient: \"0x...\", // the fee recipient\n   * });\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async setTokenRoyaltyInfo(tokenId, royaltyData) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setRoyaltyInfoForToken\", [tokenId, royaltyData.fee_recipient, royaltyData.seller_fee_basis_points]),\n      data: () => this.getDefaultRoyaltyInfo()\n    };\n  }\n}\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_PRIMARY_SALE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient.\n   * @returns the wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    return await this.contractWrapper.readContract.primarySaleRecipient();\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async setRecipient(recipient) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setPrimarySaleRecipient\", [recipient])\n    };\n  }\n}\n\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\"\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nasync function fetchTokenMetadata(tokenId, tokenUri, storage) {\n  const parsedUri = tokenUri.replace(\"{id}\", ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hexZeroPad(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(tokenId).toHexString(), 32).slice(2));\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.downloadJSON(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\"{id}\", ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(tokenId).toString());\n    try {\n      jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(`failed to get token metadata: ${JSON.stringify({\n        tokenId: tokenId.toString(),\n        tokenUri\n      })} -- falling back to default metadata`);\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n  return _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.C.parse({\n    ...jsonMetadata,\n    id: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(tokenId).toString(),\n    uri: tokenUri\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress\n * @param provider\n * @param tokenId\n * @param storage\n */\nasync function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {\n  let uri;\n  const erc165 = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_0__, provider);\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  if (isERC721) {\n    const erc721 = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC721Metadata_json__WEBPACK_IMPORTED_MODULE_41__, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const erc1155 = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC1155Metadata_json__WEBPACK_IMPORTED_MODULE_42__, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata\n * @param storage\n */\nasync function uploadOrExtractURI(metadata, storage) {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.upload(_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.b.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas\n * @param storage\n * @param startNumber\n * @param contractAddress\n * @param signerAddress\n * @param options\n */\nasync function uploadOrExtractURIs(metadatas, storage, startNumber, options) {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const uris = await storage.uploadBatch(metadatas.map(m => _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.b.parse(m)), {\n      rewriteFileNames: {\n        fileStartNumber: startNumber || 0\n      },\n      onProgress: options?.onProgress\n    });\n    return uris;\n  } else {\n    throw new Error(\"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\");\n  }\n}\nfunction getBaseUriFromBatch(uris) {\n  const baseUri = uris[0].substring(0, uris[0].lastIndexOf(\"/\"));\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i].substring(0, uris[i].lastIndexOf(\"/\"));\n    if (baseUri !== uri) {\n      throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n    }\n  }\n\n  // Ensure that baseUri ends with trailing slash\n  return baseUri.replace(/\\/$/, \"\") + \"/\";\n}\nfunction isUriList(metadatas) {\n  return metadatas.find(m => typeof m !== \"string\") === undefined;\n}\nfunction isMetadataList(metadatas) {\n  return metadatas.find(m => typeof m !== \"object\") === undefined;\n}\n\n/**\n * Handles delayed reveal logic\n * @public\n */\nclass DelayedReveal {\n  constructor(contractWrapper, storage, fetureName, nextTokenIdToMintFn) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"nextTokenIdToMintFn\", void 0);\n    this.featureName = fetureName;\n    this.nextTokenIdToMintFn = nextTokenIdToMintFn;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until your reveal them!\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * ```\n   * @public\n   * @param placeholder - the placeholder NFT to show before the reveal\n   * @param metadatas - the final NFTs that will be hidden\n   * @param password - the password that will be used to reveal these NFTs\n   * @param options - additional options like upload progress\n   */\n  async createDelayedRevealBatch(placeholder, metadatas, password, options) {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const placeholderUris = await this.storage.uploadBatch([_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.b.parse(placeholder)], {\n      rewriteFileNames: {\n        fileStartNumber: 0\n      }\n    });\n    const placeholderUri = getBaseUriFromBatch(placeholderUris);\n    const startFileNumber = await this.nextTokenIdToMintFn();\n    const uris = await this.storage.uploadBatch(metadatas.map(m => _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.b.parse(m)), {\n      onProgress: options?.onProgress,\n      rewriteFileNames: {\n        fileStartNumber: startFileNumber.toNumber()\n      }\n    });\n    const baseUri = getBaseUriFromBatch(uris);\n    const baseUriId = await this.contractWrapper.readContract.getBaseURICount();\n    const hashedPassword = await this.hashDelayRevealPasword(baseUriId, password);\n    const encryptedBaseUri = await this.contractWrapper.readContract.encryptDecrypt(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(baseUri), hashedPassword);\n    let data;\n    const legacyContract = await this.isLegacyContract();\n    if (legacyContract) {\n      data = encryptedBaseUri;\n    } else {\n      const chainId = await this.contractWrapper.getChainID();\n      const provenanceHash = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n      data = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`, data]);\n    const events = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n    const startingIndex = events[0].args.startTokenId;\n    const endingIndex = events[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Reveal a batch of hidden NFTs\n   * @remarks Reveal the NFTs of a batch using the password.\n   * @example\n   * ```javascript\n   * // the batch to reveal\n   * const batchId = 0;\n   * // reveal the batch\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @public\n   * @param batchId - the id of the batch to reveal\n   * @param password - the password\n   */\n  async reveal(batchId, password) {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const key = await this.hashDelayRevealPasword(batchId, password);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"reveal\", [batchId, key])\n    };\n  }\n\n  /**\n   * Gets the list of unrevealed NFT batches.\n   * @remarks Gets the list of unrevealed NFT batches.\n   * @example\n   * ```javascript\n   * const batches = await contract.revealer.getBatchesToReveal();\n   * ```\n   * @public\n   */\n  async getBatchesToReveal() {\n    const count = await this.contractWrapper.readContract.getBaseURICount();\n    if (count.isZero()) {\n      return [];\n    }\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(countRangeArray.map(i => {\n      if (hasFunction(\"getBatchIdAtIndex\", this.contractWrapper)) {\n        return this.contractWrapper.readContract.getBatchIdAtIndex(i);\n      }\n      if (hasFunction(\"baseURIIndices\", this.contractWrapper)) {\n        return this.contractWrapper.readContract.baseURIIndices(i);\n      }\n      throw new Error(\"Contract does not have getBatchIdAtIndex or baseURIIndices.\");\n    }));\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenMetadatas = await Promise.all(Array.from([0, ...uriIndicesWithZeroStart]).map(i => this.getNftMetadata(i.toString())));\n\n    // index is the uri indices, which is end token id. different from uris\n    const legacyContract = await this.isLegacyContract();\n    const encryptedUriData = await Promise.all(Array.from([...uriIndices]).map(i => legacyContract ? this.getLegacyEncryptedData(i) : this.contractWrapper.readContract.encryptedData(i)));\n    const encryptedBaseUris = encryptedUriData.map(data => {\n      if (ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hexDataLength(data) > 0) {\n        if (legacyContract) {\n          return data;\n        }\n        const result = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.defaultAbiCoder.decode([\"bytes\", \"bytes32\"], data);\n        return result[0];\n      } else {\n        return data;\n      }\n    });\n    return tokenMetadatas.map((meta, index) => ({\n      batchId: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(index),\n      batchUri: meta.uri,\n      placeholderMetadata: meta\n    })).filter((_, index) => ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hexDataLength(encryptedBaseUris[index]) > 0);\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  async hashDelayRevealPasword(batchTokenIndex, password) {\n    const chainId = await this.contractWrapper.getChainID();\n    const contractAddress = this.contractWrapper.readContract.address;\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchTokenIndex, contractAddress]);\n  }\n  async getNftMetadata(tokenId) {\n    return fetchTokenMetadataForContract(this.contractWrapper.readContract.address, this.contractWrapper.getProvider(), tokenId, this.storage);\n  }\n  async isLegacyContract() {\n    if (hasFunction(\"contractVersion\", this.contractWrapper)) {\n      try {\n        const version = await this.contractWrapper.readContract.contractVersion();\n        return version <= 2;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async getLegacyEncryptedData(index) {\n    const legacy = new ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.Contract(this.contractWrapper.readContract.address, _thirdweb_dev_contracts_js_dist_abis_IDelayedRevealDeprecated_json__WEBPACK_IMPORTED_MODULE_43__, this.contractWrapper.getProvider());\n    const result = await legacy.functions[\"encryptedBaseURI\"](index);\n    if (result.length > 0) {\n      return result[0];\n    } else {\n      return \"0x\";\n    }\n  }\n}\n\nlet ListingType;\n(function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n})(ListingType || (ListingType = {}));\n\nlet ProposalState;\n(function (ProposalState) {\n  ProposalState[ProposalState[\"Pending\"] = 0] = \"Pending\";\n  ProposalState[ProposalState[\"Active\"] = 1] = \"Active\";\n  ProposalState[ProposalState[\"Canceled\"] = 2] = \"Canceled\";\n  ProposalState[ProposalState[\"Defeated\"] = 3] = \"Defeated\";\n  ProposalState[ProposalState[\"Succeeded\"] = 4] = \"Succeeded\";\n  ProposalState[ProposalState[\"Queued\"] = 5] = \"Queued\";\n  ProposalState[ProposalState[\"Expired\"] = 6] = \"Expired\";\n  ProposalState[ProposalState[\"Executed\"] = 7] = \"Executed\";\n})(ProposalState || (ProposalState = {}));\n\nlet VoteType;\n(function (VoteType) {\n  VoteType[VoteType[\"Against\"] = 0] = \"Against\";\n  VoteType[VoteType[\"For\"] = 1] = \"For\";\n  VoteType[VoteType[\"Abstain\"] = 2] = \"Abstain\";\n})(VoteType || (VoteType = {}));\n\nlet ClaimEligibility;\n(function (ClaimEligibility) {\n  ClaimEligibility[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n  ClaimEligibility[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n  ClaimEligibility[\"WaitBeforeNextClaimTransaction\"] = \"Not enough time since last claim transaction. Please wait.\";\n  ClaimEligibility[\"AlreadyClaimed\"] = \"You have already claimed the token.\";\n  ClaimEligibility[\"NotEnoughTokens\"] = \"There are not enough tokens in the wallet to pay for the claim.\";\n  ClaimEligibility[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment. Please check back in later.\";\n  ClaimEligibility[\"NoClaimConditionSet\"] = \"There is no claim condition set.\";\n  ClaimEligibility[\"NoWallet\"] = \"No wallet connected.\";\n  ClaimEligibility[\"Unknown\"] = \"No claim conditions found.\";\n})(ClaimEligibility || (ClaimEligibility = {}));\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(fn, args) {\n    const price = await this.contractWrapper.getPreferredGasPrice();\n    const gasUnits = await this.contractWrapper.estimateGas(fn, args);\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * @internal\n * Represents a transaction to be executed and can be customized.\n */\nclass TransactionTask {\n  static make(taskArgs) {\n    return new TransactionTask(taskArgs);\n  }\n  constructor(taskArgs) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"functionName\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"args\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"overrides\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"encoder\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"estimator\", void 0);\n    this.contractWrapper = taskArgs.contractWrapper;\n    this.functionName = taskArgs.functionName;\n    this.args = taskArgs.args || [];\n    this.overrides = taskArgs.overrides;\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n\n  // ////////////// Overrides ////////////////\n\n  /**\n   * Override the gas limit for this transaction.\n   * @param gasLimit\n   */\n  overrideGasLimit(gasLimit) {\n    this.overrides = {\n      ...this.overrides,\n      gasLimit\n    };\n    return this;\n  }\n\n  /**\n   * Override the gas price for this transaction.\n   * @param gasPrice\n   */\n  overrideGasPrice(gasPrice) {\n    this.overrides = {\n      ...this.overrides,\n      gasPrice\n    };\n    return this;\n  }\n\n  /**\n   * Override the nonce for this transaction.\n   * @param nonce\n   */\n  overrideNonce(nonce) {\n    this.overrides = {\n      ...this.overrides,\n      nonce\n    };\n    return this;\n  }\n\n  /**\n   * Override the value sent with this transaction.\n   * @param value\n   */\n  overrideValue(value) {\n    this.overrides = {\n      ...this.overrides,\n      value\n    };\n    return this;\n  }\n\n  // ////////////// Estimates ////////////////\n\n  /**\n   * Returns the gas limit that this transaction would consume if executed.\n   * @returns the gas limit in gas units\n   */\n  async estimateGasLimit() {\n    return await this.estimator.gasLimitOf(this.functionName, this.args);\n  }\n\n  /**\n   * Returns the total gas cost of this transaction if executed.\n   * @returns the gas cost in ether\n   */\n  async estimateGasCostInEther() {\n    return await this.estimator.gasCostOf(this.functionName, this.args);\n  }\n\n  // ////////////// Actions ////////////////\n\n  /**\n   * Returns the encoded function data of this transaction if executed.\n   */\n  async encodeFunctionData() {\n    return this.encoder.encode(this.functionName, this.args);\n  }\n\n  /**\n   * Submits this transaction to the network. Does not wait for the transaction to be mined.\n   * To wait for the transaction to be mined, you can call `.wait()` on the result of this function.\n   */\n  async submit() {\n    return await this.contractWrapper.sendTransactionByFunction(this.functionName, this.args, this.overrides || {});\n  }\n\n  /**\n   * Submits this transaction to the network and waits for it to be mined.\n   */\n  async execute() {\n    const receipt = await this.contractWrapper.sendTransaction(this.functionName, this.args, this.overrides || {});\n    return {\n      receipt\n    };\n  }\n}\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nclass DropClaimConditions {\n  constructor(contractWrapper, metadata, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"metadata\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(options) {\n    const cc = await this.get();\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(cc, await this.getTokenDecimals(), this.contractWrapper.getProvider(), metadata.merkle || {}, this.storage, options?.withAllowList || false);\n  }\n  async get(conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.readContract.claimCondition();\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.readContract.getActiveClaimConditionId();\n      const contractModel = await this.contractWrapper.readContract.getClaimConditionById(id);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.readContract.claimCondition();\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.readContract.getActiveClaimConditionId();\n      const contractModel = await this.contractWrapper.readContract.getClaimConditionById(id);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const claimCondition = await this.contractWrapper.readContract.claimCondition();\n      const startId = claimCondition.currentStartId.toNumber();\n      const count = claimCondition.count.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(await this.get(i));\n      }\n      const metadata = await this.metadata.get();\n      const decimals = await this.getTokenDecimals();\n      return Promise.all(conditions.map(c => transformResultToClaimCondition(c, decimals, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false)));\n    } else {\n      return [await this.getActive(options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    return (await this.getClaimIneligibilityReasons(quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    const decimals = await this.getTokenDecimals();\n    const quantityWithDecimals = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A.parse(quantity), decimals);\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    try {\n      claimCondition = await this.getActive();\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      console.warn(\"failed to get active claim condition\", err);\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      const supplyWithDecimals = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(claimCondition.availableSupply, decimals);\n      if (supplyWithDecimals.lt(quantityWithDecimals)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(addressToCheck);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(quantity, false, decimals, addressToCheck);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.readContract.getActiveClaimConditionId();\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.readContract.verifyClaimMerkleProof(activeConditionIndex, addressToCheck, quantity, claimVerification.proofs, claimVerification.maxClaimable);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.readContract.verifyClaimMerkleProof(addressToCheck, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            });\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.readContract.verifyClaim(addressToCheck, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            });\n            if (convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, decimals).eq(0) && claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256 || claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0)) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.readContract.getActiveClaimConditionId();\n            await this.contractWrapper.readContract.verifyClaim(activeConditionIndex, addressToCheck, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            });\n            if (convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, decimals).eq(0) && claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256 || claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0)) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // TODO (cc) check for max claimable per wallet and how much each wallet has claimed\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, decimals).eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims (ONLY FOR LEGACY)\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      let [lastClaimedTimestamp, timestampForNextClaim] = [ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0), ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0)];\n      if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n        activeConditionIndex = await this.contractWrapper.readContract.getActiveClaimConditionId();\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.readContract.getClaimTimestamp(activeConditionIndex, addressToCheck);\n      } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n        // check for claim timestamp between claims\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.readContract.getClaimTimestamp(addressToCheck);\n      }\n      const now = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(Date.now()).div(1000);\n      if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n        // contract will return MaxUint256 if user has already claimed and cannot claim again\n        if (timestampForNextClaim.eq(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.MaxUint256)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        } else {\n          reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n        }\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(quantity));\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, {});\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const metadata = await this.metadata.get();\n      return await fetchSnapshotEntryForAddress(claimerAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions\n   *\n   * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   *\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  async set(claimConditionInputs) {\n    let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let claimConditionsProcessed = claimConditionInputs;\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      resetClaimEligibilityForAll = true;\n      if (claimConditionInputs.length === 0) {\n        claimConditionsProcessed = [{\n          startTime: new Date(0),\n          currencyAddress: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero,\n          price: 0,\n          maxClaimableSupply: 0,\n          maxClaimablePerWallet: 0,\n          waitInSeconds: 0,\n          merkleRootHash: ethers__WEBPACK_IMPORTED_MODULE_58__.utils.hexZeroPad([0], 32),\n          snapshot: []\n        }];\n      } else if (claimConditionInputs.length > 1) {\n        throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n      }\n    }\n\n    // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      claimConditionsProcessed.forEach(cc => {\n        if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n          throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Example: Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\\n\" + \"contract.claimConditions.set([{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n        }\n        if (cc.snapshot && cc.snapshot.length > 0 && cc.maxClaimablePerWallet?.toString() === \"0\" && cc.snapshot.map(s => {\n          if (typeof s === \"string\") {\n            return 0;\n          } else {\n            return Number(s.maxClaimable?.toString() || 0);\n          }\n        }).reduce((acc, current) => {\n          return acc + current;\n        }, 0) === 0) {\n          throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n        }\n      });\n    }\n\n    // process inputs\n    const {\n      snapshotInfos,\n      sortedConditions\n    } = await processClaimConditionInputs(claimConditionsProcessed, await this.getTokenDecimals(), this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    const merkleInfo = {};\n    snapshotInfos.forEach(s => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_40___default()(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(mergedMetadata);\n\n      // TODO (cc) we could write the merkle tree info on the claim condition metadata instead\n      // TODO (cc) but we still need to maintain the behavior here for older contracts\n      if (hasFunction(\"setContractURI\", this.contractWrapper)) {\n        encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"setContractURI\", [contractURI]));\n      } else {\n        throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n      }\n    }\n    const cw = this.contractWrapper;\n    if (this.isLegacySinglePhaseDrop(cw)) {\n      encoded.push(cw.readContract.interface.encodeFunctionData(\"setClaimConditions\", [abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n    } else if (this.isLegacyMultiPhaseDrop(cw)) {\n      encoded.push(cw.readContract.interface.encodeFunctionData(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n    } else if (this.isNewSinglePhaseDrop(cw)) {\n      encoded.push(cw.readContract.interface.encodeFunctionData(\"setClaimConditions\", [abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n    } else if (this.isNewMultiphaseDrop(cw)) {\n      encoded.push(cw.readContract.interface.encodeFunctionData(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded)\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   *\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  async update(index, claimConditionInput) {\n    const existingConditions = await this.getAll();\n    const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n    return await this.set(newConditionInputs);\n  }\n\n  /** ***************************************\n   * PRIVATE FUNCTIONS\n   *****************************************/\n\n  async getTokenDecimals() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return this.contractWrapper.readContract.decimals();\n    } else {\n      return Promise.resolve(0);\n    }\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   * @internal\n   */\n  async prepareClaim(quantity, checkERC20Allowance) {\n    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let address = arguments.length > 3 ? arguments[3] : undefined;\n    const addressToClaim = address ? address : await this.contractWrapper.getSignerAddress();\n    return prepareClaim(addressToClaim, quantity, await this.getActive(), async () => (await this.metadata.get()).merkle, decimals, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(destinationAddress, quantity, claimVerification) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [destinationAddress, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [destinationAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(\"\")];\n    }\n    return [destinationAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param options\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    if (options?.pricePerToken) {\n      throw new Error(\"Price per token is be set via claim conditions by calling `contract.erc721.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(quantity, options?.checkERC20Allowance === undefined ? true : options.checkERC20Allowance, await this.getTokenDecimals());\n    return TransactionTask.make({\n      contractWrapper: this.contractWrapper,\n      functionName: \"claim\",\n      args: await this.getClaimArguments(destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\n/**\n * Manages claim conditions for Edition Drop contracts\n * @public\n */\nclass DropErc1155ClaimConditions {\n  constructor(contractWrapper, metadata, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"metadata\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(tokenId, options) {\n    const mc = await this.get(tokenId);\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(mc, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false);\n  }\n  async get(tokenId, conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.readContract.claimCondition(tokenId);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.readContract.getActiveClaimConditionId(tokenId);\n      const contractModel = await this.contractWrapper.readContract.getClaimConditionById(tokenId, id);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.readContract.claimCondition(tokenId);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.readContract.getActiveClaimConditionId(tokenId);\n      const contractModel = await this.contractWrapper.readContract.getClaimConditionById(tokenId, id);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(tokenId, options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const claimCondition = await this.contractWrapper.readContract.claimCondition(tokenId);\n      const startId = claimCondition.currentStartId.toNumber();\n      const count = claimCondition.count.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(await this.get(tokenId, i));\n      }\n      const metadata = await this.metadata.get();\n      return Promise.all(conditions.map(c => transformResultToClaimCondition(c, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false)));\n    } else {\n      return [await this.getActive(tokenId, options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if a particular NFT can currently be claimed by a given user.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(tokenId, quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    return (await this.getClaimIneligibilityReasons(tokenId, quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human-readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - the token id to check\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(tokenId, quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    try {\n      claimCondition = await this.getActive(tokenId);\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      if (ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(tokenId, addressToCheck);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(tokenId, quantity, false, addressToCheck);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.readContract.getActiveClaimConditionId(tokenId);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.readContract.verifyClaimMerkleProof(activeConditionIndex, addressToCheck, tokenId, quantity, claimVerification.proofs, claimVerification.maxClaimable);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.readContract.verifyClaimMerkleProof(tokenId, addressToCheck, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            });\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.readContract.verifyClaim(tokenId, addressToCheck, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            });\n            // TODO (cc) in new override format, anyone can claim (no allow list restriction)\n            // TODO (cc) instead check if maxClaimablePerWallet is 0 and this address has no overrides\n            // TODO (cc) meaning this address is not allowed to claim\n            if (claimCondition.maxClaimablePerWallet === \"0\" && claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256 || claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0)) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.readContract.getActiveClaimConditionId(tokenId);\n            await this.contractWrapper.readContract.verifyClaim(activeConditionIndex, addressToCheck, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            });\n            if (claimCondition.maxClaimablePerWallet === \"0\" && claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256 || claimVerification.maxClaimable === ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0)) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // TODO (cc) check for max claimable per wallet and how much each wallet has claimed\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (claimCondition.maxClaimablePerWallet === \"0\") {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims\n    let [lastClaimedTimestamp, timestampForNextClaim] = [ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0), ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0)];\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      activeConditionIndex = await this.contractWrapper.readContract.getActiveClaimConditionId(tokenId);\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.readContract.getClaimTimestamp(tokenId, activeConditionIndex, addressToCheck);\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.readContract.getClaimTimestamp(tokenId, addressToCheck);\n    }\n    const now = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(Date.now()).div(1000);\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, {});\n        const balance = await erc20.readContract.balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param tokenId - the token ID to check\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(tokenId, claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(tokenId, claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const metadata = await this.metadata.get();\n      return await fetchSnapshotEntryForAddress(claimerAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set claim conditions on a single NFT\n   *\n   * @remarks Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this contract.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await dropContract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   *\n   * @param tokenId - The id of the NFT to set the claim conditions on\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  async set(tokenId, claimConditionInputs) {\n    let resetClaimEligibilityForAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return this.setBatch([{\n      tokenId,\n      claimConditions: claimConditionInputs\n    }], resetClaimEligibilityForAll);\n  }\n\n  /**\n   * Set claim conditions on multiple NFTs at once\n   *\n   * @remarks Sets the claim conditions that need to be fulfilled by users to claim the given NFTs in this contract.\n   *\n   * @example\n   * ```javascript\n   * const claimConditionsForTokens = [\n   *   {\n   *     tokenId: 0,\n   *     claimConditions: [{\n   *       startTime: new Date(), // start the claim phase now\n   *       maxQuantity: 2, // limit how many mints for this tokenId\n   *       price: 0.01, // price for this tokenId\n   *       snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *     }]\n   *   },\n   *   {\n   *     tokenId: 1,\n   *     claimConditions: [{\n   *       startTime: new Date(),\n   *       price: 0.08, // different price for this tokenId\n   *     }]\n   *   },\n   * ];\n   *\n   * await dropContract.claimConditions.setBatch(claimConditionsForTokens);\n   * ```\n   *\n   * @param claimConditionsForToken - The claim conditions for each NFT\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  async setBatch(claimConditionsForToken) {\n    let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const merkleInfo = {};\n    const processedClaimConditions = await Promise.all(claimConditionsForToken.map(async _ref => {\n      let {\n        tokenId,\n        claimConditions\n      } = _ref;\n      // sanitize for single phase deletions\n      let claimConditionsProcessed = claimConditions;\n      if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n        resetClaimEligibilityForAll = true;\n        if (claimConditions.length === 0) {\n          claimConditionsProcessed = [{\n            startTime: new Date(0),\n            currencyAddress: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero,\n            price: 0,\n            maxClaimableSupply: 0,\n            maxClaimablePerWallet: 0,\n            waitInSeconds: 0,\n            merkleRootHash: ethers__WEBPACK_IMPORTED_MODULE_58__.utils.hexZeroPad([0], 32),\n            snapshot: []\n          }];\n        } else if (claimConditions.length > 1) {\n          throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n        }\n      }\n      // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n      if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n        claimConditionsProcessed.forEach(cc => {\n          if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n            throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\" + \"\\n\\nex:\\n\" + \"contract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n          }\n          if (cc.snapshot && cc.snapshot.length > 0 && cc.maxClaimablePerWallet?.toString() === \"0\" && cc.snapshot.map(s => {\n            if (typeof s === \"string\") {\n              return 0;\n            } else {\n              return Number(s.maxClaimable?.toString() || 0);\n            }\n          }).reduce((acc, current) => {\n            return acc + current;\n          }, 0) === 0) {\n            throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n          }\n        });\n      }\n      // process inputs\n      const {\n        snapshotInfos,\n        sortedConditions\n      } = await processClaimConditionInputs(claimConditionsProcessed, 0, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n      snapshotInfos.forEach(s => {\n        merkleInfo[s.merkleRoot] = s.snapshotUri;\n      });\n      return {\n        tokenId,\n        sortedConditions\n      };\n    }));\n    const metadata = await this.metadata.get();\n    const encoded = [];\n\n    // keep the old merkle roots from other tokenIds\n    for (const key of Object.keys(metadata.merkle || {})) {\n      merkleInfo[key] = metadata.merkle[key];\n    }\n\n    // upload new merkle roots to snapshot URIs if updated\n    if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_40___default()(metadata.merkle, merkleInfo)) {\n      const mergedMetadata = this.metadata.parseInputMetadata({\n        ...metadata,\n        merkle: merkleInfo\n      });\n      // using internal method to just upload, avoids one contract call\n      const contractURI = await this.metadata._parseAndUploadMetadata(mergedMetadata);\n      if (hasFunction(\"setContractURI\", this.contractWrapper)) {\n        encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"setContractURI\", [contractURI]));\n      } else {\n        throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n      }\n    }\n    processedClaimConditions.forEach(_ref2 => {\n      let {\n        tokenId,\n        sortedConditions\n      } = _ref2;\n      if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n        encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"setClaimConditions\", [tokenId, abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n        encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n      } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n        encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"setClaimConditions\", [tokenId, abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n        encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n      } else {\n        throw new Error(\"Contract does not support claim conditions\");\n      }\n    });\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded)\n    };\n  }\n\n  /**\n   * Update a single claim condition with new data.\n   * @param tokenId - the token id to update\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  async update(tokenId, index, claimConditionInput) {\n    const existingConditions = await this.getAll(tokenId);\n    const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n    return await this.set(tokenId, newConditionInputs);\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  async prepareClaim(tokenId, quantity, checkERC20Allowance, address) {\n    const addressToClaim = address ? address : await this.contractWrapper.getSignerAddress();\n    return prepareClaim(addressToClaim, quantity, await this.getActive(tokenId), async () => (await this.metadata.get()).merkle, 0, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(tokenId, destinationAddress, quantity, claimVerification) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [destinationAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [destinationAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(\"\")];\n    }\n    return [destinationAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    if (options?.pricePerToken) {\n      throw new Error(\"Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(tokenId, quantity, options?.checkERC20Allowance || true);\n    return TransactionTask.make({\n      contractWrapper: this.contractWrapper,\n      functionName: \"claim\",\n      args: await this.getClaimArguments(tokenId, destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\n/**\n * Manages history for Edition Drop contracts\n * @public\n */\nclass DropErc1155History {\n  constructor(events) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"events\", void 0);\n    this.events = events;\n  }\n\n  /**\n   * Get all claimer addresses\n   *\n   * @remarks Get a list of all the addresses that have claimed a token\n   * @param tokenId - the tokenId of the NFT to get the addresses of*\n   * @returns - A unique list of addresses that claimed the token\n   * @example\n   * ```javascript\n   * const tokenId = \"0\";\n   * const allClaimerAddresses = await contract.history.getAllClaimerAddresses(tokenId);\n   * ```\n   */\n  async getAllClaimerAddresses(tokenId) {\n    const a = (await this.events.getEvents(\"TokensClaimed\")).filter(e => e.data && ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.isBigNumber(e.data.tokenId) ? e.data.tokenId.eq(tokenId) : false);\n    return Array.from(new Set(a.filter(b => typeof b.data?.claimer === \"string\").map(b => b.data.claimer)));\n  }\n}\n\nclass Erc20Burnable {\n  constructor(erc20, contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_TOKEN_BURNABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc20\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.tokens(amount);\n   * ```\n   */\n  async tokens(amount) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [await this.erc20.normalizeAmount(amount)])\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.from(holderAddress, amount);\n   * ```\n   */\n  async from(holder, amount) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burnFrom\", [holder, await this.erc20.normalizeAmount(amount)])\n    };\n  }\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\nclass Erc20ClaimableWithConditions {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.token.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_TOKEN_CLAIM_CONDITIONS_V2.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"conditions\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc20\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.token.drop.claim.to(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData\n   * @returns - The transaction receipt\n   */\n  async to(destinationAddress, amount, options) {\n    const quantity = await this.erc20.normalizeAmount(amount);\n    const task = await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    return await task.execute();\n  }\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\nclass Erc20Droppable {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.nft.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"claim\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc20\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.claim = new Erc20ClaimableWithConditions(this.erc20, this.contractWrapper, this.storage);\n  }\n}\n\n/**\n * Mint Many ERC20 Tokens at once\n * @remarks Token batch minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\nclass Erc20BatchMintable {\n  constructor(erc20, contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_TOKEN_BATCH_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc20\", void 0);\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.token.mint.batch(data);\n   * ```\n   */\n  async to(args) {\n    const encoded = [];\n    for (const arg of args) {\n      encoded.push(this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [arg.toAddress, await this.erc20.normalizeAmount(arg.amount)]));\n    }\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded)\n    };\n  }\n}\n\n/**\n * Mint ERC20 Tokens\n * @remarks Token minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nclass Erc20Mintable {\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc20, contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_TOKEN_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc20\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"batch\", void 0);\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.batch = this.detectErc20BatchMintable();\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.token.mint.to(toAddress, amount);\n   * ```\n   */\n  async to(to, amount) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"mintTo\", [to, await this.erc20.normalizeAmount(amount)])\n    };\n  }\n  detectErc20BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20BatchMintable\")) {\n      return new Erc20BatchMintable(this.erc20, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Enables generating ERC20 Tokens with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\n// TODO consolidate into a single class\nclass Erc20SignatureMintable {\n  constructor(contractWrapper, roles) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_TOKEN_SIGNATURE_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"roles\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint tokens from a signature\n   *\n   * @remarks Mint a certain amount of tokens from a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc20.signature.generate(payload);\n   *\n   * // Use the signed payload to mint the tokens\n   * const tx = contract.erc20.signature.mint(signedPayload);\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc20SignatureMintable.generate}\n   * @twfeature ERC20SignatureMintable\n   */\n  async mint(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(message.price), mintRequest.currencyAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"mintWithSignature\", [message, signature], overrides)\n    };\n  }\n\n  /**\n   * Mint any number of generated tokens signatures at once\n   * @remarks Mint multiple token signatures in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC20SignatureMintable\n   */\n  async mintBatch(signedPayloads) {\n    const contractPayloads = await Promise.all(signedPayloads.map(async s => {\n      const message = await this.mapPayloadToContractStruct(s.payload);\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    }));\n    const encoded = contractPayloads.map(p => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\"mintWithSignature\", [p.message, p.signature]);\n    });\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded)\n    };\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC20SignatureMintable\n   *\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc20.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a certain amount of tokens\n   *\n   * @remarks Takes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc20.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC20SignatureMintable\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many token signatures.\n   *\n   * @remarks See {@link Erc20SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC20SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    await this.roles?.verify([\"minter\"], await this.contractWrapper.getSignerAddress());\n    const parsedRequests = payloadsToSign.map(m => Signature20PayloadInput.parse(m));\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"No signer available\");\n\n    // ERC20Permit (EIP-712) spec differs from signature mint 721, 1155.\n    const name = await this.contractWrapper.readContract.name();\n    return await Promise.all(parsedRequests.map(async m => {\n      const finalPayload = Signature20PayloadOutput.parse(m);\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name,\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.readContract.address\n      }, {\n        MintRequest: MintRequest20\n      }, await this.mapPayloadToContractStruct(finalPayload));\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    const amountWithDecimals = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(mintRequest.quantity, await this.contractWrapper.readContract.decimals());\n    return {\n      to: mintRequest.to,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      quantity: amountWithDecimals,\n      price: normalizedPrice,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid\n    };\n  }\n}\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc20.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass Erc20 {\n  /**\n   * Mint tokens\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_TOKEN.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"mintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"burnable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"droppable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"signatureMintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_chainId\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.mintable = this.detectErc20Mintable();\n    this.burnable = this.detectErc20Burnable();\n    this.droppable = this.detectErc20Droppable();\n    this.signatureMintable = this.detectErc20SignatureMintable();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  ////// Standard ERC20 Extension //////\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.erc20.get();\n   * ```\n   * @returns The token metadata\n   * @twfeature ERC20\n   */\n  async get() {\n    return await fetchCurrencyMetadata(this.contractWrapper.getProvider(), this.getAddress());\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc20.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balanceOf(address) {\n    return this.getValue(await this.contractWrapper.readContract.balanceOf(address));\n  }\n\n  /**\n   * The total supply for this Token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.totalSupply();\n   * ```\n   * @twfeature ERC20\n   */\n  async totalSupply() {\n    return await this.getValue(await this.contractWrapper.readContract.totalSupply());\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.erc20.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowance(spender) {\n    return await this.allowanceOf(await this.contractWrapper.getSignerAddress(), spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.erc20.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowanceOf(owner, spender) {\n    return await this.getValue(await this.contractWrapper.readContract.allowance(owner, spender));\n  }\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.erc20.transfer(toAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  async transfer(to, amount) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transfer\", [to, await this.normalizeAmount(amount)])\n    };\n  }\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.erc20.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  async transferFrom(from, to, amount) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"transferFrom\", [from, to, await this.normalizeAmount(amount)])\n    };\n  }\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.erc20.setAllowance(spenderAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  async setAllowance(spender, amount) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [spender, await this.normalizeAmount(amount)])\n    };\n  }\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.erc20.transferBatch(data);\n   * ```\n   */\n  async transferBatch(args) {\n    const encoded = await Promise.all(args.map(async arg => {\n      const amountWithDecimals = await this.normalizeAmount(arg.amount);\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\"transfer\", [arg.toAddress, amountWithDecimals]);\n    }));\n    await this.contractWrapper.multiCall(encoded);\n  }\n\n  ////// ERC20 Mintable Extension //////\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.erc20.mint(toAddress, amount);\n   * ```\n   * @twfeature ERC20Mintable\n   */\n  async mint(amount) {\n    return this.mintTo(await this.contractWrapper.getSignerAddress(), amount);\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.erc20.mintTo(toAddress, amount);\n   * ```\n   * @twfeature ERC20Mintable\n   */\n  async mintTo(receiver, amount) {\n    return assertEnabled(this.mintable, FEATURE_TOKEN_MINTABLE).to(receiver, amount);\n  }\n\n  ////// ERC20 BatchMintable Extension //////\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   * @twfeature ERC20BatchMintable\n   */\n  async mintBatchTo(args) {\n    return assertEnabled(this.mintable?.batch, FEATURE_TOKEN_BATCH_MINTABLE).to(args);\n  }\n\n  ////// ERC20 Burnable Extension //////\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.erc20.burn(amount);\n   * ```\n   * @twfeature ERC20Burnable\n   */\n  async burn(amount) {\n    return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).tokens(amount);\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.erc20.burnFrom(holderAddress, amount);\n   * ```\n   * @twfeature ERC20Burnable\n   */\n  async burnFrom(holder, amount) {\n    return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).from(holder, amount);\n  }\n\n  ////// ERC20 Claimable Extension //////\n\n  /**\n   * Claim a certain amount of tokens to the connected Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.erc20.claim(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData\n   * @returns - The transaction receipt\n   * @twfeature ERC20ClaimableWithConditions\n   */\n  async claim(amount, options) {\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), amount, options);\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.erc20.claim(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData\n   * @returns - The transaction receipt\n   * @twfeature ERC20ClaimableWithConditions\n   */\n  async claimTo(destinationAddress, amount, options) {\n    return assertEnabled(this.droppable?.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).to(destinationAddress, amount, options);\n  }\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc20.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC20ClaimableWithConditions\n   */\n  get claimConditions() {\n    return assertEnabled(this.droppable?.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC20 SignatureMint Extension //////\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic tokens with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc20.signature.generate()` documentation\n   * const signedPayload = contract.erc20.signature().generate(payload);\n   *\n   * // now the payload can be used to mint tokens\n   * const tx = contract.erc20.signature.mint(signedPayload);\n   * ```\n   * @twfeature ERC20SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_TOKEN_SIGNATURE_MINTABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * returns the wei amount from a token amount\n   * @internal\n   * @param amount\n   */\n  async normalizeAmount(amount) {\n    const decimals = await this.contractWrapper.readContract.decimals();\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.parseUnits(_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A.parse(amount), decimals);\n  }\n\n  /**\n   * @internal\n   */\n  async getValue(value) {\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), this.getAddress(), ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(value));\n  }\n  detectErc20Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20Mintable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20Burnable\")) {\n      return new Erc20Burnable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Droppable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV2\")) {\n      return new Erc20Droppable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc20SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20SignatureMintable\")) {\n      return new Erc20SignatureMintable(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"events\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return Promise.all(Object.keys(balances).map(async addr => ({\n      holder: addr,\n      balance: await fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.readContract.address, balances[addr])\n    })));\n  }\n}\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass StandardErc20 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc20\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_chainId\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc20 = new Erc20(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the token Metadata (name, symbol, etc...)\n   *\n   * @example\n   * ```javascript\n   * const token = await contract.get();\n   * ```\n   * @returns The token metadata\n   */\n  async get() {\n    return this.erc20.get();\n  }\n\n  /**\n   * Get Token Balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balance() {\n    return await this.erc20.balance();\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  async balanceOf(address) {\n    return this.erc20.balanceOf(address);\n  }\n\n  /**\n   * The total supply for this Token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.totalSupply();\n   * ```\n   */\n  async totalSupply() {\n    return await this.erc20.totalSupply();\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowance(spender) {\n    return await this.erc20.allowance(spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  async allowanceOf(owner, spender) {\n    return await this.erc20.allowanceOf(owner, spender);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.transfer(toAddress, amount);\n   * ```\n   */\n  async transfer(to, amount) {\n    return this.erc20.transfer(to, amount);\n  }\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  async transferFrom(from, to, amount) {\n    return this.erc20.transferFrom(from, to, amount);\n  }\n\n  /**\n   * Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.setAllowance(spenderAddress, amount);\n   * ```\n   */\n  async setAllowance(spender, amount) {\n    return this.erc20.setAllowance(spender, amount);\n  }\n\n  /**\n   * Transfer Tokens To Many Wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.transferBatch(data);\n   * ```\n   */\n  async transferBatch(args) {\n    return this.erc20.transferBatch(args);\n  }\n}\n\nclass Erc721Burnable {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_BURNABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn NFTs\n   *\n   * @remarks Burn NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   *\n   * await contract.nft.burn.token(tokenId);\n   * ```\n   */\n  async token(tokenId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [tokenId])\n    };\n  }\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(tokenId, quantity);\n * ```\n */\nclass Erc721Claimable {\n  constructor(erc721, contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_CLAIM_CUSTOM.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return TransactionTask.make({\n      contractWrapper: this.contractWrapper,\n      functionName: \"claim\",\n      args: [destinationAddress, quantity],\n      overrides\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, tokenId, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @returns - Receipt for the transaction\n   */\n  async to(destinationAddress, quantity, options) {\n    const task = await this.getClaimTransaction(destinationAddress, quantity, options);\n    const {\n      receipt\n    } = await task.execute();\n    const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.get(id)\n      });\n    }\n    return results;\n  }\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(quantity);\n * await contract.erc721.claimConditions.getActive();\n * ```\n */\nclass Erc721ClaimableWithConditions {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_CLAIM_CONDITIONS_V2.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"conditions\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the first NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the first claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async to(destinationAddress, quantity, options) {\n    const task = await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    const {\n      receipt\n    } = await task.execute();\n    const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.get(id)\n      });\n    }\n    return results;\n  }\n}\n\n/**\n * Lazily mint and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.drop.claim(quantity);\n * ```\n */\nclass Erc721LazyMintable {\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.nft.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Claim tokens and configure claim conditions\n   * @remarks Let users claim NFTs. Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const quantity = 10;\n   * await contract.erc721.claim(quantity);\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_LAZY_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"revealer\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"claimWithConditions\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"claim\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.revealer = this.detectErc721Revealable();\n    this.claimWithConditions = this.detectErc721ClaimableWithConditions();\n    this.claim = this.detectErc721Claimable();\n  }\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  async lazyMint(metadatas, options) {\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    // ensure baseUri is the same for the entire batch\n    const baseUri = getBaseUriFromBatch(batch);\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [batch.length, baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(\"\")]);\n    const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.getTokenMetadata(id)\n      });\n    }\n    return results;\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  detectErc721Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n  detectErc721ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV2\")) {\n      return new Erc721ClaimableWithConditions(this.erc721, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimCustom\")) {\n      return new Erc721Claimable(this.erc721, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint Many ERC721 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\nclass Erc721BatchMintable {\n  constructor(erc721, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_BATCH_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mint.batch.to(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  async to(to, metadatas) {\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const encoded = uris.map(uri => this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [to, uri]));\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map(e => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.erc721.get(id)\n      };\n    });\n  }\n}\n\n/**\n * Mint ERC721 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nclass Erc721Mintable {\n  constructor(erc721, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"batch\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc721BatchMintable();\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.nft.mint.to(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  async to(to, metadata) {\n    const uri = await uploadOrExtractURI(metadata, this.storage);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [to, uri]);\n    const event = this.contractWrapper.parseLogs(\"Transfer\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"TransferEvent event not found\");\n    }\n    const id = event[0].args.tokenId;\n    return {\n      id,\n      receipt,\n      data: () => this.erc721.get(id)\n    };\n  }\n  detectErc721BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721BatchMintable\")) {\n      return new Erc721BatchMintable(this.erc721, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\nclass Erc721Enumerable {\n  constructor(erc721, contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_ENUMERABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async all(walletAddress) {\n    const tokenIds = await this.tokenIds(walletAddress);\n    return await Promise.all(tokenIds.map(tokenId => this.erc721.get(tokenId.toString())));\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async tokenIds(walletAddress) {\n    const address = walletAddress || (await this.contractWrapper.getSignerAddress());\n    const balance = await this.contractWrapper.readContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    return await Promise.all(indices.map(i => this.contractWrapper.readContract.tokenOfOwnerByIndex(address, i)));\n  }\n}\n\n/**\n * List ERC721 NFTs\n * @remarks Easily list all the NFTs in a ERC721 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.nft.query.all();\n * ```\n * @public\n */\nclass Erc721Supply {\n  constructor(erc721, contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_SUPPLY.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"owned\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.owned = this.detectErc721Owned();\n  }\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.nft.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(queryParams?.count || _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.D).toNumber();\n    const maxSupply = await this.erc721.nextTokenIdToMint();\n    const maxId = Math.min(maxSupply.toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc721.get((start + i).toString())));\n  }\n\n  /**\n   * Return all the owners of each token id in this contract\n   * @returns\n   */\n  async allOwners() {\n    return Promise.all([...new Array((await this.totalCount()).toNumber()).keys()].map(async i => ({\n      tokenId: i,\n      owner: await this.erc721.ownerOf(i).catch(() => ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero)\n    })));\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.erc721.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the number of NFTs of this contract currently owned by end users\n   * @returns the total number of NFTs of this contract in circulation (minted & not burned)\n   * @public\n   */\n  async totalCirculatingSupply() {\n    return await this.contractWrapper.readContract.totalSupply();\n  }\n  detectErc721Owned() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Enumerable\")) {\n      return new Erc721Enumerable(this.erc721, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * @internal\n */\nconst TieredDropPayloadSchema = BaseSignaturePayloadInput.extend({\n  tierPriority: zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()),\n  royaltyRecipient: zod__WEBPACK_IMPORTED_MODULE_57__.z.string().default(ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero),\n  royaltyBps: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.a[\"default\"](0),\n  quantity: BigNumberSchema.default(1)\n});\n\nclass Erc721TieredDrop {\n  constructor(erc721, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_TIERED_DROP.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  async getMetadataInTier(tier) {\n    const tiers = await this.contractWrapper.readContract.getMetadataForAllTiers();\n    const batches = tiers.find(t => t.tier === tier);\n    if (!batches) {\n      throw new Error(\"Tier not found in contract.\");\n    }\n    const nfts = await Promise.all(batches.ranges.map((range, i) => {\n      const nftsInRange = [];\n      const baseUri = batches.baseURIs[i];\n      for (let j = range.startIdInclusive.toNumber(); j < range.endIdNonInclusive.toNumber(); j++) {\n        const uri = `${baseUri}/${j}`;\n        const metadata = this.storage.downloadJSON(uri);\n        nftsInRange.push(metadata);\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  async getTokensInTier(tier) {\n    const endIndex = await this.contractWrapper.readContract.getTokensInTierLen();\n    if (endIndex.eq(0)) {\n      return [];\n    }\n    const ranges = await this.contractWrapper.readContract.getTokensInTier(tier, 0, endIndex);\n    const nfts = await Promise.all(ranges.map(range => {\n      const nftsInRange = [];\n      for (let i = range.startIdInclusive.toNumber(); i < range.endIdNonInclusive.toNumber(); i++) {\n        nftsInRange.push(this.erc721.get(i));\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  async createBatchWithTier(metadatas, tier, options) {\n    // TODO: Change this to on extension\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    const baseUri = getBaseUriFromBatch(batch);\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [batch.length, baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`, tier, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(\"\")]);\n    const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n    const startingIndex = event[0].args[1];\n    const endingIndex = event[0].args[2];\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.getTokenMetadata(id)\n      });\n    }\n    return results;\n  }\n  async createDelayedRevealBatchWithTier(placeholder, metadatas, password, tier, options) {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const placeholderUris = await this.storage.uploadBatch([_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.b.parse(placeholder)], {\n      rewriteFileNames: {\n        fileStartNumber: 0\n      }\n    });\n    const placeholderUri = getBaseUriFromBatch(placeholderUris);\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const uris = await this.storage.uploadBatch(metadatas.map(m => _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.b.parse(m)), {\n      onProgress: options?.onProgress,\n      rewriteFileNames: {\n        fileStartNumber: startFileNumber.toNumber()\n      }\n    });\n    const baseUri = getBaseUriFromBatch(uris);\n    const baseUriId = await this.contractWrapper.readContract.getBaseURICount();\n    const chainId = await this.contractWrapper.getChainID();\n    const hashedPassword = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, baseUriId, this.contractWrapper.readContract.address]);\n    const encryptedBaseUri = await this.contractWrapper.readContract.encryptDecrypt(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(baseUri), hashedPassword);\n    let data;\n    const provenanceHash = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n    data = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n    const receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`, tier, data]);\n    const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n    const startingIndex = event[0].args[1];\n    const endingIndex = event[0].args[2];\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.getTokenMetadata(id)\n      });\n    }\n    return results;\n  }\n  async reveal(batchId, password) {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const key = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchId, this.contractWrapper.readContract.address]);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"reveal\", [batchId, key])\n    };\n  }\n  async generate(payloadToSign) {\n    const [payload] = await this.generateBatch([payloadToSign]);\n    return payload;\n  }\n  async generateBatch(payloadsToSign) {\n    const parsedPayloads = payloadsToSign.map(payload => TieredDropPayloadSchema.parse(payload));\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"No signer available\");\n    return await Promise.all(parsedPayloads.map(async payload => {\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name: \"SignatureAction\",\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.readContract.address\n      }, {\n        GenericRequest: GenericRequest\n      }, await this.mapPayloadToContractStruct(payload));\n      return {\n        payload,\n        signature: signature.toString()\n      };\n    }));\n  }\n  async verify(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const verification = await this.contractWrapper.readContract.verify(message, signedPayload.signature);\n    return verification[0];\n  }\n  async claimWithSignature(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const pricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), signedPayload.payload.price, signedPayload.payload.currencyAddress);\n    const price = pricePerToken.mul(signedPayload.payload.quantity);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, price, signedPayload.payload.currencyAddress, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"claimWithSignature\", [message, signedPayload.signature], overrides);\n    const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(event[0].args.quantityClaimed);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.get(id)\n      });\n    }\n    return results;\n  }\n  async mapPayloadToContractStruct(payload) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), payload.price, payload.currencyAddress);\n    const data = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.defaultAbiCoder.encode([\"string[]\", \"address\", \"address\", \"uint256\", \"address\", \"uint256\", \"uint256\", \"address\"], [payload.tierPriority, payload.to, payload.royaltyRecipient, payload.royaltyBps, payload.primarySaleRecipient, payload.quantity, normalizedPricePerToken, payload.currencyAddress]);\n    return {\n      uid: payload.uid,\n      validityStartTimestamp: payload.mintStartTime,\n      validityEndTimestamp: payload.mintEndTime,\n      data\n    };\n  }\n}\n\n/**\n * Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nclass Erc721WithQuantitySignatureMintable {\n  constructor(contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT_SIGNATURE_MINTABLE_V2.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc721.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc721.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721WithQuantitySignatureMintable.generate}\n   * @twfeature ERC721SignatureMint\n   */\n  async mint(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    let message;\n    let price;\n    if (isLegacyNFTContract) {\n      message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      price = message.price;\n    } else {\n      message = await this.mapPayloadToContractStruct(mintRequest);\n      price = message.pricePerToken.mul(message.quantity);\n    }\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, price, mintRequest.currencyAddress, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintWithSignature\", [message, signature], overrides);\n    const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt\n    };\n  }\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC721SignatureMint\n   */\n  async mintBatch(signedPayloads) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const contractPayloads = await Promise.all(signedPayloads.map(async s => {\n      let message;\n      if (isLegacyNFTContract) {\n        message = await this.mapLegacyPayloadToContractStruct(s.payload);\n      } else {\n        message = await this.mapPayloadToContractStruct(s.payload);\n      }\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    }));\n    const encoded = contractPayloads.map(p => {\n      if (isLegacyNFTContract) {\n        const contract = this.contractWrapper.readContract;\n        return contract.interface.encodeFunctionData(\"mintWithSignature\", [p.message, p.signature]);\n      } else {\n        const contract = this.contractWrapper.readContract;\n        return contract.interface.encodeFunctionData(\"mintWithSignature\", [p.message, p.signature]);\n      }\n    });\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n    if (events.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    return events.map(log => ({\n      id: log.args.tokenIdMinted,\n      receipt\n    }));\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC721SignatureMint\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc721.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    let message;\n    let verification;\n    if (isLegacyNFTContract) {\n      const contract = this.contractWrapper.readContract;\n      message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      verification = await contract.verify(message, signature);\n    } else {\n      const contract = this.contractWrapper.readContract;\n      message = await this.mapPayloadToContractStruct(mintRequest);\n      verification = await contract.verify(message, signature);\n    }\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc721.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC721SignatureMint\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721WithQuantitySignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC721SignatureMint\n   */\n  async generateBatch(payloadsToSign) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const parsedRequests = payloadsToSign.map(m => Signature721WithQuantityInput.parse(m));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"No signer available\");\n    return await Promise.all(parsedRequests.map(async (m, i) => {\n      const uri = uris[i];\n      const finalPayload = Signature721WithQuantityOutput.parse({\n        ...m,\n        uri\n      });\n      let signature;\n      if (isLegacyNFTContract) {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"TokenERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: this.contractWrapper.readContract.address\n        }, {\n          MintRequest: MintRequest721\n        }, await this.mapLegacyPayloadToContractStruct(finalPayload));\n      } else {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"SignatureMintERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: await this.contractWrapper.readContract.address\n        }, {\n          MintRequest: MintRequest721withQuantity\n        },\n        // TYPEHASH\n        await this.mapPayloadToContractStruct(finalPayload));\n      }\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid\n    };\n  }\n  async mapLegacyPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      price: normalizedPricePerToken,\n      uri: mintRequest.uri,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n  async isLegacyNFTContract() {\n    if (hasFunction(\"contractType\", this.contractWrapper)) {\n      try {\n        const contractType = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8String(await this.contractWrapper.readContract.contractType());\n        return contractType.includes(\"TokenERC721\");\n      } catch (e) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass Erc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_NFT.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"query\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"mintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"burnable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"lazyMintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"tieredDropable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"signatureMintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_chainId\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc721Enumerable();\n    this.mintable = this.detectErc721Mintable();\n    this.burnable = this.detectErc721Burnable();\n    this.lazyMintable = this.detectErc721LazyMintable();\n    this.tieredDropable = this.detectErc721TieredDrop();\n    this.signatureMintable = this.detectErc721SignatureMintable();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  ////// Standard ERC721 Extension //////\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc721.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC721\n   */\n  async get(tokenId) {\n    const [owner, metadata] = await Promise.all([this.ownerOf(tokenId).catch(() => ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner,\n      metadata,\n      type: \"ERC721\",\n      supply: 1\n    };\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   * @twfeature ERC721\n   */\n  async ownerOf(tokenId) {\n    return await this.contractWrapper.readContract.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc721.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   * @twfeature ERC721\n   */\n  async balanceOf(address) {\n    return await this.contractWrapper.readContract.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return await this.contractWrapper.readContract.isApprovedForAll(address, operator);\n  }\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.erc721.transfer(walletAddress, tokenId);\n   * ```\n   * @twfeature ERC721\n   */\n  async transfer(to, tokenId) {\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom(address,address,uint256)\", [from, to, tokenId])\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  async setApprovalForAll(operator, approved) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [operator, approved])\n    };\n  }\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  async setApprovalForToken(operator, tokenId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [operator, tokenId])\n    };\n  }\n\n  ////// ERC721 Supply Extension //////\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc721.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC721Supply\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).all(queryParams);\n  }\n\n  /**\n   * Get All owners of minted NFTs on this contract\n   * @returns an array of token ids and owners\n   * @twfeature ERC721Supply\n   */\n  async getAllOwners() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).allOwners();\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return this.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the total count NFTs minted in this contract\n   */\n  async totalCirculatingSupply() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).totalCirculatingSupply();\n  }\n\n  ////// ERC721 Enumerable Extension //////\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc721.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC721Enumerable\n   */\n  async getOwned(walletAddress) {\n    if (this.query?.owned) {\n      return this.query.owned.all(walletAddress);\n    } else {\n      const address = walletAddress || (await this.contractWrapper.getSignerAddress());\n      const allOwners = await this.getAllOwners();\n      return Promise.all((allOwners || []).filter(i => address?.toLowerCase() === i.owner?.toLowerCase()).map(async i => await this.get(i.tokenId)));\n    }\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (this.query?.owned) {\n      return this.query.owned.tokenIds(walletAddress);\n    } else {\n      const address = walletAddress || (await this.contractWrapper.getSignerAddress());\n      const allOwners = await this.getAllOwners();\n      return (allOwners || []).filter(i => address?.toLowerCase() === i.owner?.toLowerCase()).map(i => ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(i.tokenId));\n    }\n  }\n\n  ////// ERC721 Mintable Extension //////\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.erc721.mint(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC721Mintable\n   */\n  async mint(metadata) {\n    return this.mintTo(await this.contractWrapper.getSignerAddress(), metadata);\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.erc721.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC721Mintable\n   */\n  async mintTo(receiver, metadata) {\n    return assertEnabled(this.mintable, FEATURE_NFT_MINTABLE).to(receiver, metadata);\n  }\n\n  ////// ERC721 Batch Mintable Extension //////\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.erc721.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC721BatchMintable\n   */\n  async mintBatch(metadatas) {\n    return this.mintBatchTo(await this.contractWrapper.getSignerAddress(), metadatas);\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.erc721.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC721BatchMintable\n   */\n  async mintBatchTo(receiver, metadatas) {\n    return assertEnabled(this.mintable?.batch, FEATURE_NFT_BATCH_MINTABLE).to(receiver, metadatas);\n  }\n\n  ////// ERC721 Burnable Extension //////\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.erc721.burn(tokenId);\n   * ```\n   * @twfeature ERC721Burnable\n   */\n  async burn(tokenId) {\n    return assertEnabled(this.burnable, FEATURE_NFT_BURNABLE).token(tokenId);\n  }\n\n  ////// ERC721 LazyMint Extension //////\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   * @twfeature ERC721LazyMintable\n   */\n  async lazyMint(metadatas, options) {\n    return assertEnabled(this.lazyMintable, FEATURE_NFT_LAZY_MINTABLE).lazyMint(metadatas, options);\n  }\n\n  ////// ERC721 Claimable Extension //////\n\n  /**\n   * Claim unique NFTs to the connected wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claim(quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   * @twfeature ERC721Claimable\n   */\n  async claim(quantity, options) {\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), quantity, options);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options\n   * @twfeature ERC721Claimable\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async claimTo(destinationAddress, quantity, options) {\n    const claimWithConditions = this.lazyMintable?.claimWithConditions;\n    const claim = this.lazyMintable?.claim;\n    if (claimWithConditions) {\n      return claimWithConditions.to(destinationAddress, quantity, options);\n    }\n    if (claim) {\n      return claim.to(destinationAddress, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param options\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    const claimWithConditions = this.lazyMintable?.claimWithConditions;\n    const claim = this.lazyMintable?.claim;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n  }\n  async totalClaimedSupply() {\n    const contract = this.contractWrapper;\n    if (hasFunction(\"nextTokenIdToClaim\", contract)) {\n      return contract.readContract.nextTokenIdToClaim();\n    }\n    if (hasFunction(\"totalMinted\", contract)) {\n      return contract.readContract.totalMinted();\n    }\n    throw new Error(\"No function found on contract to get total claimed supply\");\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return (await this.nextTokenIdToMint()).sub(await this.totalClaimedSupply());\n  }\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC721ClaimableWithConditions\n   */\n  get claimConditions() {\n    return assertEnabled(this.lazyMintable?.claimWithConditions, FEATURE_NFT_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC721 Tiered Drop Extension //////\n\n  /**\n   * Tiered Drop\n   * @remarks Drop lazy minted NFTs using a tiered drop mechanism.\n   */\n  get tieredDrop() {\n    return assertEnabled(this.tieredDropable, FEATURE_NFT_TIERED_DROP);\n  }\n\n  ////// ERC721 SignatureMint Extension //////\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc721.signature.generate()` documentation\n   * const signedPayload = contract.erc721.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc721.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC721SignatureMint\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_NFT_SIGNATURE_MINTABLE_V2);\n  }\n\n  ////// ERC721 DelayedReveal Extension //////\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc721.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC721Revealable\n   */\n  get revealer() {\n    return assertEnabled(this.lazyMintable?.revealer, FEATURE_NFT_REVEALABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.readContract.tokenURI(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return await this.contractWrapper.readContract.nextTokenIdToMint();\n    } else if (hasFunction(\"totalSupply\", this.contractWrapper)) {\n      return await this.contractWrapper.readContract.totalSupply();\n    } else {\n      throw new Error(\"Contract requires either `nextTokenIdToMint` or `totalSupply` function available to determine the next token ID to mint\");\n    }\n  }\n  detectErc721Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Supply\") || hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return new Erc721Supply(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Mintable\")) {\n      return new Erc721Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Burnable\")) {\n      return new Erc721Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721LazyMintable\")) {\n      return new Erc721LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721TieredDrop() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721TieredDrop\")) {\n      return new Erc721TieredDrop(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV1\") || detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV2\")) {\n      return new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass StandardErc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc721\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_chainId\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Get All Minted NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc721.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc721.getOwned(walletAddress);\n  }\n\n  /**\n   * Get Owned Token Ids\n   * @remarks Get all the token ids of NFTs owned by a specific wallet (no metadata)\n   */\n  async getOwnedTokenIds(walletAddress) {\n    return this.erc721.getOwnedTokenIds(walletAddress);\n  }\n\n  /**\n   * Get the total count NFTs minted in this contract\n   */\n  async totalSupply() {\n    return this.erc721.totalCirculatingSupply();\n  }\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  async transfer(to, tokenId) {\n    return this.erc721.transfer(to, tokenId);\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  async setApprovalForAll(operator, approved) {\n    return this.erc721.setApprovalForAll(operator, approved);\n  }\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  async setApprovalForToken(operator, tokenId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approve\", [operator, tokenId])\n    };\n  }\n}\n\n/**\n * @internal\n */\nconst AirdropAddressInput = zod__WEBPACK_IMPORTED_MODULE_57__.z.object({\n  address: AddressSchema,\n  quantity: _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.A[\"default\"](1)\n});\n\n/**\n * @internal\n */\nconst AirdropInputSchema = zod__WEBPACK_IMPORTED_MODULE_57__.z.union([zod__WEBPACK_IMPORTED_MODULE_57__.z.array(zod__WEBPACK_IMPORTED_MODULE_57__.z.string()).transform(strings => strings.map(address => AirdropAddressInput.parse({\n  address\n}))), zod__WEBPACK_IMPORTED_MODULE_57__.z.array(AirdropAddressInput)]);\n\nclass Erc1155Burnable {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_BURNABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from the connected wallet\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of the NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.tokens(tokenId, amount);\n   * ```\n   */\n  async tokens(tokenId, amount) {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.from(account, tokenId, amount);\n  }\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from a specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenId - the tokenId to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of this NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.from(account, tokenId, amount);\n   * ```\n   */\n  async from(account, tokenId, amount) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burn\", [account, tokenId, amount])\n    };\n  }\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the connected wallet\n   *\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batch(tokenIds, amounts);\n   * ```\n   */\n  async batch(tokenIds, amounts) {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.batchFrom(account, tokenIds, amounts);\n  }\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batchFrom(account, tokenIds, amounts);\n   * ```\n   */\n  async batchFrom(account, tokenIds, amounts) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"burnBatch\", [account, tokenIds, amounts])\n    };\n  }\n}\n\n/**\n * List ERC1155 NFTs\n * @remarks Easily list all the NFTs in a ERC1155 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.edition.query.all();\n * ```\n * @public\n */\nclass Erc1155Enumerable {\n  constructor(erc1155, contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_ENUMERABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc1155\", void 0);\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.edition.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(queryParams?.count || _QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.D).toNumber();\n    const maxId = Math.min((await this.totalCount()).toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc1155.get((start + i).toString())));\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.contractWrapper.readContract.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the supply of token for a given tokenId.\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCirculatingSupply(tokenId) {\n    return await this.contractWrapper.readContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.edition.query.owned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async owned(walletAddress) {\n    const address = walletAddress || (await this.contractWrapper.getSignerAddress());\n    const maxId = await this.contractWrapper.readContract.nextTokenIdToMint();\n    const balances = await this.contractWrapper.readContract.balanceOfBatch(Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys()));\n    const ownedBalances = balances.map((b, i) => {\n      return {\n        tokenId: i,\n        balance: b\n      };\n    }).filter(b => b.balance.gt(0));\n    return await Promise.all(ownedBalances.map(async b => {\n      const editionMetadata = await this.erc1155.get(b.tokenId.toString());\n      return {\n        ...editionMetadata,\n        owner: address,\n        quantityOwned: b.balance.toNumber()\n      };\n    }));\n  }\n}\n\nasync function getPrebuiltInfo(address, provider) {\n  try {\n    const contract = new ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.Contract(address, _thirdweb_dev_contracts_js_dist_abis_IThirdwebContract_json__WEBPACK_IMPORTED_MODULE_4__, provider);\n    const [type, version] = await Promise.all([ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8String(await contract.contractType()) // eslint-disable-next-line no-control-regex\n    .replace(/\\x00/g, \"\"), await contract.contractVersion()]);\n    return {\n      type,\n      version\n    };\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.drop.claim.to(\"0x...\", tokenId, quantity);\n * ```\n */\nclass ERC1155Claimable {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_CLAIM_CUSTOM.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return TransactionTask.make({\n      contractWrapper: this.contractWrapper,\n      functionName: \"claim\",\n      args: [destinationAddress, tokenId, quantity],\n      overrides\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @returns - Receipt for the transaction\n   */\n  async to(destinationAddress, tokenId, quantity, options) {\n    const tx = await this.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    return await tx.execute();\n  }\n}\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.claim(tokenId, quantity);\n * await contract.erc1155.claimConditions.getActive(tokenId);\n * ```\n */\nclass Erc1155ClaimableWithConditions {\n  constructor(contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_CLAIM_CONDITIONS_V2.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"conditions\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropErc1155ClaimConditions(contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @returns - Receipt for the transaction\n   */\n  async to(destinationAddress, tokenId, quantity, options) {\n    const tx = await this.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    return await tx.execute();\n  }\n}\n\nclass Erc1155LazyMintable {\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.edition.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.edition.drop.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Claim tokens and configure claim conditions\n   * @remarks Let users claim NFTs. Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const quantity = 10;\n   * const tokenId = 0;\n   * await contract.erc1155.claimTo(\"0x...\", 0, quantity);\n   * ```\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_LAZY_MINTABLE_V2.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"revealer\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"claimWithConditions\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"claim\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc1155\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.claim = this.detectErc1155Claimable();\n    this.claimWithConditions = this.detectErc1155ClaimableWithConditions();\n    this.revealer = this.detectErc1155Revealable();\n  }\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  async lazyMint(metadatas, options) {\n    const startFileNumber = await this.erc1155.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    // ensure baseUri is the same for the entire batch\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n    for (let i = 0; i < batch.length; i++) {\n      const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n      if (baseUri !== uri) {\n        throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n      }\n    }\n    const isLegacyEditionDropContract = await this.isLegacyEditionDropContract();\n    let receipt;\n    if (isLegacyEditionDropContract) {\n      receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [batch.length, `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`]);\n    } else {\n      // new contracts/extensions have support for delayed reveal that adds an extra parameter to lazyMint\n      receipt = await this.contractWrapper.sendTransaction(\"lazyMint\", [batch.length, `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8Bytes(\"\")]);\n    }\n    const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = event[0].args.endTokenId;\n    const results = [];\n    for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc1155.getTokenMetadata(id)\n      });\n    }\n    return results;\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  detectErc1155Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimCustom\")) {\n      return new ERC1155Claimable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV2\")) {\n      return new Erc1155ClaimableWithConditions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_EDITION_REVEALABLE.name, () => this.erc1155.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n  async isLegacyEditionDropContract() {\n    const info = await getPrebuiltInfo(this.contractWrapper.readContract.address, this.contractWrapper.getProvider());\n    return info && info.type === \"DropERC1155\" && info.version < 3;\n  }\n}\n\n/**\n * Mint Many ERC1155 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.batch.to(walletAddress, [nftMetadataWithSupply1, nftMetadataWithSupply2, ...]);\n * ```\n * @public\n */\nclass Erc1155BatchMintable {\n  constructor(erc1155, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_BATCH_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc1155\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.edition.mint.batch.to(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  async to(to, metadataWithSupply) {\n    const metadatas = metadataWithSupply.map(a => a.metadata);\n    const supplies = metadataWithSupply.map(a => a.supply);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const encoded = uris.map((uri, index) => this.contractWrapper.readContract.interface.encodeFunctionData(\"mintTo\", [to, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256, uri, supplies[index]]));\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n    return events.map(e => {\n      const id = e.args.tokenIdMinted;\n      return {\n        id,\n        receipt,\n        data: () => this.erc1155.get(id)\n      };\n    });\n  }\n}\n\n/**\n * Mint ERC1155 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\nclass Erc1155Mintable {\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc1155\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"batch\", void 0);\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc1155BatchMintable();\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.edition.mint.to(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  async to(to, metadataWithSupply) {\n    const uri = await uploadOrExtractURI(metadataWithSupply.metadata, this.storage);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [to, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256, uri, metadataWithSupply.supply]);\n    const event = this.contractWrapper.parseLogs(\"TransferSingle\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"TransferSingleEvent event not found\");\n    }\n    const id = event[0].args.id;\n    return {\n      id,\n      receipt,\n      data: () => this.erc1155.get(id.toString())\n    };\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   * const tokenId = 0;\n   * const additionalSupply = 1000;\n   *\n   * const tx = await contract.edition.mint.additionalSupplyTo(toAddress, tokenId, additionalSupply);\n   * ```\n   */\n  async additionalSupplyTo(to, tokenId, additionalSupply) {\n    const metadata = await this.erc1155.getTokenMetadata(tokenId);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintTo\", [to, tokenId, metadata.uri, additionalSupply]);\n    return {\n      id: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(tokenId),\n      receipt,\n      data: () => this.erc1155.get(tokenId)\n    };\n  }\n  detectErc1155BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155BatchMintable\")) {\n      return new Erc1155BatchMintable(this.erc1155, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nclass Erc1155SignatureMintable {\n  constructor(contractWrapper, storage, roles) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION_SIGNATURE_MINTABLE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"roles\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc1155.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mint(signedPayload);\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc1155SignatureMintable.generate}\n   * @twfeature ERC1155SignatureMintable\n   */\n  async mint(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, message.pricePerToken.mul(message.quantity), mintRequest.currencyAddress, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"mintWithSignature\", [message, signature], overrides);\n    const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    const id = t[0].args.tokenIdMinted;\n    return {\n      id,\n      receipt\n    };\n  }\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a batch of payloads to sign in the `generateBatch()` documentation\n   * const signedPayloads = contract.erc1155.signature.generateBatch(payloads);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mintBatch(signedPayloads);\n   * ```\n   *\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC1155SignatureMintable\n   */\n  async mintBatch(signedPayloads) {\n    const contractPayloads = await Promise.all(signedPayloads.map(async s => {\n      const message = await this.mapPayloadToContractStruct(s.payload);\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    }));\n    const encoded = contractPayloads.map(p => {\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\"mintWithSignature\", [p.message, p.signature]);\n    });\n    const receipt = await this.contractWrapper.multiCall(encoded);\n    const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n    if (events.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n    return events.map(log => ({\n      id: log.args.tokenIdMinted,\n      receipt\n    }));\n  }\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC1155SignatureMintable\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.erc1155.signature.generate(payload);\n   * // Now you can verify that the payload is valid\n   * const isValid = await contract.erc1155.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.readContract.verify(message, signature);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint an NFT dynamically.\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generate(payloadToSign) {\n    const payload = {\n      ...payloadToSign,\n      tokenId: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256\n    };\n    return this.generateFromTokenId(payload);\n  }\n\n  /**\n   * Generate a signature that can be used to mint additionaly supply to an existing NFT.\n   *\n   * @remarks Takes in a payload with the token ID of an existing NFT, and signs it with your private key. The generated signature can then be used to mint additional supply to the NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   tokenId: 0, // Instead of metadata, we specificy the token ID of the NFT to mint supply to\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generateFromTokenId(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateFromTokenId(payloadToSign) {\n    const payloads = await this.generateBatchFromTokenIds([payloadToSign]);\n    return payloads[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many new NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    const payloads = payloadsToSign.map(payload => ({\n      ...payload,\n      tokenId: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256\n    }));\n    return this.generateBatchFromTokenIds(payloads);\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint new NFTs or additionaly supply to existing NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generateFromTokenId}\n   *\n   * @param payloadsToSign - the payloads to sign with tokenIds specified\n   * @returns an array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatchFromTokenIds(payloadsToSign) {\n    await this.roles?.verify([\"minter\"], await this.contractWrapper.getSignerAddress());\n    const parsedRequests = payloadsToSign.map(m => Signature1155PayloadInputWithTokenId.parse(m));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"No signer available\");\n    const contractInfo = await getPrebuiltInfo(this.contractWrapper.readContract.address, this.contractWrapper.getProvider());\n    const isLegacyContract = contractInfo?.type === \"TokenERC1155\";\n    return await Promise.all(parsedRequests.map(async (m, i) => {\n      const uri = uris[i];\n      const finalPayload = Signature1155PayloadOutput.parse({\n        ...m,\n        uri\n      });\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name: isLegacyContract ? \"TokenERC1155\" : \"SignatureMintERC1155\",\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.readContract.address\n      }, {\n        MintRequest: MintRequest1155\n      },\n      // TYPEHASH\n      await this.mapPayloadToContractStruct(finalPayload));\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      tokenId: mintRequest.tokenId,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n}\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass Erc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_EDITION.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"query\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"mintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"burnable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"lazyMintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"signatureMintable\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_chainId\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc1155Enumerable();\n    this.mintable = this.detectErc1155Mintable();\n    this.burnable = this.detectErc1155Burnable();\n    this.lazyMintable = this.detectErc1155LazyMintable();\n    this.signatureMintable = this.detectErc1155SignatureMintable();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.erc1155.get(0);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC1155\n   */\n  async get(tokenId) {\n    const [supply, metadata] = await Promise.all([this.contractWrapper.readContract.totalSupply(tokenId).catch(() => ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0)), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner: ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.AddressZero,\n      metadata,\n      type: \"ERC1155\",\n      supply: supply.toNumber()\n    };\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  async totalSupply(tokenId) {\n    return await this.contractWrapper.readContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.erc1155.balanceOf(walletAddress, tokenId);\n   * ```\n   * @twfeature ERC1155\n   */\n  async balanceOf(address, tokenId) {\n    return await this.contractWrapper.readContract.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress(), tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return await this.contractWrapper.readContract.isApprovedForAll(address, operator);\n  }\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.erc1155.transfer(toAddress, tokenId, amount);\n   * ```\n   * @twfeature ERC1155\n   */\n  async transfer(to, tokenId, amount) {\n    let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n    const from = await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"safeTransferFrom\", [from, to, tokenId, amount, data])\n    };\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  async setApprovalForAll(operator, approved) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setApprovalForAll\", [operator, approved])\n    };\n  }\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.erc1155.airdrop(tokenId, addresses);\n   * ```\n   */\n  async airdrop(tokenId, addresses) {\n    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0];\n    const from = await this.contractWrapper.getSignerAddress();\n    const balanceOf = await this.balanceOf(from, tokenId);\n    const input = AirdropInputSchema.parse(addresses);\n    const totalToAirdrop = input.reduce((prev, curr) => {\n      return prev + Number(curr?.quantity || 1);\n    }, 0);\n    if (balanceOf.toNumber() < totalToAirdrop) {\n      throw new Error(`The caller owns ${balanceOf.toNumber()} NFTs, but wants to airdrop ${totalToAirdrop} NFTs.`);\n    }\n    const encoded = input.map(_ref => {\n      let {\n        address: to,\n        quantity\n      } = _ref;\n      return this.contractWrapper.readContract.interface.encodeFunctionData(\"safeTransferFrom\", [from, to, tokenId, quantity, data]);\n    });\n    return {\n      receipt: await this.contractWrapper.multiCall(encoded)\n    };\n  }\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return await this.contractWrapper.readContract.nextTokenIdToMint();\n    } else {\n      throw new Error(\"Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint\");\n    }\n  }\n\n  ////// ERC1155 Enumerable Extension //////\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc1155.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC1155Enumerable\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).all(queryParams);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCount();\n  }\n\n  /**\n   * Get the supply of token for a given tokenId.\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCirculatingSupply(tokenId) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCirculatingSupply(tokenId);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc1155.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC1155Enumerable\n   */\n  async getOwned(walletAddress) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).owned(walletAddress);\n  }\n\n  ////// ERC1155 Mintable Extension //////\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.erc1155.mint(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC1155Mintable\n   */\n  async mint(metadataWithSupply) {\n    return this.mintTo(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.erc1155.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC1155Mintable\n   */\n  async mintTo(receiver, metadataWithSupply) {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).to(receiver, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT\n   * @remarks Increase the supply of an existing NFT and mint it to the connected wallet address\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const additionalSupply = 1000;\n   * await contract.erc1155.mintAdditionalSupply(tokenId, additionalSupply);\n   * ```\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   * @twfeature ERC1155Mintable\n   */\n  async mintAdditionalSupply(tokenId, additionalSupply) {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo(await this.contractWrapper.getSignerAddress(), tokenId, additionalSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  async mintAdditionalSupplyTo(receiver, tokenId, additionalSupply) {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo(receiver, tokenId, additionalSupply);\n  }\n\n  ////// ERC1155 BatchMintable Extension //////\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.erc1155.mintBatch(metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC1155BatchMintable\n   */\n  async mintBatch(metadataWithSupply) {\n    return this.mintBatchTo(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.erc1155.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC1155BatchMintable\n   */\n  async mintBatchTo(receiver, metadataWithSupply) {\n    return assertEnabled(this.mintable?.batch, FEATURE_EDITION_BATCH_MINTABLE).to(receiver, metadataWithSupply);\n  }\n\n  ////// ERC1155 Burnable Extension //////\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from the connected wallet\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of the NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.erc1155.burn(tokenId, amount);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  async burn(tokenId, amount) {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).tokens(tokenId, amount);\n  }\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from a specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenId - the tokenId to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of this NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.erc1155.burnFrom(account, tokenId, amount);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  async burnFrom(account, tokenId, amount) {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).from(account, tokenId, amount);\n  }\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the connected wallet\n   *\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.erc1155.burnBatch(tokenIds, amounts);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  async burnBatch(tokenIds, amounts) {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batch(tokenIds, amounts);\n  }\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.erc1155.burnBatchFrom(account, tokenIds, amounts);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  async burnBatchFrom(account, tokenIds, amounts) {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batchFrom(account, tokenIds, amounts);\n  }\n\n  ////// ERC721 LazyMint Extension //////\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   * @twfeature ERC1155LazyMintable\n   */\n  async lazyMint(metadatas, options) {\n    return assertEnabled(this.lazyMintable, FEATURE_EDITION_LAZY_MINTABLE_V2).lazyMint(metadatas, options);\n  }\n\n  ////// ERC1155 Claimable Extension //////\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    const claimWithConditions = this.lazyMintable?.claimWithConditions;\n    const claim = this.lazyMintable?.claim;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Claim NFTs\n   *\n   * @remarks Let the connected wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claim(tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @returns - Receipt for the transaction\n   * @twfeature ERC1155Claimable\n   */\n  async claim(tokenId, quantity, options) {\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), tokenId, quantity, options);\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @returns - Receipt for the transaction\n   * @twfeature ERC1155Claimable\n   */\n  async claimTo(destinationAddress, tokenId, quantity, options) {\n    const claimWithConditions = this.lazyMintable?.claimWithConditions;\n    const claim = this.lazyMintable?.claim;\n    if (claimWithConditions) {\n      return claimWithConditions.to(destinationAddress, tokenId, quantity, options);\n    }\n    if (claim) {\n      return claim.to(destinationAddress, tokenId, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc1155.claimConditions.set(tokenId, claimConditions);\n   * ```\n   * @twfeature ERC1155ClaimableWithConditions\n   */\n  get claimConditions() {\n    return assertEnabled(this.lazyMintable?.claimWithConditions, FEATURE_EDITION_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC1155 SignatureMintable Extension //////\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc1155.signature.generate()` documentation\n   * const signedPayload = contract.erc1155.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC1155SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_EDITION_SIGNATURE_MINTABLE);\n  }\n\n  ////// ERC1155 DelayedReveal Extension //////\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc1155.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc1155.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC1155Revealable\n   */\n  get revealer() {\n    return assertEnabled(this.lazyMintable?.revealer, FEATURE_EDITION_REVEALABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   * @param tokenId - the token Id to fetch\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.readContract.uri(tokenId);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n  detectErc1155Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Enumerable\")) {\n      return new Erc1155Enumerable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Mintable\")) {\n      return new Erc1155Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Burnable\")) {\n      return new Erc1155Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV1\") || detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV2\")) {\n      return new Erc1155LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155SignatureMintable\")) {\n      return new Erc1155SignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass StandardErc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"erc1155\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_chainId\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT Metadata\n   *\n   * @example\n   * ```javascript\n   * const nft = await contract.get(\"0\");\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   */\n  async totalSupply(tokenId) {\n    return this.erc1155.totalSupply(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.balanceOf(walletAddress, tokenId);\n   * ```\n   */\n  async balanceOf(address, tokenId) {\n    return this.erc1155.balanceOf(address, tokenId);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return this.erc1155.balance(tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc1155.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer a single NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  async transfer(to, tokenId, amount) {\n    let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n    return this.erc1155.transfer(to, tokenId, amount, data);\n  }\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  async setApprovalForAll(operator, approved) {\n    return this.erc1155.setApprovalForAll(operator, approved);\n  }\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   * @twfeature ERC1155\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.airdrop(tokenId, addresses);\n   * ```\n   */\n  async airdrop(tokenId, addresses) {\n    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0];\n    return this.erc1155.airdrop(tokenId, addresses, data);\n  }\n}\n\n/**\n * This method checks if the given token is approved for the transferrerContractAddress contract.\n * This is particularly useful for contracts that need to transfer NFTs on the users' behalf\n *\n * @internal\n * @param provider - The connected provider\n * @param transferrerContractAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param owner - The address of the account that owns the token.\n * @returns - True if the transferrerContractAddress is approved on the token, false otherwise.\n */\nasync function isTokenApprovedForTransfer(provider, transferrerContractAddress, assetContract, tokenId, owner) {\n  try {\n    const erc165 = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(assetContract, _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_0__, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(assetContract, _thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, provider);\n      const approved = await asset.isApprovedForAll(owner, transferrerContractAddress);\n      if (approved) {\n        return true;\n      }\n      return (await asset.getApproved(tokenId)).toLowerCase() === transferrerContractAddress.toLowerCase();\n    } else if (isERC1155) {\n      const asset = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(assetContract, _thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, provider);\n      return await asset.isApprovedForAll(owner, transferrerContractAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param signerOrProvider\n * @param marketplaceAddress\n * @param assetContract\n * @param tokenId\n * @param from\n */\nasync function handleTokenApproval(signerOrProvider, marketplaceAddress, assetContract, tokenId, from) {\n  const erc165 = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(assetContract, _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_0__, signerOrProvider);\n  const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n  const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n  // check for token approval\n  if (isERC721) {\n    const asset = new ContractWrapper(signerOrProvider, assetContract, _thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, {});\n    const approved = await asset.readContract.isApprovedForAll(from, marketplaceAddress);\n    if (!approved) {\n      const isTokenApproved = (await asset.readContract.getApproved(tokenId)).toLowerCase() === marketplaceAddress.toLowerCase();\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n      }\n    }\n  } else if (isERC1155) {\n    const asset = new ContractWrapper(signerOrProvider, assetContract, _thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, {});\n    const approved = await asset.readContract.isApprovedForAll(from, marketplaceAddress);\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nfunction validateNewListingParam(param) {\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(param.assetContractAddress !== undefined && param.assetContractAddress !== null, \"Asset contract address is required\");\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null, \"Buyout price is required\");\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null, \"Listing duration is required\");\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(param.startTimestamp !== undefined && param.startTimestamp !== null, \"Start time is required\");\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(param.tokenId !== undefined && param.tokenId !== null, \"Token ID is required\");\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(param.quantity !== undefined && param.quantity !== null, \"Quantity is required\");\n  switch (param.type) {\n    case \"NewAuctionListing\":\n      {\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null, \"Reserve price is required\");\n      }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer\n * @returns - An `Offer` object\n */\nasync function mapOffer(provider, listingId, offer) {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(provider, offer.currency, offer.quantityWanted.mul(offer.pricePerToken)),\n    listingId\n  };\n}\nfunction isWinningBid(winningPrice, newBidPrice, bidBuffer) {\n  bidBuffer = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(bidBuffer);\n  winningPrice = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(winningPrice);\n  newBidPrice = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(newBidPrice);\n  if (winningPrice.eq(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0))) {\n    return false;\n  }\n  const buffer = newBidPrice.sub(winningPrice).mul(_QueryParams_ac0149c6_esm_js__WEBPACK_IMPORTED_MODULE_59__.M).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceDirect {\n  constructor(contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.assetContract === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Auction\", \"Direct\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  async getActiveOffer(listingId, address) {\n    await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(ethers__WEBPACK_IMPORTED_MODULE_58__.utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.readContract.offers(listingId, address);\n    if (offers.offeror === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId), offers);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async createListing(listing) {\n    validateNewListingParam(listing);\n    await handleTokenApproval(this.contractWrapper.getSignerOrProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, listing.currencyContractAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createListing\", [{\n      assetContract: listing.assetContractAddress,\n      tokenId: listing.tokenId,\n      buyoutPricePerToken: normalizedPricePerToken,\n      currencyToAccept: cleanCurrencyAddress(listing.currencyContractAddress),\n      listingType: ListingType.Direct,\n      quantityToList: listing.quantity,\n      reservePricePerToken: normalizedPricePerToken,\n      secondsUntilEndTime: listing.listingDurationInSeconds,\n      startTime: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingStartTime)\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   * @remarks Make an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n   *\n   * // The listing ID of the asset you want to offer on\n   * const listingId = 0;\n   * // The price you are willing to offer per token\n   * const pricePerToken = 1;\n   * // The quantity of tokens you want to receive for this offer\n   * const quantity = 1;\n   * // The address of the currency you are making the offer in (must be ERC-20)\n   * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n   *\n   * await contract.direct.makeOffer(\n   *   listingId,\n   *   quantity,\n   *   currencyContractAddress,\n   *   pricePerToken\n   * );\n   * ```\n   */\n  async makeOffer(listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) {\n    if (isNativeToken(currencyContractAddress)) {\n      throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n    }\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n    const quantity = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(quantityDesired);\n    const value = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, currencyContractAddress, overrides);\n    let expirationTimestamp = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256;\n    if (expirationDate) {\n      expirationTimestamp = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(Math.floor(expirationDate.getTime() / 1000));\n    }\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"offer\", [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp], overrides)\n    };\n  }\n\n  /**\n   * Accept an offer on a direct listing\n   *\n   * @remarks Accept an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const offeror = \"0x...\";\n   *\n   * await contract.direct.acceptOffer(listingId, offeror);\n   * ```\n   */\n  async acceptOffer(listingId, addressOfOfferor) {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    const offer = await this.contractWrapper.readContract.offers(listingId, addressOfOfferor);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"acceptOffer\", [listingId, addressOfOfferor, offer.currency, offer.pricePerToken])\n    };\n  }\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  async buyoutListing(listingId, quantityDesired, receiver) {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(quantityDesired);\n    const value = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"buy\", [listingId, buyFor, quantity, listing.currencyContractAddress, value], overrides)\n    };\n  }\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  async updateListing(listing) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [listing.id, listing.quantity, listing.buyoutPrice,\n      // reserve price, doesn't matter for direct listing\n      listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInSeconds, listing.secondsUntilEnd])\n    };\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  async cancelListing(listingId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelDirectListing\", [listingId])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(listing.assetContractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_0__, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(listing.assetContractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_1__, provider);\n      const valid = (await asset.ownerOf(listing.tokenId)).toLowerCase() === listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(listing.assetContractAddress, _thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_2__, provider);\n      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n}\n\n/**\n * Handles auction listings\n * @public\n */\nclass MarketplaceAuction {\n  constructor(contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"encoder\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.encoder = new ContractEncoder(contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.readContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Direct\", \"Auction\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(listingId) {\n    await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(listingId);\n    if (offers.offeror === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(listingId) {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    const offers = await this.contractWrapper.readContract.winningBid(listingId);\n    const now = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed());\n    const auction = closedAuctions.find(a => a.args.listingId.eq(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId)));\n    if (!auction) {\n      throw new Error(`Could not find auction with listingId ${listingId} in closed auctions`);\n    }\n    return auction.args.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async createListing(listing) {\n    validateNewListingParam(listing);\n    await handleTokenApproval(this.contractWrapper.getSignerOrProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, listing.currencyContractAddress);\n    const normalizedReservePrice = await normalizePriceValue(this.contractWrapper.getProvider(), listing.reservePricePerToken, listing.currencyContractAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createListing\", [{\n      assetContract: listing.assetContractAddress,\n      tokenId: listing.tokenId,\n      buyoutPricePerToken: normalizedPricePerToken,\n      currencyToAccept: cleanCurrencyAddress(listing.currencyContractAddress),\n      listingType: ListingType.Auction,\n      quantityToList: listing.quantity,\n      reservePricePerToken: normalizedReservePrice,\n      secondsUntilEndTime: listing.listingDurationInSeconds,\n      startTime: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingStartTime)\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  async buyoutListing(listingId) {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), listing.currencyContractAddress);\n    return this.makeBid(listingId, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  async makeBid(listingId, pricePerToken) {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);\n    if (normalizedPrice.eq(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    const bidBuffer = await this.contractWrapper.readContract.bidBufferBps();\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinnner = isWinningBid(winningBid.pricePerToken, normalizedPrice, bidBuffer);\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.reservePrice);\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(tokenPrice.gte(reservePrice), \"Bid price is too low based on reserve price\");\n    }\n    const quantity = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"offer\", [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.constants.MaxUint256], overrides)\n    };\n  }\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  async cancelListing(listingId) {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    const now = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.startTimeInEpochSeconds);\n    const offers = await this.contractWrapper.readContract.winningBid(listingId);\n    if (now.gt(startTime) && offers.offeror !== ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()])\n    };\n  }\n\n  /**\n   * Close the Auction for the buyer or the seller\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer or the seller.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  async closeListing(listingId, closeFor) {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"closeAuction\", [ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId), closeFor])\n      };\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.executeSale(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   */\n  async executeSale(listingId) {\n    const listing = await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId));\n    try {\n      const winningBid = await this.getWinningBid(listingId);\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"closeAuction\", [listingId, listing.sellerAddress]);\n      const closeForBuyer = this.encoder.encode(\"closeAuction\", [listingId, winningBid.buyerAddress]);\n      return await this.contractWrapper.multiCall([closeForSeller, closeForBuyer]);\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  async updateListing(listing) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"updateListing\", [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds])\n    };\n  }\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.readContract.bidBufferBps();\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param listingId - the listing id of the auction\n   */\n  async getMinimumNextBid(listingId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), await this.validateListing(ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listingId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    winningBid.currencyValue.value :\n    // if there is no winning bid use the reserve price\n    listing.reservePrice;\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),\n      reservePrice: ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction\n    };\n  }\n}\n\nconst DropErc20ContractInput = CommonContractSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc20ContractOutput = CommonContractOutputSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc20ContractDeploy = DropErc20ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc20ContractSchema = {\n  deploy: DropErc20ContractDeploy,\n  output: DropErc20ContractOutput,\n  input: DropErc20ContractInput\n};\n\nconst MultiwrapContractInput = CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst MultiwrapContractOutput = CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst MultiwrapContractDeploy = MultiwrapContractInput.merge(CommonTrustedForwarderSchema);\nconst MultiwrapContractSchema = {\n  deploy: MultiwrapContractDeploy,\n  output: MultiwrapContractOutput,\n  input: MultiwrapContractInput\n};\n\nconst EditionDropInitializer = {\n  name: \"DropERC1155\",\n  contractType: \"edition-drop\",\n  schema: DropErc1155ContractSchema,\n  roles: [\"admin\", \"minter\", \"transfer\"],\n  initialize: async function () {\n    for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {\n      _ref[_key] = arguments[_key];\n    }\n    let [network, address, storage, options] = _ref;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([await EditionDropInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_edition-drop-fd14fe0e_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./edition-drop-fd14fe0e.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/edition-drop-fd14fe0e.esm.js\")), provider.getNetwork()]);\n    return new contract.EditionDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    const contractInfo = await assertContractType(address, provider, \"edition-drop\");\n    return contractInfo.version > 2 ? (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_DropERC1155_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/DropERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC1155.json\", 19))).default : (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json\", 19))).default;\n  }\n};\nconst EditionInitializer = {\n  name: \"TokenERC1155\",\n  contractType: \"edition\",\n  schema: TokenErc1155ContractSchema,\n  roles: [\"admin\", \"minter\", \"transfer\"],\n  initialize: async function () {\n    for (var _len2 = arguments.length, _ref2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      _ref2[_key2] = arguments[_key2];\n    }\n    let [network, address, storage, options] = _ref2;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([EditionInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_edition-f3f43cee_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./edition-f3f43cee.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/edition-f3f43cee.esm.js\")), provider.getNetwork()]);\n    return new contract.Edition(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"edition\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_TokenERC1155_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/TokenERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/TokenERC1155.json\", 19))).default;\n  }\n};\nconst MarketplaceInitializer = {\n  name: \"Marketplace\",\n  contractType: \"marketplace\",\n  schema: MarketplaceContractSchema,\n  roles: [\"admin\", \"lister\", \"asset\"],\n  initialize: async function () {\n    for (var _len3 = arguments.length, _ref3 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      _ref3[_key3] = arguments[_key3];\n    }\n    let [network, address, storage, options] = _ref3;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MarketplaceInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_marketplace-9bf7a027_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./marketplace-9bf7a027.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/marketplace-9bf7a027.esm.js\")), provider.getNetwork()]);\n    return new contract.Marketplace(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"marketplace\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_Marketplace_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/Marketplace.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Marketplace.json\", 19))).default;\n  }\n};\nconst MultiwrapInitializer = {\n  name: \"Multiwrap\",\n  contractType: \"multiwrap\",\n  schema: MultiwrapContractSchema,\n  roles: [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"],\n  initialize: async function () {\n    for (var _len4 = arguments.length, _ref4 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      _ref4[_key4] = arguments[_key4];\n    }\n    let [network, address, storage, options] = _ref4;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MultiwrapInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_multiwrap-96ccfd6b_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./multiwrap-96ccfd6b.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/multiwrap-96ccfd6b.esm.js\")), provider.getNetwork()]);\n    return new contract.Multiwrap(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"multiwrap\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_Multiwrap_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/Multiwrap.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Multiwrap.json\", 19))).default;\n  }\n};\nconst NFTCollectionInitializer = {\n  name: \"TokenERC721\",\n  contractType: \"nft-collection\",\n  schema: TokenErc721ContractSchema,\n  roles: [\"admin\", \"minter\", \"transfer\"],\n  initialize: async function () {\n    for (var _len5 = arguments.length, _ref5 = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      _ref5[_key5] = arguments[_key5];\n    }\n    let [network, address, storage, options] = _ref5;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([NFTCollectionInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_nft-collection-ad7bccd7_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./nft-collection-ad7bccd7.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/nft-collection-ad7bccd7.esm.js\")), provider.getNetwork()]);\n    return new contract.NFTCollection(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"nft-collection\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_TokenERC721_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/TokenERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/TokenERC721.json\", 19))).default;\n  }\n};\nconst NFTDropInitializer = {\n  name: \"DropERC721\",\n  contractType: \"nft-drop\",\n  schema: DropErc721ContractSchema,\n  roles: [\"admin\", \"minter\", \"transfer\"],\n  initialize: async function () {\n    for (var _len6 = arguments.length, _ref6 = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      _ref6[_key6] = arguments[_key6];\n    }\n    let [network, address, storage, options] = _ref6;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([NFTDropInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_nft-drop-37f6ba3a_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./nft-drop-37f6ba3a.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/nft-drop-37f6ba3a.esm.js\")), provider.getNetwork()]);\n    return new contract.NFTDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    const contractInfo = await assertContractType(address, provider, \"nft-drop\");\n    return contractInfo.version > 3 ? (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_DropERC721_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/DropERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC721.json\", 19))).default : (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json\", 19))).default;\n  }\n};\nconst PackInitializer = {\n  name: \"Pack\",\n  contractType: \"pack\",\n  schema: PackContractSchema,\n  roles: [\"admin\", \"minter\", \"asset\", \"transfer\"],\n  initialize: async function () {\n    for (var _len7 = arguments.length, _ref7 = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      _ref7[_key7] = arguments[_key7];\n    }\n    let [network, address, storage, options] = _ref7;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([PackInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_pack-4c187c50_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./pack-4c187c50.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/pack-4c187c50.esm.js\")), provider.getNetwork()]);\n    return new contract.Pack(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"pack\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_Pack_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/Pack.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Pack.json\", 19))).default;\n  }\n};\nconst SignatureDropInitializer = {\n  name: \"SignatureDrop\",\n  contractType: \"signature-drop\",\n  schema: DropErc721ContractSchema,\n  roles: [\"admin\", \"minter\", \"transfer\"],\n  initialize: async function () {\n    for (var _len8 = arguments.length, _ref8 = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      _ref8[_key8] = arguments[_key8];\n    }\n    let [network, address, storage, options] = _ref8;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([SignatureDropInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_signature-drop-3ecdd0f0_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./signature-drop-3ecdd0f0.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/signature-drop-3ecdd0f0.esm.js\")), provider.getNetwork()]);\n    return new contract.SignatureDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    const contractInfo = await assertContractType(address, provider, \"signature-drop\");\n    return contractInfo.version > 4 ? (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_SignatureDrop_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/SignatureDrop.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/SignatureDrop.json\", 19))).default : (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_SignatureDrop_V4_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/SignatureDrop_V4.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/SignatureDrop_V4.json\", 19))).default;\n  }\n};\nconst SplitInitializer = {\n  name: \"Split\",\n  contractType: \"split\",\n  schema: SplitsContractSchema,\n  roles: [\"admin\"],\n  initialize: async function () {\n    for (var _len9 = arguments.length, _ref9 = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      _ref9[_key9] = arguments[_key9];\n    }\n    let [network, address, storage, options] = _ref9;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([SplitInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_split-c46f1f5d_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./split-c46f1f5d.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/split-c46f1f5d.esm.js\")), provider.getNetwork()]);\n    return new contract.Split(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"split\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_Split_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/Split.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Split.json\", 19))).default;\n  }\n};\nconst TokenDropInitializer = {\n  name: \"DropERC20\",\n  contractType: \"token-drop\",\n  schema: DropErc20ContractSchema,\n  roles: [\"admin\", \"transfer\"],\n  initialize: async function () {\n    for (var _len10 = arguments.length, _ref10 = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      _ref10[_key10] = arguments[_key10];\n    }\n    let [network, address, storage, options] = _ref10;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([TokenDropInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_token-drop-fb1bdf9c_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./token-drop-fb1bdf9c.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/token-drop-fb1bdf9c.esm.js\")), provider.getNetwork()]);\n    return new contract.TokenDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    const contractInfo = await assertContractType(address, provider, \"token-drop\");\n    return contractInfo.version > 2 ? (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_DropERC20_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/DropERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC20.json\", 19))).default : (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json\", 19))).default;\n  }\n};\nconst TokenInitializer = {\n  name: \"TokenERC20\",\n  contractType: \"token\",\n  schema: TokenErc20ContractSchema,\n  roles: [\"admin\", \"minter\", \"transfer\"],\n  initialize: async function () {\n    for (var _len11 = arguments.length, _ref11 = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      _ref11[_key11] = arguments[_key11];\n    }\n    let [network, address, storage, options] = _ref11;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([TokenInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_token-8c18bb71_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./token-8c18bb71.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/token-8c18bb71.esm.js\")), provider.getNetwork()]);\n    return new contract.Token(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"token\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_TokenERC20_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/TokenERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/TokenERC20.json\", 19))).default;\n  }\n};\nconst VoteInitializer = {\n  name: \"VoteERC20\",\n  contractType: \"vote\",\n  schema: VoteContractSchema,\n  roles: [],\n  initialize: async function () {\n    for (var _len12 = arguments.length, _ref12 = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      _ref12[_key12] = arguments[_key12];\n    }\n    let [network, address, storage, options] = _ref12;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([VoteInitializer.getAbi(address, provider), __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_sdk_dist_vote-f869962a_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./vote-f869962a.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/vote-f869962a.esm.js\")), provider.getNetwork()]);\n    return new contract.Vote(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider) => {\n    await assertContractType(address, provider, \"vote\");\n    return (await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_dist_abis_VoteERC20_json\").then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/VoteERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/VoteERC20.json\", 19))).default;\n  }\n};\nasync function assertContractType(address, provider, type) {\n  const contractInfo = await getPrebuiltInfo(address, provider);\n  if (!contractInfo || contractInfo.type !== getContractName(type)) {\n    throw new Error(`Contract is not a ${type}`);\n  }\n  return contractInfo;\n}\n\n/**\n * a map from contractType -> contract metadata\n * @internal\n */\nconst PREBUILT_CONTRACTS_MAP = {\n  [EditionDropInitializer.contractType]: EditionDropInitializer,\n  [EditionInitializer.contractType]: EditionInitializer,\n  [MarketplaceInitializer.contractType]: MarketplaceInitializer,\n  [MultiwrapInitializer.contractType]: MultiwrapInitializer,\n  [NFTCollectionInitializer.contractType]: NFTCollectionInitializer,\n  [NFTDropInitializer.contractType]: NFTDropInitializer,\n  [PackInitializer.contractType]: PackInitializer,\n  [SignatureDropInitializer.contractType]: SignatureDropInitializer,\n  [SplitInitializer.contractType]: SplitInitializer,\n  [TokenDropInitializer.contractType]: TokenDropInitializer,\n  [TokenInitializer.contractType]: TokenInitializer,\n  [VoteInitializer.contractType]: VoteInitializer\n};\nconst SmartContract$1 = {\n  name: \"SmartContract\",\n  contractType: \"custom\",\n  schema: CustomContractSchema,\n  roles: ALL_ROLES\n};\nconst CONTRACTS_MAP = {\n  ...PREBUILT_CONTRACTS_MAP,\n  [SmartContract$1.contractType]: SmartContract$1\n};\n\n/**\n * @internal\n */\nfunction getContractTypeForRemoteName(name) {\n  return Object.values(CONTRACTS_MAP).find(contract => contract.name === name)?.contractType || \"custom\";\n}\nfunction getContractName(type) {\n  return Object.values(CONTRACTS_MAP).find(contract => contract.contractType === type)?.name;\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.appuri.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.appuri.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  constructor(contractWrapper, metadata) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_APPURI.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"metadata\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Get the appURI for the contract\n   * @returns the appURI object\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.readContract.appURI();\n    }\n    return (await this.metadata.get()).appURI || \"\";\n  }\n\n  /**\n   * Set the appURI for the contract\n   * @param appURI - the uri to set (typically an IPFS hash)\n   */\n  async set(appURI) {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"setAppURI\", [appURI])\n      };\n    }\n    return await this.metadata.update({\n      appURI\n    });\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  addEventListener(eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.readContract.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.readContract.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.readContract.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[event.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const obj = {};\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          for (let i = 0; i < components.length; i++) {\n            const name = components[i].name;\n            obj[name] = arr[i];\n          }\n          results[param.name] = obj;\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFee.get();\n * await contract.platformFee.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\nclass ContractPlatformFee {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_PLATFORM_FEE.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *  * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFee.get();\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.readContract.getPlatformFeeInfo();\n    return CommonPlatformFeeSchema.parse({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   * @param platformFeeInfo - the platform fee information\n   * ```javascript\n   * await contract.platformFee.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   * @twfeature PlatformFee\n   */\n  async set(platformFeeInfo) {\n    const parsed = CommonPlatformFeeSchema.parse(platformFeeInfo);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setPlatformFeeInfo\", [parsed.platform_fee_recipient, parsed.platform_fee_basis_points])\n    };\n  }\n}\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */\nclass ContractPublishedMetadata {\n  constructor(contractWrapper, storage) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_cachedMetadata\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  async get() {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.readContract.address, this.contractWrapper.getProvider(), this.storage);\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  async extractFunctions() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n\n  /**\n   * @public\n   */\n  async extractEvents() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractEventsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n}\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.call(\"myCustomFunction\", param1, param2);\n *\n * // if your contract follows the ERC721 standard, contract.nft will be present\n * const allNFTs = await contract.erc721.query.all()\n *\n * // if your contract extends IMintableERC721, contract.nft.mint() will be available\n * const tx = await contract.erc721.mint({\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @beta\n */\nclass SmartContract {\n  // utilities\n\n  /**\n   * Handle royalties\n   */\n  get royalties() {\n    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);\n  }\n\n  /**\n   * Handle permissions\n   */\n  get roles() {\n    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);\n  }\n\n  /**\n   * Handle primary sales\n   */\n  get sales() {\n    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);\n  }\n\n  /**\n   * Handle platform fees\n   */\n  get platformFees() {\n    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);\n  }\n\n  /**\n   * Set and get the owner of the contract\n   */\n  get owner() {\n    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);\n  }\n\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  get erc20() {\n    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);\n  }\n\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  get erc721() {\n    return assertEnabled(this.detectErc721(), FEATURE_NFT);\n  }\n\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  get erc1155() {\n    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, abi, storage) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"events\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"interceptor\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"encoder\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"estimator\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"publishedMetadata\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"abi\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"metadata\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"appURI\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.abi = abi;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);\n    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.appURI = new ContractAppURI(this.contractWrapper, this.metadata);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Call any function on this contract\n   * @example\n   * ```javascript\n   * // read functions will return the data from the contract\n   * const myValue = await contract.call(\"myReadFunction\");\n   * console.log(myValue);\n   *\n   * // write functions will return the transaction receipt\n   * const tx = await contract.call(\"myWriteFunction\", arg1, arg2);\n   * const receipt = tx.receipt;\n   *\n   * // Optionally override transaction options\n   * await contract.call(\"myWriteFunction\", arg1, arg2, {\n   *  gasLimit: 1000000, // override default gas limit\n   *  value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n   * };\n   * ```\n   * @param functionName - the name of the function to call\n   * @param args - the arguments of the function\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectRoyalties() {\n    if (detectContractFeature(this.contractWrapper, \"Royalty\")) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n  detectRoles() {\n    if (detectContractFeature(this.contractWrapper, \"Permissions\")) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n  detectPrimarySales() {\n    if (detectContractFeature(this.contractWrapper, \"PrimarySale\")) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectPlatformFees() {\n    if (detectContractFeature(this.contractWrapper, \"PlatformFee\")) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc721() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc1155() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectOwnable() {\n    if (detectContractFeature(this.contractWrapper, \"Ownable\")) {\n      return new ContractOwner(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Handles publishing contracts (EXPERIMENTAL)\n * @internal\n */\nclass ContractPublisher extends RPCConnectionHandler {\n  constructor(network, options, storage) {\n    super(network, options);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"publisher\", void 0);\n    this.storage = storage;\n    this.publisher = new ContractWrapper(network, getContractPublisherAddress(), _thirdweb_dev_contracts_js_dist_abis_ContractPublisher_json__WEBPACK_IMPORTED_MODULE_46__, options);\n  }\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n    this.publisher.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   * @param metadataUri\n   */\n  async extractConstructorParams(metadataUri) {\n    return extractConstructorParams(metadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployMetadataUri\n   */\n  async extractFunctions(predeployMetadataUri) {\n    return extractFunctions(predeployMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployUri\n   */\n  async fetchCompilerMetadataFromPredeployURI(predeployUri) {\n    return fetchPreDeployMetadata(predeployUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param prepublishUri\n   * @param publisherAddress\n   */\n  async fetchPrePublishMetadata(prepublishUri, publisherAddress) {\n    const preDeployMetadataFetched = await fetchPreDeployMetadata(prepublishUri, this.storage);\n    const latestPublishedContract = publisherAddress ? await this.getLatest(publisherAddress, preDeployMetadataFetched.name) : undefined;\n    const latestPublishedContractMetadata = latestPublishedContract ? await this.fetchPublishedContractInfo(latestPublishedContract) : undefined;\n    return {\n      preDeployMetadata: preDeployMetadataFetched,\n      latestPublishedContractMetadata\n    };\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  async fetchCompilerMetadataFromAddress(address) {\n    return fetchContractMetadataFromAddress(address, this.getProvider(), this.storage);\n  }\n\n  /**\n   * @internal\n   * Get the full information about a published contract\n   * @param contract\n   */\n  async fetchPublishedContractInfo(contract) {\n    return {\n      name: contract.id,\n      publishedTimestamp: contract.timestamp,\n      publishedMetadata: await this.fetchFullPublishMetadata(contract.metadataUri)\n    };\n  }\n\n  /**\n   * @internal\n   * @param publishedMetadataUri\n   */\n  async fetchFullPublishMetadata(publishedMetadataUri) {\n    return fetchExtendedReleaseMetadata(publishedMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * // TODO expose a resolvePublishMetadata(contractAddress, chainId) that handles the dual chain case\n   * // TODO will be easy to do with the multichain pattern of 3.0\n   * @param compilerMetadataUri\n   */\n  async resolvePublishMetadataFromCompilerMetadata(compilerMetadataUri) {\n    const publishedMetadataUri = await this.publisher.readContract.getPublishedUriFromCompilerUri(compilerMetadataUri);\n    if (publishedMetadataUri.length === 0) {\n      throw Error(`Could not resolve published metadata URI from ${compilerMetadataUri}`);\n    }\n    return await Promise.all(publishedMetadataUri.filter(uri => uri.length > 0).map(uri => this.fetchFullPublishMetadata(uri)));\n  }\n\n  /**\n   * @internal\n   * TODO clean this up (see method above, too)\n   */\n  async resolveContractUriFromAddress(address) {\n    const contractUri = await resolveContractUriFromAddress(address, this.getProvider());\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(contractUri, \"Could not resolve contract URI from address\");\n    return contractUri;\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  async fetchContractSourcesFromAddress(address) {\n    const metadata = await this.fetchCompilerMetadataFromAddress(address);\n    return await fetchSourceFilesFromMetadata(metadata, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param profileMetadata\n   */\n  async updatePublisherProfile(profileMetadata) {\n    const signer = this.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"A signer is required\");\n    const publisher = await signer.getAddress();\n    const profileUri = await this.storage.upload(profileMetadata);\n    return {\n      receipt: await this.publisher.sendTransaction(\"setPublisherProfileUri\", [publisher, profileUri])\n    };\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  async getPublisherProfile(publisherAddress) {\n    const profileUri = await this.publisher.readContract.getPublisherProfileUri(publisherAddress);\n    if (!profileUri || profileUri.length === 0) {\n      return {};\n    }\n    return ProfileSchemaOutput.parse(await this.storage.downloadJSON(profileUri));\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  async getAll(publisherAddress) {\n    const data = await this.publisher.readContract.getAllPublishedContracts(publisherAddress);\n    // since we can fetch from multiple publisher contracts, just keep the latest one in the list\n    const map = data.reduce((acc, curr) => {\n      // replaces the previous contract with the latest one\n      acc[curr.contractId] = curr;\n      return acc;\n    }, {});\n    return Object.entries(map).map(_ref => {\n      let [, struct] = _ref;\n      return this.toPublishedContract(struct);\n    });\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   * @param contractId\n   */\n  async getAllVersions(publisherAddress, contractId) {\n    const contractStructs = await this.publisher.readContract.getPublishedContractVersions(publisherAddress, contractId);\n    if (contractStructs.length === 0) {\n      throw Error(\"Not found\");\n    }\n    return contractStructs.map(d => this.toPublishedContract(d));\n  }\n  async getVersion(publisherAddress, contractId) {\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    if (version === \"latest\") {\n      return this.getLatest(publisherAddress, contractId);\n    }\n    const allVersions = await this.getAllVersions(publisherAddress, contractId);\n    // get the metadata for each version\n    const versionMetadata = await Promise.all(allVersions.map(contract => this.fetchPublishedContractInfo(contract)));\n    // find the version that matches the version string\n    const versionMatch = versionMetadata.find(metadata => metadata.publishedMetadata.version === version);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(versionMatch, \"Contract version not found\");\n    // match the version back to the contract based on the release timestamp\n    return allVersions.find(contract => contract.timestamp === versionMatch.publishedTimestamp);\n  }\n  async getLatest(publisherAddress, contractId) {\n    const model = await this.publisher.readContract.getPublishedContract(publisherAddress, contractId);\n    if (model && model.publishMetadataUri) {\n      return this.toPublishedContract(model);\n    }\n    return undefined;\n  }\n  async publish(predeployUri, extraMetadata) {\n    const signer = this.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"A signer is required\");\n    const publisher = await signer.getAddress();\n    const predeployMetadata = await fetchRawPredeployMetadata(predeployUri, this.storage);\n\n    // ensure version is incremental\n    const latestContract = await this.getLatest(publisher, predeployMetadata.name);\n    if (latestContract && latestContract.metadataUri) {\n      const latestMetadata = await this.fetchPublishedContractInfo(latestContract);\n      const latestVersion = latestMetadata.publishedMetadata.version;\n      if (!isIncrementalVersion(latestVersion, extraMetadata.version)) {\n        throw Error(`Version ${extraMetadata.version} is not greater than ${latestVersion}`);\n      }\n    }\n    const fetchedBytecode = await (await this.storage.download(predeployMetadata.bytecodeUri)).text();\n    const bytecode = fetchedBytecode.startsWith(\"0x\") ? fetchedBytecode : `0x${fetchedBytecode}`;\n    const bytecodeHash = ethers__WEBPACK_IMPORTED_MODULE_58__.utils.solidityKeccak256([\"bytes\"], [bytecode]);\n    const contractId = predeployMetadata.name;\n    const fullMetadata = FullPublishMetadataSchemaInput.parse({\n      ...extraMetadata,\n      metadataUri: predeployMetadata.metadataUri,\n      bytecodeUri: predeployMetadata.bytecodeUri,\n      name: predeployMetadata.name,\n      analytics: predeployMetadata.analytics,\n      publisher\n    });\n    const fullMetadataUri = await this.storage.upload(fullMetadata);\n    const receipt = await this.publisher.sendTransaction(\"publishContract\", [publisher, contractId, fullMetadataUri, predeployMetadata.metadataUri, bytecodeHash, ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero]);\n    const events = this.publisher.parseLogs(\"ContractPublished\", receipt.logs);\n    if (events.length < 1) {\n      throw new Error(\"No ContractPublished event found\");\n    }\n    const contract = events[0].args.publishedContract;\n    return {\n      receipt,\n      data: async () => this.toPublishedContract(contract)\n    };\n  }\n  async unpublish(publisher, contractId) {\n    return {\n      receipt: await this.publisher.sendTransaction(\"unpublishContract\", [publisher, contractId])\n    };\n  }\n  toPublishedContract(contractModel) {\n    return PublishedContractSchema.parse({\n      id: contractModel.contractId,\n      timestamp: contractModel.publishTimestamp,\n      metadataUri: contractModel.publishMetadataUri\n    });\n  }\n}\n\n/**\n *\n * {@link UserWallet} events that you can subscribe to using `sdk.wallet.events`.\n *\n * @public\n */\n\n/**\n * Connect and Interact with a user wallet\n * @example\n * ```javascript\n * const balance = await sdk.wallet.balance();\n * ```\n * @public\n */\nclass UserWallet {\n  constructor(network, options) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"connection\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"options\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"events\", new eventemitter3__WEBPACK_IMPORTED_MODULE_5__[\"default\"]());\n    this.connection = new RPCConnectionHandler(network, options);\n    this.options = options;\n    this.events = new eventemitter3__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n  }\n\n  // TODO disconnect()\n  // TODO switchChain()\n  // TODO tokens()\n  // TODO NFTs()\n\n  // TODO this will become the source of truth of the signer and have every contract read from it\n  // TODO separate signer and provider logics\n  connect(network) {\n    this.connection.updateSignerOrProvider(network);\n    this.events.emit(\"signerChanged\", this.connection.getSigner());\n  }\n\n  /**\n   * Transfer native or ERC20 tokens from this wallet to another wallet\n   * @example\n   * ```javascript\n   *  // transfer 0.8 ETH\n   * await sdk.wallet.transfer(\"0x...\", 0.8);\n   *  // transfer 0.8 tokens of `tokenContractAddress`\n   * await sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);\n   * ```\n   * @param to - the account to send funds to\n   * @param amount - the amount in tokens\n   * @param currencyAddress - Optional - ERC20 contract address of the token to transfer\n   */\n  async transfer(to, amount) {\n    let currencyAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NATIVE_TOKEN_ADDRESS;\n    const signer = this.requireWallet();\n    const amountInWei = await normalizePriceValue(this.connection.getProvider(), amount, currencyAddress);\n    if (isNativeToken(currencyAddress)) {\n      // native token transfer\n      const from = await signer.getAddress();\n      const tx = await signer.sendTransaction({\n        from,\n        to,\n        value: amountInWei\n      });\n      return {\n        receipt: await tx.wait()\n      };\n    } else {\n      // ERC20 token transfer\n      return {\n        receipt: await this.createErc20(currencyAddress).sendTransaction(\"transfer\", [to, amountInWei])\n      };\n    }\n  }\n\n  /**\n   * Fetch the native or ERC20 token balance of this wallet\n   * @example\n   * ```javascript\n   * // native currency balance\n   * const balance = await sdk.wallet.balance();\n   * // ERC20 token balance\n   * const erc20balance = await sdk.wallet.balance(tokenContractAddress);\n   *\n   * ```\n   */\n  async balance() {\n    let currencyAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NATIVE_TOKEN_ADDRESS;\n    this.requireWallet();\n    const provider = this.connection.getProvider();\n    let balance;\n    if (isNativeToken(currencyAddress)) {\n      balance = await provider.getBalance(await this.getAddress());\n    } else {\n      balance = await this.createErc20(currencyAddress).readContract.balanceOf(await this.getAddress());\n    }\n    return await fetchCurrencyValue(provider, currencyAddress, balance);\n  }\n\n  /**\n   * Get the currently connected address\n   * @example\n   * ```javascript\n   * const address = await sdk.wallet.getAddress();\n   * ```\n   */\n  async getAddress() {\n    return await this.requireWallet().getAddress();\n  }\n\n  /**\n   * Get the currently connected wallet's chainId\n   * @internal\n   */\n  async getChainId() {\n    return await this.requireWallet().getChainId();\n  }\n\n  /**\n   * Checks whether there's a signer connected with the SDK\n   * @internal\n   */\n  isConnected() {\n    try {\n      this.requireWallet();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Sign any message with the connected wallet private key\n   * @param message - the message to sign\n   * @returns the signed message\n   *\n   * @example\n   * ```javascript\n   * // This is the message to be signed\n   * const message = \"Sign this message...\";\n   *\n   * // Now we can sign the message with the connected wallet\n   * const signature = await sdk.wallet.sign(message);\n   * ```\n   */\n  async sign(message) {\n    const signer = this.requireWallet();\n    return await signer.signMessage(message);\n  }\n\n  /**\n   * Recover the signing address from a signed message\n   * @param message - the original message that was signed\n   * @param signature - the signature to recover the address from\n   * @returns the address that signed the message\n   *\n   * @example\n   * ```javascript\n   * const message = \"Sign this message...\";\n   * const signature = await sdk.wallet.sign(message);\n   *\n   * // Now we can recover the signing address\n   * const address = sdk.wallet.recoverAddress(message, signature);\n   * ```\n   */\n  recoverAddress(message, signature) {\n    const messageHash = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hashMessage(message);\n    const messageHashBytes = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.arrayify(messageHash);\n    return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.recoverAddress(messageHashBytes, signature);\n  }\n\n  /**\n   * Send a raw transaction to the blockchain from the connected wallet\n   * @param transactionRequest - raw transaction data to send to the blockchain\n   */\n  async sendRawTransaction(transactionRequest) {\n    const signer = this.requireWallet();\n    const tx = await signer.sendTransaction(transactionRequest);\n    return {\n      receipt: await tx.wait()\n    };\n  }\n\n  /** ***********************\n   * PRIVATE FUNCTIONS\n   * ***********************/\n\n  requireWallet() {\n    const signer = this.connection.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"This action requires a connected wallet. Please pass a valid signer to the SDK.\");\n    return signer;\n  }\n  createErc20(currencyAddress) {\n    return new ContractWrapper(this.connection.getSignerOrProvider(), currencyAddress, _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_13__, this.options);\n  }\n}\n\n/**\n * The main entry point for the thirdweb SDK\n * @public\n */\nclass ThirdwebSDK extends RPCConnectionHandler {\n  /**\n   * Get an instance of the thirdweb SDK based on an AbstractWallet\n   *\n   * @example\n   * ```javascript\n   * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\"\n   *\n   * const wallet = new AbstractWalletImplementation();\n   * const sdk = await ThirdwebSDK.fromWallet(wallet, \"mainnet\");\n   * ```\n   *\n   * @param wallet - the implementation of the AbstractWallet class to use for signing\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @param storage - optional storage implementation to use\n   * @returns an instance of the SDK\n   *\n   * @beta\n   */\n  static async fromWallet(wallet, network) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let storage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_47__.ThirdwebStorage();\n    const signerOrProvider = getProviderForNetwork(network);\n    const provider = ethers__WEBPACK_IMPORTED_MODULE_58__.Signer.isSigner(signerOrProvider) ? signerOrProvider.provider : typeof signerOrProvider === \"string\" ? getReadOnlyProvider(signerOrProvider) : signerOrProvider;\n    const signer = await wallet.getSigner(provider);\n    return ThirdwebSDK.fromSigner(signer, network, options, storage);\n  }\n\n  /**\n   * Get an instance of the thirdweb SDK based on an existing ethers signer\n   *\n   * @example\n   * ```javascript\n   * // get a signer from somewhere (createRandom is being used purely for example purposes)\n   * const signer = ethers.Wallet.createRandom();\n   *\n   * // get an instance of the SDK with the signer already setup\n   * const sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");\n   * ```\n   *\n   * @param signer - a ethers Signer to be used for transactions\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @param storage - optional storage implementation to use\n   * @returns an instance of the SDK\n   *\n   * @beta\n   */\n  static fromSigner(signer, network) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let storage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_47__.ThirdwebStorage();\n    const sdk = new ThirdwebSDK(network || signer, options, storage);\n    sdk.updateSignerOrProvider(signer);\n    return sdk;\n  }\n\n  /**\n   * Get an instance of the thirdweb SDK based on a private key.\n   *\n   * @remarks\n   * This should only be used for backend services or scripts, with the private key stored in a secure way.\n   * **NEVER** expose your private key to the public in any way.\n   *\n   * @example\n   * ```javascript\n   * const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");\n   * ```\n   *\n   * @param privateKey - the private key - **DO NOT EXPOSE THIS TO THE PUBLIC**\n   * @param network - the network (chain) to connect to (e.g. \"mainnet\", \"rinkeby\", \"polygon\", \"mumbai\"...) or a fully formed RPC url\n   * @param options - the SDK options to use\n   * @param storage - optional storage implementation to use\n   * @returns an instance of the SDK\n   *\n   * @beta\n   */\n  static fromPrivateKey(privateKey, network) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let storage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_47__.ThirdwebStorage();\n    const signerOrProvider = getProviderForNetwork(network);\n    const provider = ethers__WEBPACK_IMPORTED_MODULE_58__.Signer.isSigner(signerOrProvider) ? signerOrProvider.provider : typeof signerOrProvider === \"string\" ? getReadOnlyProvider(signerOrProvider) : signerOrProvider;\n    const signer = new ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.Wallet(privateKey, provider);\n    return ThirdwebSDK.fromSigner(signer, network, options, storage);\n  }\n\n  /**\n   * @internal\n   * the cache of contracts that we have already seen\n   */\n\n  constructor(network) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let storage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_47__.ThirdwebStorage();\n    const signerOrProvider = getProviderForNetwork(network);\n    super(signerOrProvider, options);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractCache\", new Map());\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_publisher\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storageHandler\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"deployer\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"wallet\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"auth\", void 0);\n    this.storageHandler = storage;\n    this.storage = storage;\n    this.wallet = new UserWallet(signerOrProvider, options);\n    this.deployer = new ContractDeployer(signerOrProvider, options, storage);\n    this.auth = new WalletAuthenticator(signerOrProvider, this.wallet, options);\n    this._publisher = new ContractPublisher(signerOrProvider, this.options, this.storageHandler);\n  }\n\n  /**\n   * Get an instance of a NFT Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const dropContract = await sdk.getDropContract(\"0x1234...\");\n   * + const dropContract = await sdk.getContract(\"0x1234...\", \"nft-drop\");\n   * ```\n   */\n  async getNFTDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"nft-drop\");\n  }\n\n  /**\n   * Get an instance of a Signature Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const signatureDrop = await sdk.getSignatureDrop(\"0x1234...\");\n   * + const signatureDrop = await sdk.getContract(\"0x1234...\", \"signature-drop\");\n   * ```\n   */\n  async getSignatureDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"signature-drop\");\n  }\n\n  /**\n   * Get an instance of a NFT Collection Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const signatureDrop = await sdk.getNFTCollection(\"0x1234...\");\n   * + const signatureDrop = await sdk.getContract(\"0x1234...\", \"nft-collection\");\n   * ```\n   */\n  async getNFTCollection(contractAddress) {\n    return await this.getContract(contractAddress, \"nft-collection\");\n  }\n\n  /**\n   * Get an instance of a Edition Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const editionDrop = await sdk.getEditionDrop(\"0x1234...\");\n   * + const editionDrop = await sdk.getContract(\"0x1234...\", \"edition-drop\");\n   * ```\n   */\n  async getEditionDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"edition-drop\");\n  }\n\n  /**\n   * Get an instance of a Edition contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const edition = await sdk.getEdition(\"0x1234...\");\n   * + const edition = await sdk.getContract(\"0x1234...\", \"edition\");\n   * ```\n   */\n  async getEdition(contractAddress) {\n    return await this.getContract(contractAddress, \"edition\");\n  }\n\n  /**\n   * Get an instance of a Token Drop contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const tokenDrop = await sdk.getTokenDrop(\"0x1234...\");\n   * + const tokenDrop = await sdk.getContract(\"0x1234...\", \"token-drop\");\n   * ```\n   */\n  async getTokenDrop(contractAddress) {\n    return await this.getContract(contractAddress, \"token-drop\");\n  }\n\n  /**\n   * Get an instance of a Token contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const token = await sdk.getToken(\"0x1234...\");\n   * + const token = await sdk.getContract(\"0x1234...\", \"token\");\n   * ```\n   */\n  async getToken(contractAddress) {\n    return await this.getContract(contractAddress, \"token\");\n  }\n\n  /**\n   * Get an instance of a Vote contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const vote = await sdk.getVote(\"0x1234...\");\n   * + const vote = await sdk.getContract(\"0x1234...\", \"vote\");\n   * ```\n   */\n  async getVote(contractAddress) {\n    return await this.getContract(contractAddress, \"vote\");\n  }\n\n  /**\n   * Get an instance of a Split contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const split = await sdk.getSplit(\"0x1234...\");\n   * + const split = await sdk.getContract(\"0x1234...\", \"split\");\n   * ```\n   */\n  async getSplit(contractAddress) {\n    return await this.getContract(contractAddress, \"split\");\n  }\n\n  /**\n   * Get an instance of a Marketplace contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const marketplace = await sdk.getMarketplace(\"0x1234...\");\n   * + const marketplace = await sdk.getContract(\"0x1234...\", \"marketplace\");\n   * ```\n   */\n  async getMarketplace(contractAddress) {\n    return await this.getContract(contractAddress, \"marketplace\");\n  }\n\n  /**\n   * Get an instance of a Pack contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const pack = await sdk.getPack(\"0x1234...\");\n   * + const pack = await sdk.getContract(\"0x1234...\", \"pack\");\n   * ```\n   */\n  async getPack(contractAddress) {\n    return await this.getContract(contractAddress, \"pack\");\n  }\n\n  /**\n   * Get an instance of a Pack contract\n   * @param contractAddress - the address of the deployed contract\n   * @deprecated\n   * This method is deprecated and will be removed in a future major version. You should use {@link getContract} instead.\n   * ```diff\n   * - const multiWrap = await sdk.getMultiwrap(\"0x1234...\");\n   * + const multiWrap = await sdk.getContract(\"0x1234...\", \"multiwrap\");\n   * ```\n   */\n  async getMultiwrap(contractAddress) {\n    return await this.getContract(contractAddress, \"multiwrap\");\n  }\n\n  /**\n   * Get an instance of a Custom ThirdwebContract\n   * @param address - the address of the deployed contract\n   * @returns the contract\n   * @public\n   * @example\n   * ```javascript\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\n   * ```\n   */\n\n  async getContract(address, contractTypeOrABI) {\n    // if we have a contract in the cache we will return it\n    // we will do this **without** checking any contract type things for simplicity, this may have to change in the future?\n    if (this.contractCache.has(address)) {\n      // we know this will be there since we check the has above\n      return this.contractCache.get(address);\n    }\n    let newContract;\n\n    // if we don't have a contractType or ABI then we will have to resolve it regardless\n    // we also handle it being \"custom\" just in case...\n    if (!contractTypeOrABI || contractTypeOrABI === \"custom\") {\n      const resolvedContractType = await this.resolveContractType(address);\n      if (resolvedContractType === \"custom\") {\n        // if it's a custom contract we gotta fetch the compilet metadata\n        try {\n          const publisher = this.getPublisher();\n          const metadata = await publisher.fetchCompilerMetadataFromAddress(address);\n          newContract = await this.getContractFromAbi(address, metadata.abi);\n        } catch (e) {\n          throw new Error(`Error fetching ABI for this contract\\n\\n${e}`);\n        }\n      } else {\n        // otherwise if it's a prebuilt contract we can just use the contract type\n        const contractAbi = await PREBUILT_CONTRACTS_MAP[resolvedContractType].getAbi(address, this.getProvider());\n        newContract = await this.getContractFromAbi(address, contractAbi);\n      }\n    }\n    // if it's a builtin contract type we can just use the contract type to initialize the contract instance\n    else if (typeof contractTypeOrABI === \"string\" && contractTypeOrABI in PREBUILT_CONTRACTS_MAP) {\n      newContract = await PREBUILT_CONTRACTS_MAP[contractTypeOrABI].initialize(this.getSignerOrProvider(), address, this.storage, this.options);\n    }\n    // otherwise it has to be an ABI\n    else {\n      newContract = await this.getContractFromAbi(address, contractTypeOrABI);\n    }\n\n    // set whatever we have on the cache\n    this.contractCache.set(address, newContract);\n    // return it\n    return newContract;\n  }\n\n  /**\n   * @internal\n   * @deprecated use {@link getContract} directly instead\n   */\n  async getBuiltInContract(address, contractType) {\n    return await this.getContract(address, contractType);\n  }\n\n  /**\n   * @param contractAddress - the address of the contract to attempt to resolve the contract type for\n   * @returns the {@link ContractType} for the given contract address\n   *\n   */\n  async resolveContractType(contractAddress) {\n    try {\n      const contract = new ethers__WEBPACK_IMPORTED_MODULE_58__.Contract(contractAddress, _thirdweb_dev_contracts_js_dist_abis_IThirdwebContract_json__WEBPACK_IMPORTED_MODULE_4__,\n      // !provider only! - signer can break things here!\n      this.getProvider());\n      const remoteContractType = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.toUtf8String(await contract.contractType())\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\x00/g, \"\");\n      return getContractTypeForRemoteName(remoteContractType);\n    } catch (err) {\n      return \"custom\";\n    }\n  }\n\n  /**\n   * Return all the contracts deployed by the specified address\n   * @param walletAddress - the deployed address\n   * @example\n   * ```javascript\n   * const contracts = sdk.getContractList(\"{{wallet_address}}\");\n   * ```\n   */\n  async getContractList(walletAddress) {\n    const addresses = (await (await this.deployer.getRegistry())?.getContractAddresses(walletAddress)) || [];\n    const addressesWithContractTypes = await Promise.all(addresses.map(async address => {\n      let contractType = \"custom\";\n      try {\n        contractType = await this.resolveContractType(address);\n      } catch (e) {\n        // this going to happen frequently and be OK, we'll just catch it and ignore it\n      }\n      let metadata;\n      if (contractType === \"custom\") {\n        try {\n          metadata = (await this.getContract(address)).metadata;\n        } catch (e) {\n          console.warn(`Couldn't get contract metadata for custom contract: ${address} - ${e}`);\n        }\n      } else {\n        metadata = (await this.getContract(address, contractType)).metadata;\n      }\n      return {\n        address,\n        contractType,\n        metadata\n      };\n    }));\n    return addressesWithContractTypes.filter(e => e.metadata).map(_ref => {\n      let {\n        address,\n        contractType,\n        metadata\n      } = _ref;\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(metadata, \"All ThirdwebContracts require metadata\");\n      return {\n        address,\n        contractType,\n        metadata: () => metadata.get()\n      };\n    });\n  }\n\n  /**\n   * Update the active signer or provider for all contracts\n   * @param network - the new signer or provider\n   */\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n  updateContractSignerOrProvider() {\n    this.wallet.connect(this.getSignerOrProvider());\n    this.auth.updateSignerOrProvider(this.getSignerOrProvider());\n    this.deployer.updateSignerOrProvider(this.getSignerOrProvider());\n    this._publisher.updateSignerOrProvider(this.getSignerOrProvider());\n    for (const [, contract] of this.contractCache) {\n      contract.onNetworkUpdated(this.getSignerOrProvider());\n    }\n  }\n\n  /**\n   * Get an instance of a Custom contract from a json ABI\n   * @param address - the address of the deployed contract\n   * @param abi - the JSON abi\n   * @returns the contract\n   * @beta\n   * @example\n   * ```javascript\n   * // Import your ABI from a JSON file\n   * import myABI from \"./path/to/myABI.json\";\n   *\n   * const contract = sdk.getContractFromAbi(\n   *   \"{{contract_address}}\",\n   *   // Pass in the \"abi\" field from the JSON file\n   *   myABI.abi\n   * );\n   * ```\n   */\n  async getContractFromAbi(address, abi) {\n    if (this.contractCache.has(address)) {\n      return this.contractCache.get(address);\n    }\n    const [, provider] = getSignerAndProvider(this.getSignerOrProvider(), this.options);\n    // TODO we still might want to lazy-fy this\n    const contract = new SmartContract(this.getSignerOrProvider(), address, abi, this.storageHandler, this.options, (await provider.getNetwork()).chainId);\n    this.contractCache.set(address, contract);\n    return contract;\n  }\n\n  /**\n   * Get the native balance of a given address (wallet or contract)\n   * @example\n   * ```javascript\n   * const balance = await sdk.getBalance(\"0x...\");\n   * console.log(balance.displayValue);\n   * ```\n   * @param address - the address to check the balance for\n   */\n  async getBalance(address) {\n    return fetchCurrencyValue(this.getProvider(), NATIVE_TOKEN_ADDRESS, await this.getProvider().getBalance(address));\n  }\n\n  /**\n   * @internal\n   */\n  getPublisher() {\n    return this._publisher;\n  }\n}\n\n/**\n * @internal\n */\nclass ContractFactory extends ContractWrapper {\n  // Map from contract type to version to deploy specific versions by default\n\n  constructor(factoryAddr, network, storage, options) {\n    super(network, factoryAddr, _thirdweb_dev_contracts_js_dist_abis_TWFactory_json__WEBPACK_IMPORTED_MODULE_44__, options);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"DEFAULT_VERSION_MAP\", {\n      [NFTDropInitializer.contractType]: 3,\n      [NFTCollectionInitializer.contractType]: 1,\n      [SignatureDropInitializer.contractType]: 4,\n      [MultiwrapInitializer.contractType]: 1,\n      [EditionDropInitializer.contractType]: 2,\n      [EditionInitializer.contractType]: 1,\n      [TokenDropInitializer.contractType]: 2,\n      [TokenInitializer.contractType]: 1,\n      [VoteInitializer.contractType]: 1,\n      [SplitInitializer.contractType]: 1,\n      [MarketplaceInitializer.contractType]: 2,\n      [PackInitializer.contractType]: 2\n    });\n    this.storage = storage;\n  }\n  async deploy(contractType, contractMetadata, version) {\n    const contract = PREBUILT_CONTRACTS_MAP[contractType];\n    const metadata = contract.schema.deploy.parse(contractMetadata);\n\n    // TODO: is there any special pre-processing we need to do before uploading?\n    const contractURI = await this.storage.upload(metadata);\n    const implementationAddress = await this.getImplementation(contract, version);\n    if (!implementationAddress || implementationAddress === ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero) {\n      throw new Error(`No implementation found for ${contractType}`);\n    }\n    const ABI = await contract.getAbi(implementationAddress, this.getProvider());\n    const encodedFunc = ethers__WEBPACK_IMPORTED_MODULE_58__.Contract.getInterface(ABI).encodeFunctionData(\"initialize\", await this.getDeployArguments(contractType, metadata, contractURI));\n    const blockNumber = await this.getProvider().getBlockNumber();\n    const salt = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatBytes32String(blockNumber.toString());\n    const receipt = await this.sendTransaction(\"deployProxyByImplementation\", [implementationAddress, encodedFunc, salt]);\n    const events = this.parseLogs(\"ProxyDeployed\", receipt.logs);\n    if (events.length < 1) {\n      throw new Error(\"No ProxyDeployed event found\");\n    }\n    return events[0].args.proxy;\n  }\n\n  // TODO once IContractFactory is implemented, this can be probably be moved to its own class\n  async deployProxyByImplementation(implementationAddress, implementationAbi, initializerFunction, initializerArgs) {\n    const encodedFunc = ethers__WEBPACK_IMPORTED_MODULE_58__.Contract.getInterface(implementationAbi).encodeFunctionData(initializerFunction, initializerArgs);\n    const blockNumber = await this.getProvider().getBlockNumber();\n    const receipt = await this.sendTransaction(\"deployProxyByImplementation\", [implementationAddress, encodedFunc, ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatBytes32String(blockNumber.toString())]);\n    const events = this.parseLogs(\"ProxyDeployed\", receipt.logs);\n    if (events.length < 1) {\n      throw new Error(\"No ProxyDeployed event found\");\n    }\n    return events[0].args.proxy;\n  }\n\n  /**\n   *\n   * @param contractType\n   * @param metadata\n   * @param contractURI\n   * @returns\n   * @internal\n   */\n  async getDeployArguments(contractType, metadata, contractURI) {\n    let trustedForwarders = contractType === PackInitializer.contractType ? [] : await this.getDefaultTrustedForwarders();\n    // override default forwarders if custom ones are passed in\n    if (metadata.trusted_forwarders && metadata.trusted_forwarders.length > 0) {\n      trustedForwarders = metadata.trusted_forwarders;\n    }\n    switch (contractType) {\n      case NFTDropInitializer.contractType:\n      case NFTCollectionInitializer.contractType:\n        const erc721metadata = NFTDropInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), erc721metadata.name, erc721metadata.symbol, contractURI, trustedForwarders, erc721metadata.primary_sale_recipient, erc721metadata.fee_recipient, erc721metadata.seller_fee_basis_points, erc721metadata.platform_fee_basis_points, erc721metadata.platform_fee_recipient];\n      case SignatureDropInitializer.contractType:\n        const signatureDropmetadata = SignatureDropInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), signatureDropmetadata.name, signatureDropmetadata.symbol, contractURI, trustedForwarders, signatureDropmetadata.primary_sale_recipient, signatureDropmetadata.fee_recipient, signatureDropmetadata.seller_fee_basis_points, signatureDropmetadata.platform_fee_basis_points, signatureDropmetadata.platform_fee_recipient];\n      case MultiwrapInitializer.contractType:\n        const multiwrapMetadata = MultiwrapInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), multiwrapMetadata.name, multiwrapMetadata.symbol, contractURI, trustedForwarders, multiwrapMetadata.fee_recipient, multiwrapMetadata.seller_fee_basis_points];\n      case EditionDropInitializer.contractType:\n      case EditionInitializer.contractType:\n        const erc1155metadata = EditionDropInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), erc1155metadata.name, erc1155metadata.symbol, contractURI, trustedForwarders, erc1155metadata.primary_sale_recipient, erc1155metadata.fee_recipient, erc1155metadata.seller_fee_basis_points, erc1155metadata.platform_fee_basis_points, erc1155metadata.platform_fee_recipient];\n      case TokenDropInitializer.contractType:\n      case TokenInitializer.contractType:\n        const erc20metadata = TokenInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), erc20metadata.name, erc20metadata.symbol, contractURI, trustedForwarders, erc20metadata.primary_sale_recipient, erc20metadata.platform_fee_recipient, erc20metadata.platform_fee_basis_points];\n      case VoteInitializer.contractType:\n        const voteMetadata = VoteInitializer.schema.deploy.parse(metadata);\n        return [voteMetadata.name, contractURI, trustedForwarders, voteMetadata.voting_token_address, voteMetadata.voting_delay_in_blocks, voteMetadata.voting_period_in_blocks, ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(voteMetadata.proposal_token_threshold), voteMetadata.voting_quorum_fraction];\n      case SplitInitializer.contractType:\n        const splitsMetadata = SplitInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), contractURI, trustedForwarders, splitsMetadata.recipients.map(s => s.address), splitsMetadata.recipients.map(s => ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(s.sharesBps))];\n      case MarketplaceInitializer.contractType:\n        const marketplaceMetadata = MarketplaceInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), contractURI, trustedForwarders, marketplaceMetadata.platform_fee_recipient, marketplaceMetadata.platform_fee_basis_points];\n      case PackInitializer.contractType:\n        const packsMetadata = PackInitializer.schema.deploy.parse(metadata);\n        return [await this.getSignerAddress(), packsMetadata.name, packsMetadata.symbol, contractURI, trustedForwarders, packsMetadata.fee_recipient, packsMetadata.seller_fee_basis_points];\n      default:\n        return [];\n    }\n  }\n  async getDefaultTrustedForwarders() {\n    const chainId = await this.getChainID();\n    return getDefaultTrustedForwarders(chainId);\n  }\n  async getImplementation(contract, version) {\n    const encodedType = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatBytes32String(contract.name);\n    const chainId = await this.getChainID();\n    const approvedImplementation = getApprovedImplementation(chainId, contract.contractType);\n    // return approved implementation if it exists and we're not overriding the version\n    if (approvedImplementation && approvedImplementation.length > 0 && version === undefined) {\n      return approvedImplementation;\n    }\n    return this.readContract.getImplementation(encodedType, version !== undefined ? version : this.DEFAULT_VERSION_MAP[contract.contractType]);\n  }\n  async getLatestVersion(contractType) {\n    const name = getContractName(contractType);\n    if (!name) {\n      throw new Error(`Invalid contract type ${contractType}`);\n    }\n    const encodedType = ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.formatBytes32String(name);\n    return this.readContract.currentVersion(encodedType);\n  }\n}\n\nclass FactoryEvents extends ContractEvents {\n  constructor(contractWrapper) {\n    super(contractWrapper);\n  }\n  addDeployListener(listener) {\n    this.addTransactionListener(async event => {\n      if (!event.transactionHash) {\n        return;\n      }\n      const receipt = await this.contractWrapper.getProvider().getTransactionReceipt(event.transactionHash);\n      const events = this.contractWrapper.parseLogs(\"ProxyDeployed\", receipt.logs);\n      if (events.length > 0) {\n        listener({\n          ...event,\n          contractAddress: events[0].args.proxy\n        });\n      }\n    });\n  }\n}\n\n/**\n * @internal\n */\nclass ContractRegistry extends ContractWrapper {\n  constructor(registryAddress, network, options) {\n    super(network, registryAddress, _thirdweb_dev_contracts_js_dist_abis_TWRegistry_json__WEBPACK_IMPORTED_MODULE_45__, options);\n  }\n  async getContractAddresses(walletAddress) {\n    // TODO @fixme the filter here is necessary because for some reason getAll returns a 0x0 address for the first entry\n    return (await this.readContract.getAll(walletAddress)).filter(adr => ethers__WEBPACK_IMPORTED_MODULE_58__.utils.isAddress(adr) && adr.toLowerCase() !== ethers__WEBPACK_IMPORTED_MODULE_58__.constants.AddressZero);\n  }\n  async addContract(contractAddress) {\n    return await this.addContracts([contractAddress]);\n  }\n  async addContracts(contractAddresses) {\n    const deployerAddress = await this.getSignerAddress();\n    const encoded = [];\n    contractAddresses.forEach(address => {\n      encoded.push(this.readContract.interface.encodeFunctionData(\"add\", [deployerAddress, address]));\n    });\n    return {\n      receipt: await this.multiCall(encoded)\n    };\n  }\n  async removeContract(contractAddress) {\n    return await this.removeContracts([contractAddress]);\n  }\n  async removeContracts(contractAddresses) {\n    const deployerAddress = await this.getSignerAddress();\n    const encoded = [];\n    contractAddresses.forEach(address => {\n      encoded.push(this.readContract.interface.encodeFunctionData(\"remove\", [deployerAddress, address]));\n    });\n    return {\n      receipt: await this.multiCall(encoded)\n    };\n  }\n}\n\n/**\n * Handles deploying new contracts\n * @public\n */\nclass ContractDeployer extends RPCConnectionHandler {\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getFactory} instead\n   */\n\n  /**\n   * @internal\n   * should never be accessed directly, use {@link ContractDeployer.getRegistry} instead\n   */\n\n  constructor(network, options, storage) {\n    super(network, options);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_factory\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"_registry\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"events\", void 0);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"storage\", void 0);\n    this.storage = storage;\n\n    // Initialize factory and registry (we don't need to make these calls async)\n    this.getFactory();\n    this.getRegistry();\n  }\n\n  /**\n   * Deploys an NFT Collection contract\n   *\n   * @remarks Deploys an NFT Collection contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployNFTCollection({\n   *   name: \"My Collection\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployNFTCollection(metadata) {\n    return await this.deployBuiltInContract(NFTCollectionInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new NFTDrop contract\n   *\n   * @remarks Deploys an NFT Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployNFTDrop({\n   *   name: \"My Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployNFTDrop(metadata) {\n    return await this.deployBuiltInContract(NFTDropInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new SignatureDrop contract\n   *\n   * @remarks Deploys a SignatureDrop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deploySignatureDrop({\n   *   name: \"My Signature Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deploySignatureDrop(metadata) {\n    return await this.deployBuiltInContract(SignatureDropInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Multiwrap contract\n   *\n   * @remarks Deploys a Multiwrap contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployMultiwrap({\n   *   name: \"My Multiwrap\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   * @beta\n   */\n  async deployMultiwrap(metadata) {\n    return await this.deployBuiltInContract(MultiwrapInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Edition contract\n   *\n   * @remarks Deploys an Edition contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployEdition({\n   *   name: \"My Edition\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployEdition(metadata) {\n    return await this.deployBuiltInContract(EditionInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new EditionDrop contract\n   *\n   * @remarks Deploys an Edition Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployEditionDrop({\n   *   name: \"My Edition Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployEditionDrop(metadata) {\n    return await this.deployBuiltInContract(EditionDropInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Token contract\n   *\n   * @remarks Deploys a Token contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployToken({\n   *   name: \"My Token\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployToken(metadata) {\n    return await this.deployBuiltInContract(TokenInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Token Drop contract\n   *\n   * @remarks Deploys a Token Drop contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployTokenDrop({\n   *   name: \"My Token Drop\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployTokenDrop(metadata) {\n    return await this.deployBuiltInContract(TokenDropInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Marketplace contract\n   *\n   * @remarks Deploys a Marketplace contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployMarketplace({\n   *   name: \"My Marketplace\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployMarketplace(metadata) {\n    return await this.deployBuiltInContract(MarketplaceInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Pack contract\n   *\n   * @remarks Deploys a Pack contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployPack({\n   *   name: \"My Pack\",\n   *   primary_sale_recipient: \"your-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployPack(metadata) {\n    return await this.deployBuiltInContract(PackInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Split contract\n   *\n   * @remarks Deploys a Split contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deploySplit({\n   *   name: \"My Split\",\n   *   primary_sale_recipient: \"your-address\",\n   *   recipients: [\n   *    {\n   *      address: \"your-address\",\n   *      sharesBps: 80 * 100, // 80%\n   *    },\n   *    {\n   *      address: \"another-address\",\n   *      sharesBps: 20 * 100, // 20%\n   *    },\n   *   ],\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deploySplit(metadata) {\n    return await this.deployBuiltInContract(SplitInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new Vote contract\n   *\n   * @remarks Deploys an Vote contract and returns the address of the deployed contract\n   *\n   * @example\n   * ```javascript\n   * const contractAddress = await sdk.deployer.deployVote({\n   *   name: \"My Vote\",\n   *   primary_sale_recipient: \"your-address\",\n   *   voting_token_address: \"your-token-contract-address\",\n   * });\n   * ```\n   * @param metadata - the contract metadata\n   * @returns the address of the deployed contract\n   */\n  async deployVote(metadata) {\n    return await this.deployBuiltInContract(VoteInitializer.contractType, metadata);\n  }\n\n  /**\n   * Deploys a new contract\n   *\n   * @internal\n   * @param contractType - the type of contract to deploy\n   * @param contractMetadata - the metadata to deploy the contract with\n   * @param version\n   * @returns a promise of the address of the newly deployed contract\n   */\n  async deployBuiltInContract(contractType, contractMetadata) {\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    const activeChainId = (await this.getProvider().getNetwork()).chainId;\n    const parsedMetadata = PREBUILT_CONTRACTS_MAP[contractType].schema.deploy.parse(contractMetadata);\n    const factory = await this.getFactory();\n    if (activeChainId === ChainId.Hardhat || activeChainId === ChainId.Localhost) {\n      //\n      // old behavior for hardhat and localhost chains\n      //\n\n      // parse version into the first number of the version string (or undefined if unparseable)\n      let parsedVersion = undefined;\n      try {\n        parsedVersion = parseInt(version);\n        if (isNaN(parsedVersion)) {\n          parsedVersion = undefined;\n        }\n      } catch (e) {\n        parsedVersion = undefined;\n      }\n      return await factory.deploy(contractType, parsedMetadata, parsedVersion);\n    }\n\n    //\n    // new behavior for all other chains\n    //\n\n    // resolve contract name from type\n    const contractName = getContractName(contractType);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(contractName, \"contract name not found\");\n    // get deploy arugments for the contractType\n    // first upload the contractmetadata\n    const contractURI = await this.storage.upload(parsedMetadata);\n    // the get the deploy arguments\n    const constructorParams = await factory.getDeployArguments(contractType, parsedMetadata, contractURI);\n    return this.deployReleasedContract(\n    // 0xdd99b75f095d0c4d5112aCe938e4e6ed962fb024 === deployer.thirdweb.eth\n    \"0xdd99b75f095d0c4d5112aCe938e4e6ed962fb024\", contractName, constructorParams, version);\n  }\n\n  /**\n   * @internal\n   * @param contractType\n   */\n  async getLatestBuiltInContractVersion(contractType) {\n    const factory = await this.getFactory();\n    return await factory.getLatestVersion(contractType);\n  }\n\n  /**\n   * Deploy any released contract by its name\n   * @param releaserAddress the address of the releaser\n   * @param contractName the name of the contract to deploy\n   * @param constructorParams the constructor params to pass to the contract\n   */\n  async deployReleasedContract(releaserAddress, contractName, constructorParams) {\n    let version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"latest\";\n    const release = await new ThirdwebSDK(\"polygon\").getPublisher().getVersion(releaserAddress, contractName, version);\n    if (!release) {\n      throw new Error(`No release found for '${contractName}' at version '${version}' by '${releaserAddress}'`);\n    }\n    return await this.deployContractFromUri(release.metadataUri, constructorParams);\n  }\n\n  /**\n   * Deploy a proxy contract of a given implementation via the given factory\n   * @param factoryAddress\n   * @param implementationAddress\n   * @param implementationAbi\n   * @param initializerFunction\n   * @param initializerArgs\n   */\n  async deployViaFactory(factoryAddress, implementationAddress, implementationAbi, initializerFunction, initializerArgs) {\n    const signer = this.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"signer is required\");\n    // TODO only require factory interface here - IProxyFactory\n    const proxyFactory = new ContractFactory(factoryAddress, this.getSignerOrProvider(), this.storage, {});\n    return await proxyFactory.deployProxyByImplementation(implementationAddress, implementationAbi, initializerFunction, initializerArgs);\n  }\n\n  /**\n   * Deploy a proxy contract of a given implementation directly\n   * @param implementationAddress\n   * @param implementationAbi\n   * @param initializerFunction\n   * @param initializerArgs\n   */\n  async deployProxy(implementationAddress, implementationAbi, initializerFunction, initializerArgs) {\n    const encodedInitializer = ethers__WEBPACK_IMPORTED_MODULE_58__.Contract.getInterface(implementationAbi).encodeFunctionData(initializerFunction, initializerArgs);\n    const {\n      TWProxy__factory\n    } = await __webpack_require__.e(/*! import() */ \"node_modules_thirdweb-dev_contracts-js_factories_TWProxy__factory_dist_thirdweb-dev-contracts-a26ff3\").then(__webpack_require__.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/factories/TWProxy__factory */ \"./node_modules/@thirdweb-dev/contracts-js/factories/TWProxy__factory/dist/thirdweb-dev-contracts-js-factories-TWProxy__factory.esm.js\"));\n    return this.deployContractWithAbi(TWProxy__factory.abi, TWProxy__factory.bytecode, [implementationAddress, encodedInitializer]);\n  }\n\n  /**\n   * @internal\n   */\n  async getRegistry() {\n    // if we already have a registry just return it back\n    if (this._registry) {\n      return this._registry;\n    }\n\n    // otherwise get the registry address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._registry\" has to be assigned to the promise upfront.\n    return this._registry = this.getProvider().getNetwork().then(async _ref => {\n      let {\n        chainId\n      } = _ref;\n      const registryAddress = getContractAddressByChainId(chainId, \"twRegistry\");\n      return new ContractRegistry(registryAddress, this.getSignerOrProvider(), this.options);\n    });\n  }\n  async getFactory() {\n    // if we already have a factory just return it back\n    if (this._factory) {\n      return this._factory;\n    }\n\n    // otherwise get the factory address for the active chain and get a new one\n\n    // have to do it like this otherwise we run it over and over and over\n    // \"this._factory\" has to be assigned to the promise upfront.\n    return this._factory = this.getProvider().getNetwork().then(async _ref2 => {\n      let {\n        chainId\n      } = _ref2;\n      const factoryAddress = getContractAddressByChainId(chainId, \"twFactory\");\n      const factory = new ContractFactory(factoryAddress, this.getSignerOrProvider(), this.storage, this.options);\n      this.events = new FactoryEvents(factory);\n      return factory;\n    });\n  }\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n    this.updateContractSignerOrProvider();\n  }\n  updateContractSignerOrProvider() {\n    // has to be promises now\n    this._factory?.then(factory => {\n      factory.updateSignerOrProvider(this.getSignerOrProvider());\n    }).catch(() => {\n      // ignore\n    });\n    // has to be promises now\n    this._registry?.then(registry => {\n      registry.updateSignerOrProvider(this.getSignerOrProvider());\n    }).catch(() => {\n      // ignore\n    });\n  }\n\n  /**\n   * @internal\n   * @param publishMetadataUri\n   * @param constructorParamValues\n   * @param options\n   */\n  async deployContractFromUri(publishMetadataUri, constructorParamValues, options) {\n    const signer = this.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"A signer is required\");\n    const compilerMetadata = await fetchPreDeployMetadata(publishMetadataUri, this.storage);\n    let isDeployableViaFactory;\n    let isDeployableViaProxy;\n    let factoryDeploymentData;\n    try {\n      const extendedMetadata = await fetchExtendedReleaseMetadata(publishMetadataUri, this.storage);\n      isDeployableViaFactory = extendedMetadata.isDeployableViaFactory;\n      isDeployableViaProxy = extendedMetadata.isDeployableViaProxy;\n      factoryDeploymentData = FactoryDeploymentSchema.parse(extendedMetadata.factoryDeploymentData);\n    } catch (e) {\n      // not a factory deployment, ignore\n    }\n    const forceDirectDeploy = options?.forceDirectDeploy || false;\n    if (factoryDeploymentData && (isDeployableViaProxy || isDeployableViaFactory) && !forceDirectDeploy) {\n      const chainId = (await this.getProvider().getNetwork()).chainId;\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(factoryDeploymentData.implementationAddresses, \"implementationAddresses is required\");\n      const implementationAddress = factoryDeploymentData.implementationAddresses[chainId];\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(implementationAddress, `implementationAddress not found for chainId '${chainId}'`);\n      (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(factoryDeploymentData.implementationInitializerFunction, `implementationInitializerFunction not set'`);\n      const initializerParamTypes = extractFunctionParamsFromAbi(compilerMetadata.abi, factoryDeploymentData.implementationInitializerFunction).map(p => p.type);\n      const paramValues = this.convertParamValues(initializerParamTypes, constructorParamValues);\n      if (isDeployableViaFactory) {\n        // deploy via a factory (prioritise factory)\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(factoryDeploymentData.factoryAddresses, \"isDeployableViaFactory is true so factoryAddresses is required\");\n        const factoryAddress = factoryDeploymentData.factoryAddresses[chainId];\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(factoryAddress, `isDeployableViaFactory is true and factoryAddress not found for chainId '${chainId}'`);\n        return await this.deployViaFactory(factoryAddress, implementationAddress, compilerMetadata.abi, factoryDeploymentData.implementationInitializerFunction, paramValues);\n      } else if (isDeployableViaProxy) {\n        // deploy a proxy directly\n        return await this.deployProxy(implementationAddress, compilerMetadata.abi, factoryDeploymentData.implementationInitializerFunction, paramValues);\n      }\n    }\n    const bytecode = compilerMetadata.bytecode.startsWith(\"0x\") ? compilerMetadata.bytecode : `0x${compilerMetadata.bytecode}`;\n    if (!ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.isHexString(bytecode)) {\n      throw new Error(`Contract bytecode is invalid.\\n\\n${bytecode}`);\n    }\n    const constructorParamTypes = extractConstructorParamsFromAbi(compilerMetadata.abi).map(p => p.type);\n    const paramValues = this.convertParamValues(constructorParamTypes, constructorParamValues);\n    return this.deployContractWithAbi(compilerMetadata.abi, bytecode, paramValues);\n  }\n  convertParamValues(constructorParamTypes, constructorParamValues) {\n    // check that both arrays are same length\n    if (constructorParamTypes.length !== constructorParamValues.length) {\n      throw Error(\"Passed the wrong number of constructor arguments\");\n    }\n    return constructorParamTypes.map((p, index) => {\n      if (p === \"tuple\" || p.endsWith(\"[]\")) {\n        if (typeof constructorParamValues[index] === \"string\") {\n          return JSON.parse(constructorParamValues[index]);\n        } else {\n          return constructorParamValues[index];\n        }\n      }\n      if (p === \"bytes32\") {\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.isHexString(constructorParamValues[index]), `Could not parse bytes32 value. Expected valid hex string but got \"${constructorParamValues[index]}\".`);\n        return ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.hexZeroPad(constructorParamValues[index], 32);\n      }\n      if (p.startsWith(\"bytes\")) {\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.utils.isHexString(constructorParamValues[index]), `Could not parse bytes value. Expected valid hex string but got \"${constructorParamValues[index]}\".`);\n        return constructorParamValues[index];\n      }\n      if (p.startsWith(\"uint\") || p.startsWith(\"int\")) {\n        return ethers__WEBPACK_IMPORTED_MODULE_58__.BigNumber.from(constructorParamValues[index].toString());\n      }\n      return constructorParamValues[index];\n    });\n  }\n\n  /**\n   * @internal\n   * @param abi\n   * @param bytecode\n   * @param constructorParams\n   */\n  async deployContractWithAbi(abi, bytecode, constructorParams) {\n    const signer = this.getSigner();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(signer, \"Signer is required to deploy contracts\");\n    const deployer = await new ethers__WEBPACK_IMPORTED_MODULE_58__.ethers.ContractFactory(abi, bytecode).connect(signer).deploy(...constructorParams);\n    const deployedContract = await deployer.deployed();\n    // TODO parse transaction receipt\n    return deployedContract.address;\n  }\n}\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\nclass ContractOwner {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"featureName\", FEATURE_OWNER.name);\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Return the current owner of the contract\n   * @returns the owner address\n   */\n  async get() {\n    return this.contractWrapper.readContract.owner();\n  }\n\n  /**\n   * Set the new owner of the contract\n   * @remarks Can only be called by the current owner.\n   *\n   * @param address - the address of the new owner\n   *\n   * @example\n   * ```javascript\n   * await contract.owner.set(\"0x1234567890123456789012345678901234567890\");\n   * ```\n   */\n  async set(address) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"setOwner\", [address])\n    };\n  }\n}\n\nconst PAPER_API_BASE = `https://paper.xyz/api`;\nconst PAPER_API_VERSION = `2022-08-12`;\n\n/**\n * @internal\n */\nconst PAPER_API_URL = `${PAPER_API_BASE}/${PAPER_API_VERSION}/platform/thirdweb`;\nconst PAPER_CHAIN_ID_MAP = {\n  [ChainId.Mainnet]: \"Ethereum\",\n  [ChainId.Goerli]: \"Goerli\",\n  [ChainId.Polygon]: \"Polygon\",\n  [ChainId.Mumbai]: \"Mumbai\",\n  [ChainId.Avalanche]: \"Avalanche\"\n};\n\n/**\n * @internal\n */\nfunction parseChainIdToPaperChain(chainId) {\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(chainId in PAPER_CHAIN_ID_MAP, `chainId not supported by paper: ${chainId}`);\n  return PAPER_CHAIN_ID_MAP[chainId];\n}\n/**\n *\n * @param contractAddress\n * @param chainId\n * @internal\n * @returns the paper xyz contract id\n * @throws if the contract is not registered on paper xyz\n */\nasync function fetchRegisteredCheckoutId(contractAddress, chainId) {\n  const paperChain = parseChainIdToPaperChain(chainId);\n  const res = await fetch(`${PAPER_API_URL}/register-contract?contractAddress=${contractAddress}&chain=${paperChain}`);\n  const json = await res.json();\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(json.result.id, \"Contract is not registered with paper\");\n  return json.result.id;\n}\n\n/**\n * The parameters for creating a paper.xyz checkout link.\n * @public\n */\n\nconst DEFAULT_PARAMS = {\n  expiresInMinutes: 15,\n  feeBearer: \"BUYER\",\n  sendEmailOnSuccess: true,\n  redirectAfterPayment: false\n};\n\n/**\n * @internal\n */\nasync function createCheckoutLinkIntent(contractId, params) {\n  const res = await fetch(`${PAPER_API_URL}/checkout-link-intent`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      contractId,\n      ...DEFAULT_PARAMS,\n      ...params,\n      metadata: {\n        ...params.metadata,\n        via_platform: \"thirdweb\"\n      },\n      // overrides that are hard coded\n      hideNativeMint: true,\n      hidePaperWallet: !!params.walletAddress,\n      hideExternalWallet: true,\n      hidePayWithCrypto: true,\n      usePaperKey: false\n    })\n  });\n  const json = await res.json();\n  (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(json.checkoutLinkIntentUrl, \"Failed to create checkout link intent\");\n  return json.checkoutLinkIntentUrl;\n}\n\n/**\n * @internal\n */\nclass PaperCheckout {\n  constructor(contractWrapper) {\n    (0,_defineProperty_e24c82ea_esm_js__WEBPACK_IMPORTED_MODULE_61__._)(this, \"contractWrapper\", void 0);\n    this.contractWrapper = contractWrapper;\n  }\n  async getCheckoutId() {\n    return fetchRegisteredCheckoutId(this.contractWrapper.readContract.address, await this.contractWrapper.getChainID());\n  }\n  async isEnabled() {\n    try {\n      return !!(await this.getCheckoutId());\n    } catch (err) {\n      return false;\n    }\n  }\n  async createLinkIntent(params) {\n    return await createCheckoutLinkIntent(await this.getCheckoutId(), params);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-aa7869f7.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.esm.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ALL_ROLES\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bw; },\n/* harmony export */   \"APPROVED_IMPLEMENTATIONS\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b$; },\n/* harmony export */   \"AbiObjectSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.X; },\n/* harmony export */   \"AbiSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.Y; },\n/* harmony export */   \"AbiTypeSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.W; },\n/* harmony export */   \"AdminRoleMissingError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bp; },\n/* harmony export */   \"AssetNotFoundError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bb; },\n/* harmony export */   \"AuctionAlreadyStartedError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bk; },\n/* harmony export */   \"AuctionHasNotEndedError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bq; },\n/* harmony export */   \"AuthenticationOptionsSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ae; },\n/* harmony export */   \"AuthenticationPayloadDataSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.af; },\n/* harmony export */   \"AuthenticationPayloadSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ag; },\n/* harmony export */   \"BYOCContractMetadataSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.N; },\n/* harmony export */   \"BaseSignaturePayloadInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.B; },\n/* harmony export */   \"CHAIN_ID_TO_NAME\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cc; },\n/* harmony export */   \"CHAIN_NAME_TO_ID\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cb; },\n/* harmony export */   \"CONTRACTS_MAP\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ct; },\n/* harmony export */   \"CONTRACT_ADDRESSES\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b_; },\n/* harmony export */   \"ChainId\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.e; },\n/* harmony export */   \"ChainIdToAddressSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__._; },\n/* harmony export */   \"ClaimConditionInputArray\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c; },\n/* harmony export */   \"ClaimConditionInputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b; },\n/* harmony export */   \"ClaimConditionMetadataSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a; },\n/* harmony export */   \"ClaimConditionOutputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.d; },\n/* harmony export */   \"ClaimEligibility\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b3; },\n/* harmony export */   \"CommonContractOutputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.i; },\n/* harmony export */   \"CommonContractSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.C; },\n/* harmony export */   \"CommonPlatformFeeSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.l; },\n/* harmony export */   \"CommonPrimarySaleSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.k; },\n/* harmony export */   \"CommonRoyaltySchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.j; },\n/* harmony export */   \"CommonSymbolSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.n; },\n/* harmony export */   \"CommonTrustedForwarderSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.m; },\n/* harmony export */   \"CompilerMetadataFetchedSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a8; },\n/* harmony export */   \"ContractDeployer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aS; },\n/* harmony export */   \"ContractEncoder\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ai; },\n/* harmony export */   \"ContractEvents\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aU; },\n/* harmony export */   \"ContractInfoSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a7; },\n/* harmony export */   \"ContractInterceptor\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aV; },\n/* harmony export */   \"ContractMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aj; },\n/* harmony export */   \"ContractOwner\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aY; },\n/* harmony export */   \"ContractPlatformFee\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aW; },\n/* harmony export */   \"ContractPrimarySale\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.am; },\n/* harmony export */   \"ContractPublishedMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aX; },\n/* harmony export */   \"ContractRoles\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ak; },\n/* harmony export */   \"ContractRoyalty\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.al; },\n/* harmony export */   \"CurrencySchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.o; },\n/* harmony export */   \"CurrencyValueSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.p; },\n/* harmony export */   \"CustomContractDeploy\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.U; },\n/* harmony export */   \"CustomContractInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.Q; },\n/* harmony export */   \"CustomContractOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.R; },\n/* harmony export */   \"CustomContractSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.V; },\n/* harmony export */   \"DEFAULT_IPFS_GATEWAY\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ca; },\n/* harmony export */   \"DEFAULT_RPC_URLS\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cd; },\n/* harmony export */   \"DelayedReveal\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.an; },\n/* harmony export */   \"DropClaimConditions\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ao; },\n/* harmony export */   \"DropErc1155ClaimConditions\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ap; },\n/* harmony export */   \"DropErc1155History\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aq; },\n/* harmony export */   \"DuplicateFileNameError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.be; },\n/* harmony export */   \"DuplicateLeafsError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bj; },\n/* harmony export */   \"EditionDropInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cg; },\n/* harmony export */   \"EditionInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ch; },\n/* harmony export */   \"EditionMetadataInputOrUriSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.h; },\n/* harmony export */   \"EditionMetadataInputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.g; },\n/* harmony export */   \"EditionMetadataOutputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.E; },\n/* harmony export */   \"EditionMetadataWithOwnerOutputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.f; },\n/* harmony export */   \"Erc1155\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aI; },\n/* harmony export */   \"Erc1155BatchMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aL; },\n/* harmony export */   \"Erc1155Burnable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aN; },\n/* harmony export */   \"Erc1155Enumerable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aJ; },\n/* harmony export */   \"Erc1155LazyMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aO; },\n/* harmony export */   \"Erc1155Mintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aK; },\n/* harmony export */   \"Erc1155SignatureMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aM; },\n/* harmony export */   \"Erc20\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ar; },\n/* harmony export */   \"Erc20BatchMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.at; },\n/* harmony export */   \"Erc20Burnable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aw; },\n/* harmony export */   \"Erc20Mintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.as; },\n/* harmony export */   \"Erc20SignatureMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.av; },\n/* harmony export */   \"Erc721\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ay; },\n/* harmony export */   \"Erc721BatchMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aF; },\n/* harmony export */   \"Erc721Burnable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aG; },\n/* harmony export */   \"Erc721ClaimableWithConditions\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aA; },\n/* harmony export */   \"Erc721Enumerable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aD; },\n/* harmony export */   \"Erc721LazyMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.az; },\n/* harmony export */   \"Erc721Mintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aE; },\n/* harmony export */   \"Erc721Supply\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aC; },\n/* harmony export */   \"Erc721WithQuantitySignatureMintable\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aB; },\n/* harmony export */   \"EventType\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c9; },\n/* harmony export */   \"ExtensionNotImplementedError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.br; },\n/* harmony export */   \"ExtraPublishMetadataSchemaInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0; },\n/* harmony export */   \"ExtraPublishMetadataSchemaOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1; },\n/* harmony export */   \"FactoryDeploymentSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.$; },\n/* harmony export */   \"FetchError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bi; },\n/* harmony export */   \"FileNameMissingError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bd; },\n/* harmony export */   \"FullPublishMetadataSchemaInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2; },\n/* harmony export */   \"FullPublishMetadataSchemaOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a3; },\n/* harmony export */   \"FunctionDeprecatedError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bl; },\n/* harmony export */   \"GasCostEstimator\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aT; },\n/* harmony export */   \"GenericRequest\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.G; },\n/* harmony export */   \"InterfaceId_IERC1155\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c5; },\n/* harmony export */   \"InterfaceId_IERC721\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c4; },\n/* harmony export */   \"InvalidAddressError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b9; },\n/* harmony export */   \"ListingNotFoundError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bm; },\n/* harmony export */   \"ListingType\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b0; },\n/* harmony export */   \"LoginOptionsSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aa; },\n/* harmony export */   \"LoginPayloadDataSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ab; },\n/* harmony export */   \"LoginPayloadSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ac; },\n/* harmony export */   \"MarketplaceAuction\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aR; },\n/* harmony export */   \"MarketplaceDirect\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aQ; },\n/* harmony export */   \"MarketplaceInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ci; },\n/* harmony export */   \"MerkleSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.F; },\n/* harmony export */   \"MintRequest1155\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.A; },\n/* harmony export */   \"MintRequest20\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.M; },\n/* harmony export */   \"MintRequest721\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.z; },\n/* harmony export */   \"MintRequest721withQuantity\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.D; },\n/* harmony export */   \"MissingOwnerRoleError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bg; },\n/* harmony export */   \"MissingRoleError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ba; },\n/* harmony export */   \"MultiwrapInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cj; },\n/* harmony export */   \"NATIVE_TOKENS\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c7; },\n/* harmony export */   \"NATIVE_TOKEN_ADDRESS\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c6; },\n/* harmony export */   \"NFTCollectionInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ck; },\n/* harmony export */   \"NFTDropInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cl; },\n/* harmony export */   \"NotEnoughTokensError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bf; },\n/* harmony export */   \"NotFoundError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b8; },\n/* harmony export */   \"OZ_DEFENDER_FORWARDER_ADDRESS\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bZ; },\n/* harmony export */   \"OptionalPropertiesInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.O; },\n/* harmony export */   \"PAPER_API_URL\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cw; },\n/* harmony export */   \"PREBUILT_CONTRACTS_MAP\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cs; },\n/* harmony export */   \"PackInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cm; },\n/* harmony export */   \"PaperCheckout\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cA; },\n/* harmony export */   \"PartialClaimConditionInputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.P; },\n/* harmony export */   \"PreDeployMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.Z; },\n/* harmony export */   \"PreDeployMetadataFetchedSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a9; },\n/* harmony export */   \"ProfileSchemaInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a4; },\n/* harmony export */   \"ProfileSchemaOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a5; },\n/* harmony export */   \"ProposalState\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b1; },\n/* harmony export */   \"PublishedContractSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a6; },\n/* harmony export */   \"QuantityAboveLimitError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bh; },\n/* harmony export */   \"RestrictedTransferError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bo; },\n/* harmony export */   \"SUPPORTED_CHAIN_IDS\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.S; },\n/* harmony export */   \"Signature1155PayloadInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.u; },\n/* harmony export */   \"Signature1155PayloadInputWithTokenId\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.v; },\n/* harmony export */   \"Signature1155PayloadOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.w; },\n/* harmony export */   \"Signature20PayloadInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.q; },\n/* harmony export */   \"Signature20PayloadOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.r; },\n/* harmony export */   \"Signature721PayloadInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.s; },\n/* harmony export */   \"Signature721PayloadOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.t; },\n/* harmony export */   \"Signature721WithQuantityInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.x; },\n/* harmony export */   \"Signature721WithQuantityOutput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.y; },\n/* harmony export */   \"SignatureDropInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cn; },\n/* harmony export */   \"SnapshotEntryInput\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.H; },\n/* harmony export */   \"SnapshotEntryWithProofSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.J; },\n/* harmony export */   \"SnapshotInfoSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.L; },\n/* harmony export */   \"SnapshotInputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.I; },\n/* harmony export */   \"SnapshotSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.K; },\n/* harmony export */   \"SplitInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.co; },\n/* harmony export */   \"StandardErc1155\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aP; },\n/* harmony export */   \"StandardErc20\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ax; },\n/* harmony export */   \"StandardErc721\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aH; },\n/* harmony export */   \"ThirdwebSDK\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a$; },\n/* harmony export */   \"TokenDropInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cp; },\n/* harmony export */   \"TokenERC20History\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.au; },\n/* harmony export */   \"TokenInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cq; },\n/* harmony export */   \"TokenMintInputSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.T; },\n/* harmony export */   \"TransactionError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bs; },\n/* harmony export */   \"TransactionTask\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.aZ; },\n/* harmony export */   \"UploadError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bc; },\n/* harmony export */   \"UserWallet\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.a_; },\n/* harmony export */   \"VerifyOptionsSchema\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ad; },\n/* harmony export */   \"VoteInitializer\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cr; },\n/* harmony export */   \"VoteType\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b2; },\n/* harmony export */   \"WalletAuthenticator\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ah; },\n/* harmony export */   \"WrongListingTypeError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bn; },\n/* harmony export */   \"assertEnabled\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bT; },\n/* harmony export */   \"convertToReadableQuantity\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b7; },\n/* harmony export */   \"convertToTWError\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bt; },\n/* harmony export */   \"createCheckoutLinkIntent\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cz; },\n/* harmony export */   \"createSnapshot\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bv; },\n/* harmony export */   \"detectContractFeature\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bU; },\n/* harmony export */   \"detectFeatures\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bP; },\n/* harmony export */   \"extractConstructorParams\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bA; },\n/* harmony export */   \"extractConstructorParamsFromAbi\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bC; },\n/* harmony export */   \"extractEventsFromAbi\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bF; },\n/* harmony export */   \"extractFunctionParamsFromAbi\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bD; },\n/* harmony export */   \"extractFunctions\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bB; },\n/* harmony export */   \"extractFunctionsFromAbi\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bE; },\n/* harmony export */   \"extractIPFSHashFromBytecode\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bI; },\n/* harmony export */   \"extractMinimalProxyImplementationAddress\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bG; },\n/* harmony export */   \"fetchContractMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bK; },\n/* harmony export */   \"fetchContractMetadataFromAddress\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bJ; },\n/* harmony export */   \"fetchCurrencyMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b5; },\n/* harmony export */   \"fetchCurrencyValue\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b4; },\n/* harmony export */   \"fetchExtendedReleaseMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bO; },\n/* harmony export */   \"fetchPreDeployMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bN; },\n/* harmony export */   \"fetchRawPredeployMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bM; },\n/* harmony export */   \"fetchRegisteredCheckoutId\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cy; },\n/* harmony export */   \"fetchSourceFilesFromMetadata\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bL; },\n/* harmony export */   \"getAllDetectedFeatureNames\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bR; },\n/* harmony export */   \"getAllDetectedFeatures\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bQ; },\n/* harmony export */   \"getApprovedImplementation\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c0; },\n/* harmony export */   \"getContractAddressByChainId\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c1; },\n/* harmony export */   \"getContractName\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cv; },\n/* harmony export */   \"getContractPublisherAddress\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c2; },\n/* harmony export */   \"getContractTypeForRemoteName\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cu; },\n/* harmony export */   \"getDefaultTrustedForwarders\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c3; },\n/* harmony export */   \"getNativeTokenByChainId\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.c8; },\n/* harmony export */   \"getProviderForNetwork\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.ce; },\n/* harmony export */   \"getReadOnlyProvider\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cf; },\n/* harmony export */   \"getRoleHash\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bx; },\n/* harmony export */   \"hasFunction\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bV; },\n/* harmony export */   \"hasMatchingAbi\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bz; },\n/* harmony export */   \"includesErrorMessage\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bu; },\n/* harmony export */   \"isDowngradeVersion\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bY; },\n/* harmony export */   \"isFeatureEnabled\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bS; },\n/* harmony export */   \"isIncrementalVersion\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bX; },\n/* harmony export */   \"matchesPrebuiltAbi\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.by; },\n/* harmony export */   \"normalizePriceValue\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.b6; },\n/* harmony export */   \"parseChainIdToPaperChain\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.cx; },\n/* harmony export */   \"resolveContractUriFromAddress\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bH; },\n/* harmony export */   \"toSemver\": function() { return /* reexport safe */ _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__.bW; }\n/* harmony export */ });\n/* harmony import */ var _thirdweb_checkout_aa7869f7_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./thirdweb-checkout-aa7869f7.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-aa7869f7.esm.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC165_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC165.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC165.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC1155_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155.json\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IThirdwebContract_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_Forwarder_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/Forwarder.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Forwarder.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_DropERC20_V2_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IBurnableERC20_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDrop_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDrop.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDrop.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_json__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase_V1_json__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMintableERC20_json__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMulticall_json__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMulticall.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMulticall.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC20_json__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_DropERC721_V3_json__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IBurnableERC721_json__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IClaimableERC721_json__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDelayedReveal_json__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721Enumerable_json__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721Supply_json__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ILazyMint_json__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ILazyMint.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMintableERC721_json__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC721_json__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC721_V1_json__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_LazyMintWithTier_json__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_DropERC1155_V2_json__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IBurnableERC1155_json__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IClaimableERC1155_json__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDrop1155_json__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDrop1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase1155_json__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDropSinglePhase1155_V1_json__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC1155Enumerable_json__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IMintableERC1155_json__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ISignatureMintERC1155_json__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! bs58 */ \"./node_modules/@thirdweb-dev/sdk/node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_39__);\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC20Metadata_json__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! merkletreejs */ \"./node_modules/merkletreejs/dist/index.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_41___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_41__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_42__);\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC721Metadata_json__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC1155Metadata_json__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IDelayedRevealDeprecated_json__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_TWFactory_json__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/TWFactory.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/TWFactory.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_TWRegistry_json__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/TWRegistry.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ContractPublisher_json__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json\");\n/* harmony import */ var _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @thirdweb-dev/storage */ \"./node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.esm.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ERC2771Context_json__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IAppURI_json__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IAppURI.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IAppURI.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IContractMetadata_json__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPermissions_json__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPermissions.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPermissions.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPermissionsEnumerable_json__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPlatformFee_json__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPrimarySale_json__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IRoyalty_json__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IRoyalty.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_Ownable_json__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/Ownable.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/Ownable.json\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// handle browser vs node global\nglobalThis.global = globalThis;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.esm.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.js\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventEmitter\": function() { return /* reexport default export from named module */ _index_js__WEBPACK_IMPORTED_MODULE_0__; }\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.js\");\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_index_js__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvbm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjMvaW5kZXgubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDOztBQUVkO0FBQ3ZCLCtEQUFlLHNDQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3Nkay9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5tanM/ZWJiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vaW5kZXguanMnXG5cbmV4cG9ydCB7IEV2ZW50RW1pdHRlciB9XG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs\n"));

/***/ }),

/***/ "./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json":
/*!****************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json ***!
  \****************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = JSON.parse('[{"inputs":[{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"royaltyRecipient","type":"address"},{"internalType":"uint256","name":"royaltyBps","type":"uint256"},{"internalType":"address","name":"primarySaleRecipient","type":"address"},{"internalType":"string","name":"uri","type":"string"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint128","name":"validityStartTimestamp","type":"uint128"},{"internalType":"uint128","name":"validityEndTimestamp","type":"uint128"},{"internalType":"bytes32","name":"uid","type":"bytes32"}],"internalType":"struct ITokenERC721.MintRequest","name":"_req","type":"tuple"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"mintWithSignature","outputs":[{"internalType":"uint256","name":"tokenIdMinted","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"royaltyRecipient","type":"address"},{"internalType":"uint256","name":"royaltyBps","type":"uint256"},{"internalType":"address","name":"primarySaleRecipient","type":"address"},{"internalType":"string","name":"uri","type":"string"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"uint128","name":"validityStartTimestamp","type":"uint128"},{"internalType":"uint128","name":"validityEndTimestamp","type":"uint128"},{"internalType":"bytes32","name":"uid","type":"bytes32"}],"internalType":"struct ITokenERC721.MintRequest","name":"_req","type":"tuple"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]');

/***/ })

});